{"pageProps":{"blog":{"id":"laravel-softdelete","createdAt":"2022-03-02T23:54:39.267Z","updatedAt":"2022-03-02T23:55:00.491Z","publishedAt":"2022-02-23T23:54:39.000Z","revisedAt":"2022-03-02T23:54:39.267Z","title":"【Laravel】論理削除（softDelete）するときにリレーション先のデータも削除する方法","body":"<h2 id=\"h9707d3a59a\">概要</h2><p>Laravelでは、マイグレーションファイルに外部キー制約の設定を記述しておくと、親テーブルのデータを削除したときに子テーブルのデータも同時に削除することができます。<br><br>但しこれは、DBから実際にデータを削除する「<strong>物理削除</strong>」の場合の話です。<br>DBからレコードを削除するわけではなく削除フラグを立てて削除したとみなす「<strong>論理削除</strong>」の場合は、マイグレーションファイルへの記述だけではリレーション先のデータを一緒に削除してくれません。<br>このような場合に、&nbsp;<strong>モデルの&nbsp;</strong><strong><code>boot</code></strong><strong>&nbsp;メソッド（もしくは&nbsp;</strong><strong><code>booted</code></strong><strong>&nbsp;メソッド）を使って初期設定を行えば</strong>、あるテーブルのデータを論理削除したときにリレーション先のテーブルのデータも削除することができます。<br>業務でこの方法を使う機会があったので、 モデル&nbsp;<code>boot</code>&nbsp;メソッドについて勉強したこととあわせて、備忘録を書いておきたいと思います。<br></p><h2 id=\"hafc8e872cc\">論理削除（softDelete）の設定方法</h2><p>まず事前準備としてソフトデリートの設定をします。<br><br>ソフトデリート機能を組み込む手順は以下の2つです。<br><br>1.　マイグレーションファイルにソフトデリートの設定を記述する<br>2.　EloquentモデルにSoftDeletesトレイトを組み込む<br><br>例として&nbsp;<code>users</code>&nbsp;テーブルにソフトデリート機能を設定してみます。<br></p><h3 id=\"hb5391332f6\">1. マイグレーションファイルにソフトデリートの設定を記述する</h3><p>Laravelの論理削除ではテーブルの&nbsp;<code>deleted_at</code>カラムに値が入っている場合はデータは削除されたとみなすので、&nbsp;<code>deleted_at</code>カラムを追加する必要があります。<br><br><code>deleted_at</code>カラムを追加するため、マイグレーションファイルに以下の1行を追記します。</p><pre><code>publicfunction up()\n{\n    Schema::table('user',function (Blueprint $table) {\n        $table-&gt;softDeletes();    // 追記\n    });\n}</code></pre><p>これでマイグレーションを実行すると、DBのテーブルに&nbsp;<code>deleted_at</code>カラムが作成されていることが確認できます。<br></p><h3 id=\"h4383fed8c3\">2. EloquentモデルにSoftDeletesトレイトを組み込む</h3><p><code>User</code>&nbsp;モデルファイルに以下のように追記します。</p><pre><code>use Illuminate\\Database\\Eloquent\\SoftDeletes;    // 追記\n\nclass User extends Model\n{\n    use SoftDeletes;    // 追記\n}</code></pre><p>この記述により、deleteメソッドでモデルを削除した際はソフトデリートが実行されるようになります。<br><br>Laravelでソフトデリートを行うための設定は以上です。<br></p><h2 id=\"h10178e1c1c\">モデルのbootedメソッドとは</h2><p>本題の「ソフトデリートするときにリレーション先のデータも削除する」ための実装にあたり、先に今回使用する&nbsp;<code>boooted</code>&nbsp;メソッドについて少し勉強しておきます。<br><br><code>Laravel</code>&nbsp;のモデルでは、初期起動時に&nbsp;<code>boot</code>&nbsp;メソッドを走らせて初期設定をしています。<br><code>booted</code>&nbsp;メソッドはモデルの初期起動後に実行されるメソッドで、モデルに対して行いたい初期設定は&nbsp;<code>booted</code>&nbsp;メソッドに書くよう&nbsp;<code>readouble</code>&nbsp;にも説明があります。</p><h3 id=\"he23cb179bf\">【補足】bootedメソッドとbootメソッドについて</h3><p>今回実装方法をググっていると<code>boot</code>メソッドを使っている記事が見つかり、自分としても初期起動時のメソッドといえば<code>boot</code>メソッドのイメージがあったので、<code>booted</code>メソッドと<code>boot</code>メソッドについて少し調べてみました。<br><br><code>readouble</code>&nbsp;の説明では、モデルの初期設定を行う方法としてLaravel6までは&nbsp;<code>boot</code>&nbsp;メソッドが使われていますが、Laravel7以降では&nbsp;<code>booted</code>&nbsp;メソッドが使われていました。<br>・Laravel8の該当箇所<br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html#:~:text=%E3%81%97%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%A7%E3%81%99%E3%80%82-,%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%AE%E4%BD%BF%E7%94%A8,-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br>・Laravel6の該当箇所<br><a href=\"https://readouble.com/laravel/6.x/ja/eloquent.html#:~:text=%E9%98%B2%E3%81%92%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AE%E9%81%A9%E7%94%A8,-%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AB%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquent：利用の開始 6.x Laravel</a><br><br>試しにモデルファイルに以下のように書き、&nbsp;<code>booted()</code>&nbsp;のところにマウスをホバーさせてVSCodeのヒントを表示してみます。</p><pre><code>// モデルファイルに記述\n/**\n * @return void\n */\npublic static function booted(): void\n{\n    //\n}\n\n// booted() にマウスをホバーさせると、以下の説明が表示される\nIlluminate\\Database\\Eloquent\\Model::booted\n\nPerform any actions required after the model boots.\n\n&lt;?php\nprotected static function booted() { }</code></pre><p><code>booted</code>メソッドについては、&nbsp;<code>Perform any actions required after the model boots.</code>&nbsp;と説明されています。<br><br><code>boot()</code>&nbsp;を書いた場合も確認します。</p><pre><code>// モデルファイルに記述\n/**\n * @return void\n */\npublic static function boot(): void\n{\n    //\n}\n\n// boot() にマウスをホバーさせると、以下の説明が出る\nIlluminate\\Database\\Eloquent\\Model::boot\n\nBootstrap the model and its traits.\n\n&lt;?php\nprotected static function boot() { }\n@return void</code></pre><p><code>boot</code>&nbsp;メソッドは&nbsp;<code>Bootstrap the model and its traits.</code>&nbsp;と説明がありました。<br><br>※実際のLaravelのソースコードだと、以下のファイルに&nbsp;<code>boot</code>&nbsp;メソッドも&nbsp;<code>booted</code>&nbsp;メソッドもありました。　<br>興味のある方はこちらもご覧ください。<br><a href=\"https://github.com/laravel/framework/blob/9.x/src/Illuminate/Database/Eloquent/Model.php\" target=\"_blank\" rel=\"noopener noreferrer\">framework/Model.php at 9.x · laravel/framework</a><br><br>メソッド名の通りですが、&nbsp;<code>booted</code>メソッドはモデルの初期起動後に実行されているということですね。<br>私は業務ではLaravel8を使っており、&nbsp;<code>boot</code>&nbsp;メソッドでも&nbsp;<code>booted</code>&nbsp;メソッドでも同じように設定を行うことは出来ましたが、現在の&nbsp;<code>readouble</code>&nbsp;の説明に従って&nbsp;<code>booted</code>メソッドを使っていきたいと思います。<br></p><h2 id=\"haaaceead0a\">Modelのbootedメソッドにクロージャを書く</h2><p>前置きが長くなりましたが、実際にモデルの&nbsp;<code>booted</code>&nbsp;メソッドに「データを論理削除したらリレーション先のデータも削除する」設定を記述します。<br></p><h3 id=\"h8a175a9b0e\">前提</h3><ul><li><code>users</code>&nbsp;テーブル（親）と<strong>1対多</strong>で紐づく&nbsp;<code>posts</code>&nbsp;テーブルがあるとします。</li><li><code>users</code>&nbsp;テーブルからレコードを論理削除したら、 リレーション先の<code>posts</code>&nbsp;テーブルからもレコードを論理削除するように設定します。</li></ul><p><br></p><h3 id=\"hf031c5e696\">実装方法</h3><p><code>User.php</code>にリレーションと&nbsp;<code>booted</code>メソッドを追記します。</p><pre><code>class User extends Model\n{\n    use HasFactory, SoftDeletes;\n\n    /**\n     * @return HasMany\n     */\n    public function posts(): HasMany\n    {\n        return $this-&gt;hasMany(Post::class);\n    }\n\n    /**\n     * @return void\n     */\n    public static function booted(): void\n    {\n        static::deleted(function ($user) {\n            $user-&gt;posts()-&gt;delete();\n        });\n    }\n}</code></pre><p>これにより、&nbsp;<code>users</code>&nbsp;テーブルのデータ削除時に、リレーション先の&nbsp;<code>posts</code>&nbsp;テーブルからも同時に削除してくれます。<br><br>※&nbsp;<code>posts</code>&nbsp;テーブルに対してもソフトデリートの設定を行っている場合は&nbsp;<code>posts</code>&nbsp;テーブルも論理削除、何も設定していなければ&nbsp;<code>posts</code>&nbsp;テーブルからは物理削除になります。<br></p><h2 id=\"h3bcda3e6b0\">最後に</h2><p>論理削除はDBのレコードを削除するわけでは無く、SQLの命令文でいうと&nbsp;<code>UPDATE</code>&nbsp;にあたるので、論理削除の場合はDB的には削除と見なされないということは、よく考えると当たり前でもありますが改めて勉強になりました。<br><br>またモデルの&nbsp;<code>boot</code>&nbsp;メソッドや&nbsp;<code>booted</code>&nbsp;メソッドの使い方や、これらが出来ることについても良い学びになりました。<br>Laravelのライフサイクルの理解を深めれば、もっともっと実装の引き出しが増えるんだろうなと思うので、コツコツ勉強していきたいと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br><br><a href=\"https://yaba-blog.com/larave-soft-delete/#toc3\" target=\"_blank\" rel=\"noopener noreferrer\">【Laravel】リレーション先のデータを論理削除（Soft Delete）する方法</a><br><br><a href=\"https://zenn.dev/naoki_oshiumi/articles/e16c9fbb4dfa3d\" target=\"_blank\" rel=\"noopener noreferrer\">レコードが削除されたときに子要素も一緒に削除する(laravel)</a><br><br><a href=\"https://qiita.com/niisan-tokyo/items/d3be588b53df8fa0278c\" target=\"_blank\" rel=\"noopener noreferrer\">Laravelのマニュアルにない?小技: Eloquentのboot時にtraitのbootを別に走らせる - Qiita</a><br></p>","tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"}],"image":"laravel"},"highlightedBody":"<html><head></head><body><h2 id=\"h9707d3a59a\">概要</h2><p>Laravelでは、マイグレーションファイルに外部キー制約の設定を記述しておくと、親テーブルのデータを削除したときに子テーブルのデータも同時に削除することができます。<br><br>但しこれは、DBから実際にデータを削除する「<strong>物理削除</strong>」の場合の話です。<br>DBからレコードを削除するわけではなく削除フラグを立てて削除したとみなす「<strong>論理削除</strong>」の場合は、マイグレーションファイルへの記述だけではリレーション先のデータを一緒に削除してくれません。<br>このような場合に、&nbsp;<strong>モデルの&nbsp;</strong><strong><code>boot</code></strong><strong>&nbsp;メソッド（もしくは&nbsp;</strong><strong><code>booted</code></strong><strong>&nbsp;メソッド）を使って初期設定を行えば</strong>、あるテーブルのデータを論理削除したときにリレーション先のテーブルのデータも削除することができます。<br>業務でこの方法を使う機会があったので、 モデル&nbsp;<code>boot</code>&nbsp;メソッドについて勉強したこととあわせて、備忘録を書いておきたいと思います。<br></p><h2 id=\"hafc8e872cc\">論理削除（softDelete）の設定方法</h2><p>まず事前準備としてソフトデリートの設定をします。<br><br>ソフトデリート機能を組み込む手順は以下の2つです。<br><br>1.　マイグレーションファイルにソフトデリートの設定を記述する<br>2.　EloquentモデルにSoftDeletesトレイトを組み込む<br><br>例として&nbsp;<code>users</code>&nbsp;テーブルにソフトデリート機能を設定してみます。<br></p><h3 id=\"hb5391332f6\">1. マイグレーションファイルにソフトデリートの設定を記述する</h3><p>Laravelの論理削除ではテーブルの&nbsp;<code>deleted_at</code>カラムに値が入っている場合はデータは削除されたとみなすので、&nbsp;<code>deleted_at</code>カラムを追加する必要があります。<br><br><code>deleted_at</code>カラムを追加するため、マイグレーションファイルに以下の1行を追記します。</p><pre><code class=\"hljs\">publicfunction <span class=\"hljs-built_in\">up</span>()\n{\n    Schema::table(<span class=\"hljs-string\">'user'</span>,function (Blueprint <span class=\"hljs-variable\">$table</span>) {\n        <span class=\"hljs-variable\">$table</span>-&gt;<span class=\"hljs-built_in\">softDeletes</span>();    <span class=\"hljs-comment\">// 追記</span>\n    });\n}</code></pre><p>これでマイグレーションを実行すると、DBのテーブルに&nbsp;<code>deleted_at</code>カラムが作成されていることが確認できます。<br></p><h3 id=\"h4383fed8c3\">2. EloquentモデルにSoftDeletesトレイトを組み込む</h3><p><code>User</code>&nbsp;モデルファイルに以下のように追記します。</p><pre><code class=\"hljs\">use <span class=\"hljs-type\">Illuminate</span>\\<span class=\"hljs-type\">Database</span>\\<span class=\"hljs-type\">Eloquent</span>\\<span class=\"hljs-type\">SoftDeletes</span>;    <span class=\"hljs-comment\">// 追記</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Model</span></span>\n{\n    use <span class=\"hljs-type\">SoftDeletes</span>;    <span class=\"hljs-comment\">// 追記</span>\n}</code></pre><p>この記述により、deleteメソッドでモデルを削除した際はソフトデリートが実行されるようになります。<br><br>Laravelでソフトデリートを行うための設定は以上です。<br></p><h2 id=\"h10178e1c1c\">モデルのbootedメソッドとは</h2><p>本題の「ソフトデリートするときにリレーション先のデータも削除する」ための実装にあたり、先に今回使用する&nbsp;<code>boooted</code>&nbsp;メソッドについて少し勉強しておきます。<br><br><code>Laravel</code>&nbsp;のモデルでは、初期起動時に&nbsp;<code>boot</code>&nbsp;メソッドを走らせて初期設定をしています。<br><code>booted</code>&nbsp;メソッドはモデルの初期起動後に実行されるメソッドで、モデルに対して行いたい初期設定は&nbsp;<code>booted</code>&nbsp;メソッドに書くよう&nbsp;<code>readouble</code>&nbsp;にも説明があります。</p><h3 id=\"he23cb179bf\">【補足】bootedメソッドとbootメソッドについて</h3><p>今回実装方法をググっていると<code>boot</code>メソッドを使っている記事が見つかり、自分としても初期起動時のメソッドといえば<code>boot</code>メソッドのイメージがあったので、<code>booted</code>メソッドと<code>boot</code>メソッドについて少し調べてみました。<br><br><code>readouble</code>&nbsp;の説明では、モデルの初期設定を行う方法としてLaravel6までは&nbsp;<code>boot</code>&nbsp;メソッドが使われていますが、Laravel7以降では&nbsp;<code>booted</code>&nbsp;メソッドが使われていました。<br>・Laravel8の該当箇所<br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html#:~:text=%E3%81%97%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%A7%E3%81%99%E3%80%82-,%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%AE%E4%BD%BF%E7%94%A8,-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br>・Laravel6の該当箇所<br><a href=\"https://readouble.com/laravel/6.x/ja/eloquent.html#:~:text=%E9%98%B2%E3%81%92%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AE%E9%81%A9%E7%94%A8,-%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AB%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquent：利用の開始 6.x Laravel</a><br><br>試しにモデルファイルに以下のように書き、&nbsp;<code>booted()</code>&nbsp;のところにマウスをホバーさせてVSCodeのヒントを表示してみます。</p><pre><code class=\"hljs\"><span class=\"hljs-comment\">// モデルファイルに記述</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@return</span> void\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">booted</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span>\n</span>{\n    <span class=\"hljs-comment\">//</span>\n}\n\n<span class=\"hljs-comment\">// booted() にマウスをホバーさせると、以下の説明が表示される</span>\n<span class=\"hljs-title class_\">Illuminate\\Database\\Eloquent\\Model</span>::<span class=\"hljs-variable constant_\">booted</span>\n\nPerform any actions required after the model boots.\n\n<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">booted</span>(<span class=\"hljs-params\"></span>) </span>{ }</code></pre><p><code>booted</code>メソッドについては、&nbsp;<code>Perform any actions required after the model boots.</code>&nbsp;と説明されています。<br><br><code>boot()</code>&nbsp;を書いた場合も確認します。</p><pre><code class=\"hljs\"><span class=\"hljs-comment\">// モデルファイルに記述</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@return</span> void\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">boot</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span>\n</span>{\n    <span class=\"hljs-comment\">//</span>\n}\n\n<span class=\"hljs-comment\">// boot() にマウスをホバーさせると、以下の説明が出る</span>\n<span class=\"hljs-title class_\">Illuminate\\Database\\Eloquent\\Model</span>::<span class=\"hljs-variable constant_\">boot</span>\n\nBootstrap the model <span class=\"hljs-keyword\">and</span> its traits.\n\n<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-built_in\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">boot</span>(<span class=\"hljs-params\"></span>) </span>{ }\n@<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">void</span></code></pre><p><code>boot</code>&nbsp;メソッドは&nbsp;<code>Bootstrap the model and its traits.</code>&nbsp;と説明がありました。<br><br>※実際のLaravelのソースコードだと、以下のファイルに&nbsp;<code>boot</code>&nbsp;メソッドも&nbsp;<code>booted</code>&nbsp;メソッドもありました。　<br>興味のある方はこちらもご覧ください。<br><a href=\"https://github.com/laravel/framework/blob/9.x/src/Illuminate/Database/Eloquent/Model.php\" target=\"_blank\" rel=\"noopener noreferrer\">framework/Model.php at 9.x · laravel/framework</a><br><br>メソッド名の通りですが、&nbsp;<code>booted</code>メソッドはモデルの初期起動後に実行されているということですね。<br>私は業務ではLaravel8を使っており、&nbsp;<code>boot</code>&nbsp;メソッドでも&nbsp;<code>booted</code>&nbsp;メソッドでも同じように設定を行うことは出来ましたが、現在の&nbsp;<code>readouble</code>&nbsp;の説明に従って&nbsp;<code>booted</code>メソッドを使っていきたいと思います。<br></p><h2 id=\"haaaceead0a\">Modelのbootedメソッドにクロージャを書く</h2><p>前置きが長くなりましたが、実際にモデルの&nbsp;<code>booted</code>&nbsp;メソッドに「データを論理削除したらリレーション先のデータも削除する」設定を記述します。<br></p><h3 id=\"h8a175a9b0e\">前提</h3><ul><li><code>users</code>&nbsp;テーブル（親）と<strong>1対多</strong>で紐づく&nbsp;<code>posts</code>&nbsp;テーブルがあるとします。</li><li><code>users</code>&nbsp;テーブルからレコードを論理削除したら、 リレーション先の<code>posts</code>&nbsp;テーブルからもレコードを論理削除するように設定します。</li></ul><p><br></p><h3 id=\"hf031c5e696\">実装方法</h3><p><code>User.php</code>にリレーションと&nbsp;<code>booted</code>メソッドを追記します。</p><pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Model</span>\n</span>{\n    <span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">HasFactory</span>, <span class=\"hljs-title\">SoftDeletes</span>;\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> HasMany\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">posts</span><span class=\"hljs-params\">()</span>: <span class=\"hljs-title\">HasMany</span>\n    </span>{\n        <span class=\"hljs-keyword\">return</span> $this-&gt;hasMany(Post::class);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> void\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">booted</span><span class=\"hljs-params\">()</span>: <span class=\"hljs-title\">void</span>\n    </span>{\n        <span class=\"hljs-keyword\">static</span>::deleted(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($user)</span> </span>{\n            $user-&gt;posts()-&gt;delete();\n        });\n    }\n}</code></pre><p>これにより、&nbsp;<code>users</code>&nbsp;テーブルのデータ削除時に、リレーション先の&nbsp;<code>posts</code>&nbsp;テーブルからも同時に削除してくれます。<br><br>※&nbsp;<code>posts</code>&nbsp;テーブルに対してもソフトデリートの設定を行っている場合は&nbsp;<code>posts</code>&nbsp;テーブルも論理削除、何も設定していなければ&nbsp;<code>posts</code>&nbsp;テーブルからは物理削除になります。<br></p><h2 id=\"h3bcda3e6b0\">最後に</h2><p>論理削除はDBのレコードを削除するわけでは無く、SQLの命令文でいうと&nbsp;<code>UPDATE</code>&nbsp;にあたるので、論理削除の場合はDB的には削除と見なされないということは、よく考えると当たり前でもありますが改めて勉強になりました。<br><br>またモデルの&nbsp;<code>boot</code>&nbsp;メソッドや&nbsp;<code>booted</code>&nbsp;メソッドの使い方や、これらが出来ることについても良い学びになりました。<br>Laravelのライフサイクルの理解を深めれば、もっともっと実装の引き出しが増えるんだろうなと思うので、コツコツ勉強していきたいと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br><br><a href=\"https://yaba-blog.com/larave-soft-delete/#toc3\" target=\"_blank\" rel=\"noopener noreferrer\">【Laravel】リレーション先のデータを論理削除（Soft Delete）する方法</a><br><br><a href=\"https://zenn.dev/naoki_oshiumi/articles/e16c9fbb4dfa3d\" target=\"_blank\" rel=\"noopener noreferrer\">レコードが削除されたときに子要素も一緒に削除する(laravel)</a><br><br><a href=\"https://qiita.com/niisan-tokyo/items/d3be588b53df8fa0278c\" target=\"_blank\" rel=\"noopener noreferrer\">Laravelのマニュアルにない?小技: Eloquentのboot時にtraitのbootを別に走らせる - Qiita</a><br></p></body></html>"},"__N_SSG":true}