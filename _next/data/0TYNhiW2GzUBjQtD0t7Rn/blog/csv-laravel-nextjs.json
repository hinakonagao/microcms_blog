{"pageProps":{"blog":{"id":"csv-laravel-nextjs","createdAt":"2022-03-02T23:59:40.487Z","updatedAt":"2022-03-02T23:59:40.487Z","publishedAt":"2022-03-02T23:59:40.487Z","revisedAt":"2022-03-02T23:59:40.487Z","title":"【Laravel × Next.js】Axiosを使ってCSVファイルをダウンロードする","body":"<h2 id=\"h9707d3a59a\">概要</h2><p>フロント<code>next.js</code>&nbsp;× API&nbsp;<code>Laravel</code>&nbsp;の構成で作成しているアプリケーションにおいて、<br>「フロント側でとあるボタンをクリックしたら、API側で生成した<strong>CSVファイル</strong>をダウンロードする」<br>という機能を業務で実装する機会があったので、実装方法や勉強になったことをまとめておきます。<br><br>全体の流れは以下の通りです。<br><br>1.　フロント側から<code>Axios</code>を使ってAPIへリクエストを飛ばす。<br>2.　API側（<code>Laravel</code>）でCSVファイルを生成し、レスポンスとして返す。<br>3.　フロント側でレスポンスを受け取り、CSVファイルをダウンロードする。<br></p><h1 id=\"he52b44f87d\">API側の実装</h1><p>API側から実装していきます。<br>※本来はサービスクラスなどへ処理を切り分けるべきではありますが、ここではコントローラーに全ての処理を書くものとします。<br></p><h2 id=\"hf64c7c1253\">ルーティング</h2><p>フロント側（<code>Next.js</code>）から<code>Axios</code>で送られてくるリクエストに対するルーティングを定義します。</p><pre><code>// routes/api.php\n\nRoute::get('/download/csv', [DownloadCsvController::class, 'downloadCsv']);</code></pre><p>ここで定義した通り、<code>DownloadCsvController</code>の<code>downloadCsv</code>メソッドにCSVファイルを生成してレスポンスとして返す処理をかいていきます。<br></p><h2 id=\"h2171e4cd81\">コントローラー</h2><h3 id=\"h50212800e7\">コードの概要</h3><p>先に概要だけざっくり説明すると、以下の通りです。<br></p><ul><li>Laravelの<code>streamDownload</code>メソッドを使って、CSVファイルをレスポンスとして返す。</li><li><code>streamDownload</code>メソッドは引数を3つ取るので、各引数を用意する。</li></ul><p>・第1引数：エクスポートするファイルを生成するコールバック関数<br>・第2引数：ファイル名<br>・第3引数：レスポンスヘッダーの配列<br><br>※<code>streamDownload</code>メソッドについてはReadoubleの以下の箇所を参照ください。<br><a href=\"https://readouble.com/laravel/8.x/ja/responses.html?header=%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589#:~:text=%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89,-%E7%89%B9%E5%AE%9A%E3%81%AE%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPレスポンス 8.x Laravel</a><br></p><h3 id=\"h2faa5e3f79\">コードの全文</h3><p>詳しい解説は後にして、コードの全文を載せます。</p><pre><code>// DownloadCsvController.php\n\n/**\n * CSVダウンロード\n * @return StreamedResponse\n */\npublic function downloadCsv(): StreamedResponse\n{\n  // CSVファイル作成コールバック\n  $downloadCsvCallback = function () {\n    // CSVファイル作成\n    $csv = fopen('php://output', 'w');\n\n    // CSVの1行目\n    $colums = [\n      'id' =&gt; 'ユーザーID',\n      'name' =&gt; 'ユーザー名',\n      'email' =&gt; 'メールアドレス'\n    ];\n    // 文字化け対策\n    mb_convert_variables('SJIS-win', 'UTF-8', $colums);\n    // CSVの1行目を記入\n    fputcsv($csv, $colums);\n\n    // CSVの2行目以降\n    $users = User::all();\n    foreach ($users as $user) {\n      $userData = [\n        'id' =&gt; $user-&gt;id,\n        'name' =&gt; $user-&gt;name,\n        'email' =&gt; $user-&gt;email\n      ];\n      // 文字化け対策\n      mb_convert_variables('SJIS-win', 'UTF-8', $userData );\n      // CSVファイルの2行目以降にユーザー情報を記入\n      fputcsv($csv, $userData);\n    }\n\n    // CSVファイルを閉じる\n    fclose($csv);\n  }\n\n  // ファイル名\n  $fileName = 'ユーザー情報.csv';\n\n  // レスポンスヘッダー情報\n  $responseHeader = [\n    'Content-type' =&gt; 'text/csv',\n    'Access-Control-Expose-Headers' =&gt; 'Content-Disposition'\n  ],\n\n  return response()-&gt;streamDownload($downloadCsvCallback, $fileName, $responseHeader);\n}</code></pre><p>ここから上記のコードのポイントを解説していきます。<br></p><h3 id=\"h3693827ec3\">steramDownloadメソッド</h3><ul><li><strong>引数と返り値について</strong></li></ul><p>先述の通り、&nbsp;<code>steramDownload</code>メソッドは以下の3つの引数を取り、返り値は&nbsp;<code>Symfony\\Component\\HttpFoundation\\StreamedResponse</code>となります。<br>　・第1引数：エクスポートするファイルを生成するコールバック関数<br>　・第2引数：ファイル名<br>　・第3引数：レスポンスヘッダーの配列<br><br>今回の構成では、フロント側（<code>Next.js</code>）からAPIリクエストを受け取って<code>StreamedResponse</code>の形式でレスポンスを返すことになります。<br></p><ul><li><strong>レスポンスヘッダーについて</strong></li></ul><p>HTTPレスポンスの際に、ブラウザで表示するのではなくファイルをブラウザでダウンロードさせたい場合は、レスポンスヘッダーに<code>Content-Disposition</code>を持たせる必要があります。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition#:~:text=Content%2DDisposition%3A%20attachment%3B%20filename%3D%22filename.jpg%22\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Disposition - HTTP | MDN</a></p><pre><code>// レスポンスヘッダーに以下の記述が必要\nContent-Disposition: attachment\n\n// ファイル名を指定する場合\nContent-Disposition: attachment; filename=\"filename.jpg\"\n\n// ファイル名をエンコードする場合\nContent-Disposition: attachment; filename*=UTF-8''URLエンコーディングされたファイル名</code></pre><p>そこで<code>streamDownload</code>メソッドは、この<code>Content-Disposition</code>をよしなにレスポンスヘッダーに加えてくれます。<br><br>以下の画像は、第2引数に<code>'ファイル.csv'</code>と指定してレスポンスを返した際のレスポンスヘッダーを、検証ツールで確認したものです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6a50ee5392784850a2205c44dc23d633/%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%83%98%E3%83%83%E3%83%80%E3%83%BC.jpg\" alt=\"\"><br>ファイル名に日本語を指定すると、URLエンコーディングされた状態でレスポンスヘッダーに付与されています。<br></p><h3 id=\"he1a46ab77a\">CSVファイル作成コールバック</h3><ul><li><strong>CSVファイルの作成</strong></li></ul><p>コールバック関数内で行う処理の大まかな流れは以下の通りで、<br><code>CSVファイルを作成→中身を書き込む→ファイルを閉じる</code><br>というものです。</p><pre><code>// ファイルを作成する\nfopen('php://output', 'w');  \n\n// CSVの1行目のカラムを記入する\nfputcsv($csv, $colums);\n\n// CSVの2行目以降に企業情報を記入する\nfputcsv($csv, $userData); \n\n// ファイルを閉じる\nfclose($csv);  </code></pre><p><br></p><ul><li><strong>文字化け対策について</strong></li></ul><p>デフォルトの文字コードは、<br>・Excel：<code>SJIS</code><br>・PHP：<code>UTF-8</code>（<code>php.ini</code>で設定されている）<br>という違いがあります。</p><pre><code>// php.ini\ndefault_charset = \"UTF-8\"</code></pre><p>なのでPHPの文字コードが<code>UTF-8</code>のままCSVファイルを生成すると、Excelで開いたときに文字化けしてしまいます。<br><br>これを防ぐため、PHPの<code>mb_convert_variables</code>関数を使って文字コードを<code>UTF-8</code>から<code>SJIS-win</code>に変換します。<br>PHPドキュメント：<a style=\"color:#4aac00\" href=\"https://www.php.net/manual/ja/function.mb-convert-variables.php\" target=\"_blank\" rel=\"noopener noreferrer\">mb_convert_variables</a></p><pre><code>mb_convert_variables('SJIS-win', 'UTF-8', $colums);</code></pre><p>※<code>SJIS-win</code>はWindows向けに使われる<code>Shift-JIS</code>で、通常の<code>SJIS</code>よりも対応している文字が多いようです。<br></p><h3 id=\"h13b0fcb7b2\">レスポンスヘッダーについて</h3><p>先述の通り、<code>streamDownload</code>メソッドがレスポンスヘッダーに<code>Content-Disposition</code>を自動で含めてくれます。<br><br>レスポンスヘッダーの要素はフロント側で&nbsp;<code>AxiosResponse</code>&nbsp;から受け取ることが出来るので、後ほどフロント側でレスポンスヘッダーからファイル名を取得することになります。<br>但し今回のような&nbsp;<code>CORS</code>&nbsp;の通信の場合、標準的なレスポンスヘッダー以外の場合はAPIから返すレスポンスヘッダーに</p><pre><code>Access-Control-Expose-Headers: {レスポンスヘッダ名}</code></pre><p>を追加しておかないと、<code>AxiosResponse</code>&nbsp;からレスポンス情報を受け取ることが出来ないので、<code>Content-Disposition</code>については上記の記述が必要です。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\" target=\"_blank\" rel=\"noopener noreferrer\">Access-Control-Expose-Headers - HTTP | MDN</a><br>参考記事：<a style=\"color:#4aac00\" href=\"https://note.kiriukun.com/entry/20200303-axios-response-header-could-not-get\" target=\"_blank\" rel=\"noopener noreferrer\">Axiosでレスポンスヘッダが取得できなかった (CORSなAPI)</a><br><br>よって<code>streamDownload</code>メソッドの第3引数には、以下のレスポンスヘッダー情報を渡します。</p><pre><code>// レスポンスヘッダー情報\n$responseHeader = [\n  'Content-type' =&gt; 'text/csv',\n  'Access-Control-Expose-Headers' =&gt; 'Content-Disposition' \n],</code></pre><p>API（<code>Laravel</code>）側の実装は以上です。<br><br>ここまでの実装で、直接APIのURLをブラウザのURLに入れてアクセスすればCSVファイルをダウンロードできるはずです。<br>ただしフロント側にレスポンスとして返すだけではフロント側ではファイルダウンロードは行われないので、続けてフロント側も実装していきます。<br></p><h1 id=\"h5a8452001c\">フロント側の実装</h1><p>フロント側の実装方法は2通り紹介させていただきたいと思います。<br></p><h2 id=\"h16c6498226\">実装方法①</h2><p><code>file-saver</code>&nbsp;というライブラリを使ってファイル保存を行います。<br>ライブラリ：<a style=\"color:#4aac00\" href=\"https://www.npmjs.com/package/file-saver\" target=\"_blank\" rel=\"noopener noreferrer\">file-saver</a><br><br>このライブラリの&nbsp;<code>saveAs</code>&nbsp;メソッドに、<br><br>・第1引数：&nbsp;<code>blob</code>&nbsp;オブジェクト<br>・第2引数：ファイル名<br><br>を渡すだけで、指定したファイル名でファイルを保存することができます。<br><br>実装したコードは以下の通りです。</p><pre><code>import { saveAs } from 'file-saver'\n\n// 中略\n\naxiosApi\n  .get('/download/csv', {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    const blob = new Blob([res.data], { type: res.data.type })\n    const fileName = getFileName(res.headers['content-disposition'])\n    saveAs(blob, fileName)\n  })\n\nconst getFileName = (contentDisposition: string) =&gt; {\n  return decodeURI(contentDisposition).substring(\n    contentDisposition.indexOf(\"''\") + 2,\n    contentDisposition.length,\n  )\n}</code></pre><h3 id=\"h598587f39e\"><br>ポイント</h3><ul><li><strong><code>responseType: 'blob'</code></strong></li></ul><p>この指定をしないと文字化けしてしまいます。<br></p><ul><li><strong>ファイル名の取得</strong></li></ul><p>レスポンスヘッダーの情報は、<code>AxiosResponse</code>&nbsp;の&nbsp;<code>res</code>&nbsp;から、<br></p><pre><code>res.headers['content-disposition']</code></pre><p>のように書くと取り出すことができます。<br><br>レスポンスヘッダーの<code>Content-Disposition</code>をフロント側で受け取り、出力してみると、以下のようにエンコードされた状態です。</p><pre><code>axiosApi\n  .get(`/download/csv/${entryType}`, {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    console.log(res.headers['content-disposition'])    // 出力する\n    const blob = new Blob([res.data], { type: res.data.type })\n    const fileName = getFileName(res.headers['content-disposition'])\n    saveAs(blob, fileName)\n  })</code></pre><p>出力結果</p><pre><code>attachment; filename=___20220301173602.csv; filename*=utf-8''%E9%A1%A7%E5%AE%A2%E6%83%85%E5%A0%B1_%E3%82%82%E3%81%AE%E3%81%A5%E3%81%8F%E3%82%8A%E8%A3%.csv</code></pre><p><br>なので上記の状態からデコードを行い、さらに<code>filename*=utf-8''</code>以降のファイル名の部分のみを切り取ります。</p><pre><code>const getFileName = (contentDisposition: string) =&gt; {\n  return decodeURI(contentDisposition).substring(\n    contentDisposition.indexOf(\"''\") + 2,\n    contentDisposition.length,\n  )\n}</code></pre><h2 id=\"he028bf746e\"><br>実装方法②</h2><p><code>HTML</code>&nbsp;の&nbsp;<code>a</code>&nbsp;タグに<code>download</code>&nbsp;属性を設定すると、&nbsp;<code>a</code>&nbsp;タグをクリックした場合、ブラウザはユーザーをそのURLへ遷移させるのではなくそのコンテンツを保存させます。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/a#:~:text=%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82-,download,HTML5,-%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%95%E3%82%8C\" target=\"_blank\" rel=\"noopener noreferrer\">: アンカー要素 - HTML: HyperText Markup Language | MDN</a><br><br>この機能を使ってファイル保存を行います。</p><pre><code>axiosApi\n  .get('/download/csv', {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    // Blobを参照するための一時的なURLを生成\n    const url = window.URL.createObjectURL(new Blob([res.data]))\n    // HTML要素のaタグを生成\n    const link = document.createElement('a')\n    link.href = url\n    // aタグのdownload属性を設定\n    link.setAttribute('download', `顧客情報_ものづくり補助金_全件_${getTimestamp()}.csv`)\n    // 生成したaタグを設置し、クリックさせる\n    document.body.appendChild(link)\n    link.click()\n    // URLを削除\n    window.URL.revokeObjectURL(url)\n  }</code></pre><h2 id=\"h1afe451c43\"><br>さいごに</h2><p>自分で実装して検証ツールで確認しながら進めることで、レスポンスヘッダーの働きやレスポンスヘッダーが違えば挙動も変わることを実感できたので良かったと思います。<br><br>またLaravelの&nbsp;<code>steramDownload</code>メソッドがレスポンスヘッダーをよしなに生成してくれていることに気付いたとき、フレームワークってすごい…と感動してしまいました！<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://coinbaby8.com/php-csv-export.html\" target=\"_blank\" rel=\"noopener noreferrer\">【PHP】【Laravel】CSVエクスポートの方法〜5つのポイント〜</a><br><br><a href=\"https://www.wakuwakubank.com/posts/799-it-content-type-content-disposition/\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Type, Content-Dispositionの役割 - わくわくBank</a><br><br><a href=\"https://qiita.com/koushisa/items/ac908d81361534264d35\" target=\"_blank\" rel=\"noopener noreferrer\">axiosでファイルダウンロード処理を実装(IEにも対応) - Qiita</a><br><br><a href=\"https://jpdebug.com/p/978039\" target=\"_blank\" rel=\"noopener noreferrer\">Springboot+Vue+axios excelのエクスポートダウンロードを実現 - JPDEBUG.COM</a><br><br><a href=\"https://javascript.keicode.com/newjs/download-files.php#1-1\" target=\"_blank\" rel=\"noopener noreferrer\">ファイルをダウンロード保存する方法 - JavaScript 入門</a><br><br><a href=\"https://tkkm.tokyo/post-177/\" target=\"_blank\" rel=\"noopener noreferrer\">【JavaScript】Axiosを使ってCSVをダウンロードしたい | ゆとって生きたい。【JavaScript】Axiosを使ってCSV...</a><br><br><a href=\"https://helloworld-blog.tech/javascript/axios%E3%81%8B%E3%82%89csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">axiosからCSVファイルをダウンロードさせる方法 | &lt;HelloWorld/&gt;</a><br></p>","tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"},{"id":"php","createdAt":"2022-01-07T13:16:36.618Z","updatedAt":"2022-02-12T02:31:46.498Z","publishedAt":"2022-01-07T13:16:36.618Z","revisedAt":"2022-01-07T13:16:36.618Z","tag":"PHP"},{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"},{"id":"javascript","createdAt":"2022-01-07T13:18:33.680Z","updatedAt":"2022-01-07T13:18:33.680Z","publishedAt":"2022-01-07T13:18:33.680Z","revisedAt":"2022-01-07T13:18:33.680Z","tag":"JavaScript"}],"image":"laravel"},"highlightedBody":"<html><head></head><body><h2 id=\"h9707d3a59a\">概要</h2><p>フロント<code>next.js</code>&nbsp;× API&nbsp;<code>Laravel</code>&nbsp;の構成で作成しているアプリケーションにおいて、<br>「フロント側でとあるボタンをクリックしたら、API側で生成した<strong>CSVファイル</strong>をダウンロードする」<br>という機能を業務で実装する機会があったので、実装方法や勉強になったことをまとめておきます。<br><br>全体の流れは以下の通りです。<br><br>1.　フロント側から<code>Axios</code>を使ってAPIへリクエストを飛ばす。<br>2.　API側（<code>Laravel</code>）でCSVファイルを生成し、レスポンスとして返す。<br>3.　フロント側でレスポンスを受け取り、CSVファイルをダウンロードする。<br></p><h1 id=\"he52b44f87d\">API側の実装</h1><p>API側から実装していきます。<br>※本来はサービスクラスなどへ処理を切り分けるべきではありますが、ここではコントローラーに全ての処理を書くものとします。<br></p><h2 id=\"hf64c7c1253\">ルーティング</h2><p>フロント側（<code>Next.js</code>）から<code>Axios</code>で送られてくるリクエストに対するルーティングを定義します。</p><pre><code class=\"hljs\">/<span class=\"hljs-regexp\">/ routes/api</span>.php\n\nRoute::get(<span class=\"hljs-string\">'/download/csv'</span>, [DownloadCsvController::<span class=\"hljs-keyword\">class</span>, <span class=\"hljs-string\">'downloadCsv'</span>]);</code></pre><p>ここで定義した通り、<code>DownloadCsvController</code>の<code>downloadCsv</code>メソッドにCSVファイルを生成してレスポンスとして返す処理をかいていきます。<br></p><h2 id=\"h2171e4cd81\">コントローラー</h2><h3 id=\"h50212800e7\">コードの概要</h3><p>先に概要だけざっくり説明すると、以下の通りです。<br></p><ul><li>Laravelの<code>streamDownload</code>メソッドを使って、CSVファイルをレスポンスとして返す。</li><li><code>streamDownload</code>メソッドは引数を3つ取るので、各引数を用意する。</li></ul><p>・第1引数：エクスポートするファイルを生成するコールバック関数<br>・第2引数：ファイル名<br>・第3引数：レスポンスヘッダーの配列<br><br>※<code>streamDownload</code>メソッドについてはReadoubleの以下の箇所を参照ください。<br><a href=\"https://readouble.com/laravel/8.x/ja/responses.html?header=%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589#:~:text=%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89,-%E7%89%B9%E5%AE%9A%E3%81%AE%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPレスポンス 8.x Laravel</a><br></p><h3 id=\"h2faa5e3f79\">コードの全文</h3><p>詳しい解説は後にして、コードの全文を載せます。</p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> DownloadCsvController.php\n\n/**\n * CSVダウンロード\n * @return StreamedResponse\n */\npublic <span class=\"hljs-keyword\">function</span> downloadCsv(): StreamedResponse\n{\n  <span class=\"hljs-regexp\">//</span> CSVファイル作成コールバック\n  <span class=\"hljs-variable\">$downloadCsvCallback</span> = <span class=\"hljs-keyword\">function</span> () {\n    <span class=\"hljs-regexp\">//</span> CSVファイル作成\n    <span class=\"hljs-variable\">$csv</span> = fopen(<span class=\"hljs-string\">'php://output'</span>, <span class=\"hljs-string\">'w'</span>);\n\n    <span class=\"hljs-regexp\">//</span> CSVの<span class=\"hljs-number\">1</span>行目\n    <span class=\"hljs-variable\">$colums</span> = [\n      <span class=\"hljs-string\">'id'</span> =&gt; <span class=\"hljs-string\">'ユーザーID'</span>,\n      <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'ユーザー名'</span>,\n      <span class=\"hljs-string\">'email'</span> =&gt; <span class=\"hljs-string\">'メールアドレス'</span>\n    ];\n    <span class=\"hljs-regexp\">//</span> 文字化け対策\n    mb_convert_variables(<span class=\"hljs-string\">'SJIS-win'</span>, <span class=\"hljs-string\">'UTF-8'</span>, <span class=\"hljs-variable\">$colums</span>);\n    <span class=\"hljs-regexp\">//</span> CSVの<span class=\"hljs-number\">1</span>行目を記入\n    fputcsv(<span class=\"hljs-variable\">$csv</span>, <span class=\"hljs-variable\">$colums</span>);\n\n    <span class=\"hljs-regexp\">//</span> CSVの<span class=\"hljs-number\">2</span>行目以降\n    <span class=\"hljs-variable\">$users</span> = User::all();\n    foreach (<span class=\"hljs-variable\">$users</span> as <span class=\"hljs-variable\">$user</span>) {\n      <span class=\"hljs-variable\">$userData</span> = [\n        <span class=\"hljs-string\">'id'</span> =&gt; <span class=\"hljs-variable\">$user</span>-&gt;id,\n        <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-variable\">$user</span>-&gt;name,\n        <span class=\"hljs-string\">'email'</span> =&gt; <span class=\"hljs-variable\">$user</span>-&gt;email\n      ];\n      <span class=\"hljs-regexp\">//</span> 文字化け対策\n      mb_convert_variables(<span class=\"hljs-string\">'SJIS-win'</span>, <span class=\"hljs-string\">'UTF-8'</span>, <span class=\"hljs-variable\">$userData</span> );\n      <span class=\"hljs-regexp\">//</span> CSVファイルの<span class=\"hljs-number\">2</span>行目以降にユーザー情報を記入\n      fputcsv(<span class=\"hljs-variable\">$csv</span>, <span class=\"hljs-variable\">$userData</span>);\n    }\n\n    <span class=\"hljs-regexp\">//</span> CSVファイルを閉じる\n    fclose(<span class=\"hljs-variable\">$csv</span>);\n  }\n\n  <span class=\"hljs-regexp\">//</span> ファイル名\n  <span class=\"hljs-variable\">$fileName</span> = <span class=\"hljs-string\">'ユーザー情報.csv'</span>;\n\n  <span class=\"hljs-regexp\">//</span> レスポンスヘッダー情報\n  <span class=\"hljs-variable\">$responseHeader</span> = [\n    <span class=\"hljs-string\">'Content-type'</span> =&gt; <span class=\"hljs-string\">'text/csv'</span>,\n    <span class=\"hljs-string\">'Access-Control-Expose-Headers'</span> =&gt; <span class=\"hljs-string\">'Content-Disposition'</span>\n  ],\n\n  return response()-&gt;streamDownload(<span class=\"hljs-variable\">$downloadCsvCallback</span>, <span class=\"hljs-variable\">$fileName</span>, <span class=\"hljs-variable\">$responseHeader</span>);\n}</code></pre><p>ここから上記のコードのポイントを解説していきます。<br></p><h3 id=\"h3693827ec3\">steramDownloadメソッド</h3><ul><li><strong>引数と返り値について</strong></li></ul><p>先述の通り、&nbsp;<code>steramDownload</code>メソッドは以下の3つの引数を取り、返り値は&nbsp;<code>Symfony\\Component\\HttpFoundation\\StreamedResponse</code>となります。<br>　・第1引数：エクスポートするファイルを生成するコールバック関数<br>　・第2引数：ファイル名<br>　・第3引数：レスポンスヘッダーの配列<br><br>今回の構成では、フロント側（<code>Next.js</code>）からAPIリクエストを受け取って<code>StreamedResponse</code>の形式でレスポンスを返すことになります。<br></p><ul><li><strong>レスポンスヘッダーについて</strong></li></ul><p>HTTPレスポンスの際に、ブラウザで表示するのではなくファイルをブラウザでダウンロードさせたい場合は、レスポンスヘッダーに<code>Content-Disposition</code>を持たせる必要があります。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition#:~:text=Content%2DDisposition%3A%20attachment%3B%20filename%3D%22filename.jpg%22\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Disposition - HTTP | MDN</a></p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> レスポンスヘッダーに以下の記述が必要\nContent-Disposition: attachment\n\n<span class=\"hljs-regexp\">//</span> ファイル名を指定する場合\nContent-Disposition: attachment; filename=<span class=\"hljs-string\">\"filename.jpg\"</span>\n\n<span class=\"hljs-regexp\">//</span> ファイル名をエンコードする場合\nContent-Disposition: attachment; filename*=UTF-<span class=\"hljs-number\">8</span><span class=\"hljs-string\">''</span>URLエンコーディングされたファイル名</code></pre><p>そこで<code>streamDownload</code>メソッドは、この<code>Content-Disposition</code>をよしなにレスポンスヘッダーに加えてくれます。<br><br>以下の画像は、第2引数に<code>'ファイル.csv'</code>と指定してレスポンスを返した際のレスポンスヘッダーを、検証ツールで確認したものです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6a50ee5392784850a2205c44dc23d633/%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%83%98%E3%83%83%E3%83%80%E3%83%BC.jpg\" alt=\"\"><br>ファイル名に日本語を指定すると、URLエンコーディングされた状態でレスポンスヘッダーに付与されています。<br></p><h3 id=\"he1a46ab77a\">CSVファイル作成コールバック</h3><ul><li><strong>CSVファイルの作成</strong></li></ul><p>コールバック関数内で行う処理の大まかな流れは以下の通りで、<br><code>CSVファイルを作成→中身を書き込む→ファイルを閉じる</code><br>というものです。</p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> ファイルを作成する\nfopen(<span class=\"hljs-string\">'php://output'</span>, <span class=\"hljs-string\">'w'</span>);  \n\n<span class=\"hljs-regexp\">//</span> CSVの<span class=\"hljs-number\">1</span>行目のカラムを記入する\nfputcsv(<span class=\"hljs-variable\">$csv</span>, <span class=\"hljs-variable\">$colums</span>);\n\n<span class=\"hljs-regexp\">//</span> CSVの<span class=\"hljs-number\">2</span>行目以降に企業情報を記入する\nfputcsv(<span class=\"hljs-variable\">$csv</span>, <span class=\"hljs-variable\">$userData</span>); \n\n<span class=\"hljs-regexp\">//</span> ファイルを閉じる\nfclose(<span class=\"hljs-variable\">$csv</span>);  </code></pre><p><br></p><ul><li><strong>文字化け対策について</strong></li></ul><p>デフォルトの文字コードは、<br>・Excel：<code>SJIS</code><br>・PHP：<code>UTF-8</code>（<code>php.ini</code>で設定されている）<br>という違いがあります。</p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> php.ini\ndefault_charset = <span class=\"hljs-string\">\"UTF-8\"</span></code></pre><p>なのでPHPの文字コードが<code>UTF-8</code>のままCSVファイルを生成すると、Excelで開いたときに文字化けしてしまいます。<br><br>これを防ぐため、PHPの<code>mb_convert_variables</code>関数を使って文字コードを<code>UTF-8</code>から<code>SJIS-win</code>に変換します。<br>PHPドキュメント：<a style=\"color:#4aac00\" href=\"https://www.php.net/manual/ja/function.mb-convert-variables.php\" target=\"_blank\" rel=\"noopener noreferrer\">mb_convert_variables</a></p><pre><code class=\"hljs\">mb_convert_variables(<span class=\"hljs-string\">'SJIS-win'</span>, <span class=\"hljs-string\">'UTF-8'</span>, <span class=\"hljs-symbol\">$colums</span>);</code></pre><p>※<code>SJIS-win</code>はWindows向けに使われる<code>Shift-JIS</code>で、通常の<code>SJIS</code>よりも対応している文字が多いようです。<br></p><h3 id=\"h13b0fcb7b2\">レスポンスヘッダーについて</h3><p>先述の通り、<code>streamDownload</code>メソッドがレスポンスヘッダーに<code>Content-Disposition</code>を自動で含めてくれます。<br><br>レスポンスヘッダーの要素はフロント側で&nbsp;<code>AxiosResponse</code>&nbsp;から受け取ることが出来るので、後ほどフロント側でレスポンスヘッダーからファイル名を取得することになります。<br>但し今回のような&nbsp;<code>CORS</code>&nbsp;の通信の場合、標準的なレスポンスヘッダー以外の場合はAPIから返すレスポンスヘッダーに</p><pre><code class=\"hljs\"><span class=\"hljs-keyword\">Access</span>-Control-Expose-Headers: {レスポンスヘッダ名}</code></pre><p>を追加しておかないと、<code>AxiosResponse</code>&nbsp;からレスポンス情報を受け取ることが出来ないので、<code>Content-Disposition</code>については上記の記述が必要です。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\" target=\"_blank\" rel=\"noopener noreferrer\">Access-Control-Expose-Headers - HTTP | MDN</a><br>参考記事：<a style=\"color:#4aac00\" href=\"https://note.kiriukun.com/entry/20200303-axios-response-header-could-not-get\" target=\"_blank\" rel=\"noopener noreferrer\">Axiosでレスポンスヘッダが取得できなかった (CORSなAPI)</a><br><br>よって<code>streamDownload</code>メソッドの第3引数には、以下のレスポンスヘッダー情報を渡します。</p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> レスポンスヘッダー情報\n<span class=\"hljs-variable\">$responseHeader</span> = [\n  <span class=\"hljs-string\">'Content-type'</span> =&gt; <span class=\"hljs-string\">'text/csv'</span>,\n  <span class=\"hljs-string\">'Access-Control-Expose-Headers'</span> =&gt; <span class=\"hljs-string\">'Content-Disposition'</span> \n],</code></pre><p>API（<code>Laravel</code>）側の実装は以上です。<br><br>ここまでの実装で、直接APIのURLをブラウザのURLに入れてアクセスすればCSVファイルをダウンロードできるはずです。<br>ただしフロント側にレスポンスとして返すだけではフロント側ではファイルダウンロードは行われないので、続けてフロント側も実装していきます。<br></p><h1 id=\"h5a8452001c\">フロント側の実装</h1><p>フロント側の実装方法は2通り紹介させていただきたいと思います。<br></p><h2 id=\"h16c6498226\">実装方法①</h2><p><code>file-saver</code>&nbsp;というライブラリを使ってファイル保存を行います。<br>ライブラリ：<a style=\"color:#4aac00\" href=\"https://www.npmjs.com/package/file-saver\" target=\"_blank\" rel=\"noopener noreferrer\">file-saver</a><br><br>このライブラリの&nbsp;<code>saveAs</code>&nbsp;メソッドに、<br><br>・第1引数：&nbsp;<code>blob</code>&nbsp;オブジェクト<br>・第2引数：ファイル名<br><br>を渡すだけで、指定したファイル名でファイルを保存することができます。<br><br>実装したコードは以下の通りです。</p><pre><code class=\"hljs\">import { saveAs } from 'file-saver'\n\n<span class=\"hljs-comment\">// 中略</span>\n\naxiosApi\n  .get('/download/csv', {\n    responseType: 'blob',\n  })\n  .<span class=\"hljs-keyword\">then</span>((res: AxiosResponse) =&gt; {\n    const blob = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Blob([<span class=\"hljs-params\">res</span>.<span class=\"hljs-params\">data</span>], { <span class=\"hljs-params\">type</span>: <span class=\"hljs-params\">res</span>.<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">type</span> })</span>\n    const fileName = get<span class=\"hljs-constructor\">FileName(<span class=\"hljs-params\">res</span>.<span class=\"hljs-params\">headers</span>['<span class=\"hljs-params\">content</span>-<span class=\"hljs-params\">disposition</span>'])</span>\n    save<span class=\"hljs-constructor\">As(<span class=\"hljs-params\">blob</span>, <span class=\"hljs-params\">fileName</span>)</span>\n  })\n\nconst getFileName =<span class=\"hljs-function\"> (<span class=\"hljs-params\">contentDisposition</span>: <span class=\"hljs-params\">string</span>) =&gt;</span> {\n  return decode<span class=\"hljs-constructor\">URI(<span class=\"hljs-params\">contentDisposition</span>)</span>.substring(\n    contentDisposition.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-string\">\"''\"</span>)</span> + <span class=\"hljs-number\">2</span>,\n    contentDisposition.length,\n  )\n}</code></pre><h3 id=\"h598587f39e\"><br>ポイント</h3><ul><li><strong><code>responseType: 'blob'</code></strong></li></ul><p>この指定をしないと文字化けしてしまいます。<br></p><ul><li><strong>ファイル名の取得</strong></li></ul><p>レスポンスヘッダーの情報は、<code>AxiosResponse</code>&nbsp;の&nbsp;<code>res</code>&nbsp;から、<br></p><pre><code class=\"hljs\">res<span class=\"hljs-selector-class\">.headers</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'content-disposition'</span>]</span></code></pre><p>のように書くと取り出すことができます。<br><br>レスポンスヘッダーの<code>Content-Disposition</code>をフロント側で受け取り、出力してみると、以下のようにエンコードされた状態です。</p><pre><code class=\"hljs\">axiosApi\n  <span class=\"hljs-selector-class\">.get</span>(`/download/csv/${entryType}`, {\n    responseType: <span class=\"hljs-string\">'blob'</span>,\n  })\n  <span class=\"hljs-selector-class\">.then</span>((res: AxiosResponse) =&gt; {\n    console<span class=\"hljs-selector-class\">.log</span>(res<span class=\"hljs-selector-class\">.headers</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'content-disposition'</span>]</span>)    <span class=\"hljs-comment\">// 出力する</span>\n    const blob = new <span class=\"hljs-built_in\">Blob</span>(<span class=\"hljs-selector-attr\">[res.data]</span>, { type: res<span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.type</span> })\n    const fileName = <span class=\"hljs-built_in\">getFileName</span>(res<span class=\"hljs-selector-class\">.headers</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'content-disposition'</span>]</span>)\n    <span class=\"hljs-built_in\">saveAs</span>(blob, fileName)\n  })</code></pre><p>出力結果</p><pre><code class=\"hljs\">attachment; filename=___20220301173602.csv; filename*=utf<span class=\"hljs-number\">-8</span><span class=\"hljs-string\">''</span>%E9%A1%A7%E5%AE%A2%E6%83%85%E5%A0%B1_%E3%82%82%E3%81%AE%E3%81%A5%E3%81%8F%E3%82%8A%E8%A3%.csv</code></pre><p><br>なので上記の状態からデコードを行い、さらに<code>filename*=utf-8''</code>以降のファイル名の部分のみを切り取ります。</p><pre><code class=\"hljs\">const getFileName = <span class=\"hljs-function\">(<span class=\"hljs-params\">contentDisposition: string</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> decodeURI(contentDisposition).substring(\n    contentDisposition.<span class=\"hljs-built_in\">indexOf</span>(<span class=\"hljs-string\">\"''\"</span>) + <span class=\"hljs-number\">2</span>,\n    contentDisposition.<span class=\"hljs-built_in\">length</span>,\n  )\n}</code></pre><h2 id=\"he028bf746e\"><br>実装方法②</h2><p><code>HTML</code>&nbsp;の&nbsp;<code>a</code>&nbsp;タグに<code>download</code>&nbsp;属性を設定すると、&nbsp;<code>a</code>&nbsp;タグをクリックした場合、ブラウザはユーザーをそのURLへ遷移させるのではなくそのコンテンツを保存させます。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/a#:~:text=%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82-,download,HTML5,-%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%95%E3%82%8C\" target=\"_blank\" rel=\"noopener noreferrer\">: アンカー要素 - HTML: HyperText Markup Language | MDN</a><br><br>この機能を使ってファイル保存を行います。</p><pre><code class=\"hljs\">axiosApi\n  <span class=\"hljs-selector-class\">.get</span>(<span class=\"hljs-string\">'/download/csv'</span>, {\n    responseType: <span class=\"hljs-string\">'blob'</span>,\n  })\n  <span class=\"hljs-selector-class\">.then</span>((res: AxiosResponse) =&gt; {\n    <span class=\"hljs-comment\">// Blobを参照するための一時的なURLを生成</span>\n    const url = window<span class=\"hljs-selector-class\">.URL</span><span class=\"hljs-selector-class\">.createObjectURL</span>(new <span class=\"hljs-built_in\">Blob</span>(<span class=\"hljs-selector-attr\">[res.data]</span>))\n    <span class=\"hljs-comment\">// HTML要素のaタグを生成</span>\n    const link = document<span class=\"hljs-selector-class\">.createElement</span>(<span class=\"hljs-string\">'a'</span>)\n    link<span class=\"hljs-selector-class\">.href</span> = url\n    <span class=\"hljs-comment\">// aタグのdownload属性を設定</span>\n    link<span class=\"hljs-selector-class\">.setAttribute</span>(<span class=\"hljs-string\">'download'</span>, `顧客情報_ものづくり補助金_全件_${<span class=\"hljs-built_in\">getTimestamp</span>()}.csv`)\n    <span class=\"hljs-comment\">// 生成したaタグを設置し、クリックさせる</span>\n    document<span class=\"hljs-selector-class\">.body</span><span class=\"hljs-selector-class\">.appendChild</span>(link)\n    link<span class=\"hljs-selector-class\">.click</span>()\n    <span class=\"hljs-comment\">// URLを削除</span>\n    window<span class=\"hljs-selector-class\">.URL</span><span class=\"hljs-selector-class\">.revokeObjectURL</span>(url)\n  }</code></pre><h2 id=\"h1afe451c43\"><br>さいごに</h2><p>自分で実装して検証ツールで確認しながら進めることで、レスポンスヘッダーの働きやレスポンスヘッダーが違えば挙動も変わることを実感できたので良かったと思います。<br><br>またLaravelの&nbsp;<code>steramDownload</code>メソッドがレスポンスヘッダーをよしなに生成してくれていることに気付いたとき、フレームワークってすごい…と感動してしまいました！<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://coinbaby8.com/php-csv-export.html\" target=\"_blank\" rel=\"noopener noreferrer\">【PHP】【Laravel】CSVエクスポートの方法〜5つのポイント〜</a><br><br><a href=\"https://www.wakuwakubank.com/posts/799-it-content-type-content-disposition/\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Type, Content-Dispositionの役割 - わくわくBank</a><br><br><a href=\"https://qiita.com/koushisa/items/ac908d81361534264d35\" target=\"_blank\" rel=\"noopener noreferrer\">axiosでファイルダウンロード処理を実装(IEにも対応) - Qiita</a><br><br><a href=\"https://jpdebug.com/p/978039\" target=\"_blank\" rel=\"noopener noreferrer\">Springboot+Vue+axios excelのエクスポートダウンロードを実現 - JPDEBUG.COM</a><br><br><a href=\"https://javascript.keicode.com/newjs/download-files.php#1-1\" target=\"_blank\" rel=\"noopener noreferrer\">ファイルをダウンロード保存する方法 - JavaScript 入門</a><br><br><a href=\"https://tkkm.tokyo/post-177/\" target=\"_blank\" rel=\"noopener noreferrer\">【JavaScript】Axiosを使ってCSVをダウンロードしたい | ゆとって生きたい。【JavaScript】Axiosを使ってCSV...</a><br><br><a href=\"https://helloworld-blog.tech/javascript/axios%E3%81%8B%E3%82%89csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">axiosからCSVファイルをダウンロードさせる方法 | &lt;HelloWorld/&gt;</a><br></p></body></html>"},"__N_SSG":true}