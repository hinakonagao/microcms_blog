{"pageProps":{"blogs":[{"id":"csv-laravel-nextjs","createdAt":"2022-03-02T23:59:40.487Z","updatedAt":"2022-03-02T23:59:40.487Z","publishedAt":"2022-03-02T23:59:40.487Z","revisedAt":"2022-03-02T23:59:40.487Z","title":"【Laravel × Next.js】Axiosを使ってCSVファイルをダウンロードする","body":"<h2 id=\"h9707d3a59a\">概要</h2><p>フロント<code>next.js</code>&nbsp;× API&nbsp;<code>Laravel</code>&nbsp;の構成で作成しているアプリケーションにおいて、<br>「フロント側でとあるボタンをクリックしたら、API側で生成した<strong>CSVファイル</strong>をダウンロードする」<br>という機能を業務で実装する機会があったので、実装方法や勉強になったことをまとめておきます。<br><br>全体の流れは以下の通りです。<br><br>1.　フロント側から<code>Axios</code>を使ってAPIへリクエストを飛ばす。<br>2.　API側（<code>Laravel</code>）でCSVファイルを生成し、レスポンスとして返す。<br>3.　フロント側でレスポンスを受け取り、CSVファイルをダウンロードする。<br></p><h1 id=\"he52b44f87d\">API側の実装</h1><p>API側から実装していきます。<br>※本来はサービスクラスなどへ処理を切り分けるべきではありますが、ここではコントローラーに全ての処理を書くものとします。<br></p><h2 id=\"hf64c7c1253\">ルーティング</h2><p>フロント側（<code>Next.js</code>）から<code>Axios</code>で送られてくるリクエストに対するルーティングを定義します。</p><pre><code>// routes/api.php\n\nRoute::get('/download/csv', [DownloadCsvController::class, 'downloadCsv']);</code></pre><p>ここで定義した通り、<code>DownloadCsvController</code>の<code>downloadCsv</code>メソッドにCSVファイルを生成してレスポンスとして返す処理をかいていきます。<br></p><h2 id=\"h2171e4cd81\">コントローラー</h2><h3 id=\"h50212800e7\">コードの概要</h3><p>先に概要だけざっくり説明すると、以下の通りです。<br></p><ul><li>Laravelの<code>streamDownload</code>メソッドを使って、CSVファイルをレスポンスとして返す。</li><li><code>streamDownload</code>メソッドは引数を3つ取るので、各引数を用意する。</li></ul><p>・第1引数：エクスポートするファイルを生成するコールバック関数<br>・第2引数：ファイル名<br>・第3引数：レスポンスヘッダーの配列<br><br>※<code>streamDownload</code>メソッドについてはReadoubleの以下の箇所を参照ください。<br><a href=\"https://readouble.com/laravel/8.x/ja/responses.html?header=%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25AA%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%2580%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589#:~:text=%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89,-%E7%89%B9%E5%AE%9A%E3%81%AE%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPレスポンス 8.x Laravel</a><br></p><h3 id=\"h2faa5e3f79\">コードの全文</h3><p>詳しい解説は後にして、コードの全文を載せます。</p><pre><code>// DownloadCsvController.php\n\n/**\n * CSVダウンロード\n * @return StreamedResponse\n */\npublic function downloadCsv(): StreamedResponse\n{\n  // CSVファイル作成コールバック\n  $downloadCsvCallback = function () {\n    // CSVファイル作成\n    $csv = fopen('php://output', 'w');\n\n    // CSVの1行目\n    $colums = [\n      'id' =&gt; 'ユーザーID',\n      'name' =&gt; 'ユーザー名',\n      'email' =&gt; 'メールアドレス'\n    ];\n    // 文字化け対策\n    mb_convert_variables('SJIS-win', 'UTF-8', $colums);\n    // CSVの1行目を記入\n    fputcsv($csv, $colums);\n\n    // CSVの2行目以降\n    $users = User::all();\n    foreach ($users as $user) {\n      $userData = [\n        'id' =&gt; $user-&gt;id,\n        'name' =&gt; $user-&gt;name,\n        'email' =&gt; $user-&gt;email\n      ];\n      // 文字化け対策\n      mb_convert_variables('SJIS-win', 'UTF-8', $userData );\n      // CSVファイルの2行目以降にユーザー情報を記入\n      fputcsv($csv, $userData);\n    }\n\n    // CSVファイルを閉じる\n    fclose($csv);\n  }\n\n  // ファイル名\n  $fileName = 'ユーザー情報.csv';\n\n  // レスポンスヘッダー情報\n  $responseHeader = [\n    'Content-type' =&gt; 'text/csv',\n    'Access-Control-Expose-Headers' =&gt; 'Content-Disposition'\n  ],\n\n  return response()-&gt;streamDownload($downloadCsvCallback, $fileName, $responseHeader);\n}</code></pre><p>ここから上記のコードのポイントを解説していきます。<br></p><h3 id=\"h3693827ec3\">steramDownloadメソッド</h3><ul><li><strong>引数と返り値について</strong></li></ul><p>先述の通り、&nbsp;<code>steramDownload</code>メソッドは以下の3つの引数を取り、返り値は&nbsp;<code>Symfony\\Component\\HttpFoundation\\StreamedResponse</code>となります。<br>　・第1引数：エクスポートするファイルを生成するコールバック関数<br>　・第2引数：ファイル名<br>　・第3引数：レスポンスヘッダーの配列<br><br>今回の構成では、フロント側（<code>Next.js</code>）からAPIリクエストを受け取って<code>StreamedResponse</code>の形式でレスポンスを返すことになります。<br></p><ul><li><strong>レスポンスヘッダーについて</strong></li></ul><p>HTTPレスポンスの際に、ブラウザで表示するのではなくファイルをブラウザでダウンロードさせたい場合は、レスポンスヘッダーに<code>Content-Disposition</code>を持たせる必要があります。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition#:~:text=Content%2DDisposition%3A%20attachment%3B%20filename%3D%22filename.jpg%22\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Disposition - HTTP | MDN</a></p><pre><code>// レスポンスヘッダーに以下の記述が必要\nContent-Disposition: attachment\n\n// ファイル名を指定する場合\nContent-Disposition: attachment; filename=\"filename.jpg\"\n\n// ファイル名をエンコードする場合\nContent-Disposition: attachment; filename*=UTF-8''URLエンコーディングされたファイル名</code></pre><p>そこで<code>streamDownload</code>メソッドは、この<code>Content-Disposition</code>をよしなにレスポンスヘッダーに加えてくれます。<br><br>以下の画像は、第2引数に<code>'ファイル.csv'</code>と指定してレスポンスを返した際のレスポンスヘッダーを、検証ツールで確認したものです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6a50ee5392784850a2205c44dc23d633/%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%83%98%E3%83%83%E3%83%80%E3%83%BC.jpg\" alt=\"\"><br>ファイル名に日本語を指定すると、URLエンコーディングされた状態でレスポンスヘッダーに付与されています。<br></p><h3 id=\"he1a46ab77a\">CSVファイル作成コールバック</h3><ul><li><strong>CSVファイルの作成</strong></li></ul><p>コールバック関数内で行う処理の大まかな流れは以下の通りで、<br><code>CSVファイルを作成→中身を書き込む→ファイルを閉じる</code><br>というものです。</p><pre><code>// ファイルを作成する\nfopen('php://output', 'w');  \n\n// CSVの1行目のカラムを記入する\nfputcsv($csv, $colums);\n\n// CSVの2行目以降に企業情報を記入する\nfputcsv($csv, $userData); \n\n// ファイルを閉じる\nfclose($csv);  </code></pre><p><br></p><ul><li><strong>文字化け対策について</strong></li></ul><p>デフォルトの文字コードは、<br>・Excel：<code>SJIS</code><br>・PHP：<code>UTF-8</code>（<code>php.ini</code>で設定されている）<br>という違いがあります。</p><pre><code>// php.ini\ndefault_charset = \"UTF-8\"</code></pre><p>なのでPHPの文字コードが<code>UTF-8</code>のままCSVファイルを生成すると、Excelで開いたときに文字化けしてしまいます。<br><br>これを防ぐため、PHPの<code>mb_convert_variables</code>関数を使って文字コードを<code>UTF-8</code>から<code>SJIS-win</code>に変換します。<br>PHPドキュメント：<a style=\"color:#4aac00\" href=\"https://www.php.net/manual/ja/function.mb-convert-variables.php\" target=\"_blank\" rel=\"noopener noreferrer\">mb_convert_variables</a></p><pre><code>mb_convert_variables('SJIS-win', 'UTF-8', $colums);</code></pre><p>※<code>SJIS-win</code>はWindows向けに使われる<code>Shift-JIS</code>で、通常の<code>SJIS</code>よりも対応している文字が多いようです。<br></p><h3 id=\"h13b0fcb7b2\">レスポンスヘッダーについて</h3><p>先述の通り、<code>streamDownload</code>メソッドがレスポンスヘッダーに<code>Content-Disposition</code>を自動で含めてくれます。<br><br>レスポンスヘッダーの要素はフロント側で&nbsp;<code>AxiosResponse</code>&nbsp;から受け取ることが出来るので、後ほどフロント側でレスポンスヘッダーからファイル名を取得することになります。<br>但し今回のような&nbsp;<code>CORS</code>&nbsp;の通信の場合、標準的なレスポンスヘッダー以外の場合はAPIから返すレスポンスヘッダーに</p><pre><code>Access-Control-Expose-Headers: {レスポンスヘッダ名}</code></pre><p>を追加しておかないと、<code>AxiosResponse</code>&nbsp;からレスポンス情報を受け取ることが出来ないので、<code>Content-Disposition</code>については上記の記述が必要です。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\" target=\"_blank\" rel=\"noopener noreferrer\">Access-Control-Expose-Headers - HTTP | MDN</a><br>参考記事：<a style=\"color:#4aac00\" href=\"https://note.kiriukun.com/entry/20200303-axios-response-header-could-not-get\" target=\"_blank\" rel=\"noopener noreferrer\">Axiosでレスポンスヘッダが取得できなかった (CORSなAPI)</a><br><br>よって<code>streamDownload</code>メソッドの第3引数には、以下のレスポンスヘッダー情報を渡します。</p><pre><code>// レスポンスヘッダー情報\n$responseHeader = [\n  'Content-type' =&gt; 'text/csv',\n  'Access-Control-Expose-Headers' =&gt; 'Content-Disposition' \n],</code></pre><p>API（<code>Laravel</code>）側の実装は以上です。<br><br>ここまでの実装で、直接APIのURLをブラウザのURLに入れてアクセスすればCSVファイルをダウンロードできるはずです。<br>ただしフロント側にレスポンスとして返すだけではフロント側ではファイルダウンロードは行われないので、続けてフロント側も実装していきます。<br></p><h1 id=\"h5a8452001c\">フロント側の実装</h1><p>フロント側の実装方法は2通り紹介させていただきたいと思います。<br></p><h2 id=\"h16c6498226\">実装方法①</h2><p><code>file-saver</code>&nbsp;というライブラリを使ってファイル保存を行います。<br>ライブラリ：<a style=\"color:#4aac00\" href=\"https://www.npmjs.com/package/file-saver\" target=\"_blank\" rel=\"noopener noreferrer\">file-saver</a><br><br>このライブラリの&nbsp;<code>saveAs</code>&nbsp;メソッドに、<br><br>・第1引数：&nbsp;<code>blob</code>&nbsp;オブジェクト<br>・第2引数：ファイル名<br><br>を渡すだけで、指定したファイル名でファイルを保存することができます。<br><br>実装したコードは以下の通りです。</p><pre><code>import { saveAs } from 'file-saver'\n\n// 中略\n\naxiosApi\n  .get('/download/csv', {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    const blob = new Blob([res.data], { type: res.data.type })\n    const fileName = getFileName(res.headers['content-disposition'])\n    saveAs(blob, fileName)\n  })\n\nconst getFileName = (contentDisposition: string) =&gt; {\n  return decodeURI(contentDisposition).substring(\n    contentDisposition.indexOf(\"''\") + 2,\n    contentDisposition.length,\n  )\n}</code></pre><h3 id=\"h598587f39e\"><br>ポイント</h3><ul><li><strong><code>responseType: 'blob'</code></strong></li></ul><p>この指定をしないと文字化けしてしまいます。<br></p><ul><li><strong>ファイル名の取得</strong></li></ul><p>レスポンスヘッダーの情報は、<code>AxiosResponse</code>&nbsp;の&nbsp;<code>res</code>&nbsp;から、<br></p><pre><code>res.headers['content-disposition']</code></pre><p>のように書くと取り出すことができます。<br><br>レスポンスヘッダーの<code>Content-Disposition</code>をフロント側で受け取り、出力してみると、以下のようにエンコードされた状態です。</p><pre><code>axiosApi\n  .get(`/download/csv/${entryType}`, {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    console.log(res.headers['content-disposition'])    // 出力する\n    const blob = new Blob([res.data], { type: res.data.type })\n    const fileName = getFileName(res.headers['content-disposition'])\n    saveAs(blob, fileName)\n  })</code></pre><p>出力結果</p><pre><code>attachment; filename=___20220301173602.csv; filename*=utf-8''%E9%A1%A7%E5%AE%A2%E6%83%85%E5%A0%B1_%E3%82%82%E3%81%AE%E3%81%A5%E3%81%8F%E3%82%8A%E8%A3%.csv</code></pre><p><br>なので上記の状態からデコードを行い、さらに<code>filename*=utf-8''</code>以降のファイル名の部分のみを切り取ります。</p><pre><code>const getFileName = (contentDisposition: string) =&gt; {\n  return decodeURI(contentDisposition).substring(\n    contentDisposition.indexOf(\"''\") + 2,\n    contentDisposition.length,\n  )\n}</code></pre><h2 id=\"he028bf746e\"><br>実装方法②</h2><p><code>HTML</code>&nbsp;の&nbsp;<code>a</code>&nbsp;タグに<code>download</code>&nbsp;属性を設定すると、&nbsp;<code>a</code>&nbsp;タグをクリックした場合、ブラウザはユーザーをそのURLへ遷移させるのではなくそのコンテンツを保存させます。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/a#:~:text=%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82-,download,HTML5,-%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%95%E3%82%8C\" target=\"_blank\" rel=\"noopener noreferrer\">: アンカー要素 - HTML: HyperText Markup Language | MDN</a><br><br>この機能を使ってファイル保存を行います。</p><pre><code>axiosApi\n  .get('/download/csv', {\n    responseType: 'blob',\n  })\n  .then((res: AxiosResponse) =&gt; {\n    // Blobを参照するための一時的なURLを生成\n    const url = window.URL.createObjectURL(new Blob([res.data]))\n    // HTML要素のaタグを生成\n    const link = document.createElement('a')\n    link.href = url\n    // aタグのdownload属性を設定\n    link.setAttribute('download', `顧客情報_ものづくり補助金_全件_${getTimestamp()}.csv`)\n    // 生成したaタグを設置し、クリックさせる\n    document.body.appendChild(link)\n    link.click()\n    // URLを削除\n    window.URL.revokeObjectURL(url)\n  }</code></pre><h2 id=\"h1afe451c43\"><br>さいごに</h2><p>自分で実装して検証ツールで確認しながら進めることで、レスポンスヘッダーの働きやレスポンスヘッダーが違えば挙動も変わることを実感できたので良かったと思います。<br><br>またLaravelの&nbsp;<code>steramDownload</code>メソッドがレスポンスヘッダーをよしなに生成してくれていることに気付いたとき、フレームワークってすごい…と感動してしまいました！<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://coinbaby8.com/php-csv-export.html\" target=\"_blank\" rel=\"noopener noreferrer\">【PHP】【Laravel】CSVエクスポートの方法〜5つのポイント〜</a><br><br><a href=\"https://www.wakuwakubank.com/posts/799-it-content-type-content-disposition/\" target=\"_blank\" rel=\"noopener noreferrer\">Content-Type, Content-Dispositionの役割 - わくわくBank</a><br><br><a href=\"https://qiita.com/koushisa/items/ac908d81361534264d35\" target=\"_blank\" rel=\"noopener noreferrer\">axiosでファイルダウンロード処理を実装(IEにも対応) - Qiita</a><br><br><a href=\"https://jpdebug.com/p/978039\" target=\"_blank\" rel=\"noopener noreferrer\">Springboot+Vue+axios excelのエクスポートダウンロードを実現 - JPDEBUG.COM</a><br><br><a href=\"https://javascript.keicode.com/newjs/download-files.php#1-1\" target=\"_blank\" rel=\"noopener noreferrer\">ファイルをダウンロード保存する方法 - JavaScript 入門</a><br><br><a href=\"https://tkkm.tokyo/post-177/\" target=\"_blank\" rel=\"noopener noreferrer\">【JavaScript】Axiosを使ってCSVをダウンロードしたい | ゆとって生きたい。【JavaScript】Axiosを使ってCSV...</a><br><br><a href=\"https://helloworld-blog.tech/javascript/axios%E3%81%8B%E3%82%89csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">axiosからCSVファイルをダウンロードさせる方法 | &lt;HelloWorld/&gt;</a><br></p>","tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"},{"id":"php","createdAt":"2022-01-07T13:16:36.618Z","updatedAt":"2022-02-12T02:31:46.498Z","publishedAt":"2022-01-07T13:16:36.618Z","revisedAt":"2022-01-07T13:16:36.618Z","tag":"PHP"},{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"},{"id":"javascript","createdAt":"2022-01-07T13:18:33.680Z","updatedAt":"2022-01-07T13:18:33.680Z","publishedAt":"2022-01-07T13:18:33.680Z","revisedAt":"2022-01-07T13:18:33.680Z","tag":"JavaScript"}],"image":"laravel"},{"id":"microcms-nextjs-blog","createdAt":"2022-02-17T12:46:35.174Z","updatedAt":"2022-03-02T23:51:43.327Z","publishedAt":"2022-02-26T23:51:43.000Z","revisedAt":"2022-03-02T23:51:43.327Z","title":"microCMS × Next.js（TypeScript）で個人ブログを作る","body":"<h2 id=\"h9707d3a59a\">概要</h2><p><code>microCMS</code>、<code>Next.js（TypeScript）</code>を使ってブログサイトを作成した手順と、追加で実装した機能について、またその過程で学んだことの備忘録記事です。<br><br>基本的には公式のチュートリアル通りに進めていますが、TypeScriptの型付けや記事内のコードブロックのハイライトなど詰まった箇所もあったので、まとめておきたいと思います。<br></p><ul><li>デプロイURL</li></ul><p><a href=\"https://microcms-blog-hinakonagao.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://microcms-blog-hinakonagao.vercel.app</a><br></p><ul><li>GitHub</li></ul><p><a href=\"https://github.com/hinakonagao/microcms_blog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/hinakonagao/microcms_blog</a><br><br>※この記事ではページのスタイリングは解説しません。<br>MaterialUIを主に使用してスタイリングを行っているので、詳しいコードはGitHubをご覧いただければと思います。<br></p><h3 id=\"h48162eced8\">使用技術</h3><ul><li>Next.js　12.0.10</li><li>React　17.0.2</li><li>TypeScript　4.5.5</li><li>ESLint　8.8.0</li><li>prettier　2.5.1</li></ul><p><br></p><h2 id=\"hc953739b3f\">全体の流れ</h2><p>１．microCMSの準備（アカウント作成・記事コンテンツのAPI作成）<br>２．Next.jsのプロジェクト作成<br>３．APIリクエストのための環境変数の設定<br>４．公式のSDK「microcms-js-sdk」の導入<br>５．記事一覧画面の作成<br>６．記事詳細画面の作成<br>７．コードブロックのシンタックスハイライトの実装<br>８．【おまけ】タグでの絞り込み機能の実装<br>９．【おまけ】ページネーション機能の実装<br><br>というような流れで説明していきます。<br></p><h2 id=\"hd1205c1797\">1. microCMSの準備</h2><p>まずはmicroCMSのアカウントを作成し、APIを作成します。<br><br>手順は公式のチュートリアルに詳しく書かれているので、ここでの説明は割愛します。<br><a style=\"color:#4aac00\" href=\"https://blog.microcms.io/microcms-next-jamstack-blog/#:%7E:text=%E3%81%8C%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%8C%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82-,2.%20microCMS%E3%81%AE%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B,-%E6%AC%A1%E3%81%AB%E3%80%81microCMS%E3%81%A7\" target=\"_blank\" rel=\"noopener noreferrer\">microCMS + Next.jsでJamstackブログを作ってみよう　2. microCMSの用意する</a><br><br>私は&nbsp;<code>blog</code>&nbsp;と&nbsp;<code>tag</code>&nbsp;の2つのAPIエンドポイントを作成しました。<br></p><h3 id=\"hebabef9705\">blog</h3><p>ブログコンテンツを登録しておくリスト形式の API です。</p><ul><li>title：記事タイトル</li><li>body：記事本文</li><li>tags：タグ（別のエンドポイント&nbsp;<code>/tag</code>&nbsp;に登録したタグを複数参照できるように設定）</li><li>image：表示する画像名（プロジェクトディレクトリに保存した画像の中から、ブラウザに表示する画像を指定するために使用）</li></ul><p><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/577556386f954864b763ec82bdea4d3c/blog.jpg\" alt=\"\"><br></p><h3 id=\"h1d9b92c0c9\">tag</h3><p>ブログ記事に紐づけるタグを登録しておくリスト形式の API です。<br><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/24cd3d349eb74b35a9ee5ca8f901543a/tag.jpg\" alt=\"\"><br></p><h2 id=\"hce660a84c7\">2. Next.jsプロジェクトを作成する</h2><p>下記のコマンドを実行してNext.jsのプロジェクトを作成し、続けて開発サーバーを立ち上げます。</p><pre><code>$ yarn create next-app --typescript\n// プロジェクト名の入力を求められるので入力する\n\n$ cd ./microcms_blog/\n\n$ yarn dev</code></pre><p><br>次に<code>src</code>ディレクトリを作成して、<code>pages</code>ディレクトリと<code>styles</code>ディレクトリを<code>src</code>ディレクトリの配下に移動させます。</p><pre><code>$ mkdir src &amp;&amp; mv pages src &amp;&amp; mv styles src</code></pre><p><br>さらに、モジュールのインポートを絶対パスで指定できるよう、ベースURLを&nbsp;<code>src</code>&nbsp;ディレクトリに設定します。</p><pre><code>// tsconfig.json\n{\n  \"compilerOptions\": {\n    // 追加\n    \"baseUrl\": \"src\"\n  }\n}</code></pre><p>ベースURLの設定についてはこちらの記事を参考にさせていただきました。<br><a href=\"https://fwywd.com/tech/next-base-url\" target=\"_blank\" rel=\"noopener noreferrer\">【Next.js】特定のディレクトリを基準にし、絶対パスでモジュールをインポートする方法 | fwywd（フュード）powered by キ...</a><br></p><h2 id=\"ha56333b74a\">ESLint / Prettier</h2><p>Next.js のバージョン11 からは、デフォルトでESLintが搭載されています。<br>ESLintに関するインストール済のパッケージは以下の2つです。</p><pre><code>// package.json\n{\n  ...\n  \"devDependencies\": {\n    \"eslint\": \"8.8.0\",    // 構文解析のエンジン\n    \"eslint-config-next\": \"12.0.10\",    // ESLintのルール\n  }\n  ...\n}</code></pre><p><br>Next.js の新規プロジェクト作成時に生成された&nbsp;<code>.eslintrc</code>&nbsp;は ESLint の設定ファイルを意味しており、<strong>デフォルトで&nbsp;</strong><strong><code>eslint-config-next</code></strong><strong>&nbsp;の設定が適用</strong>されています。（ルールの詳細は後述）</p><pre><code>// .eslintrc.json\n\n{\n  \"extends\": \"next/core-web-vitals\",\n}\n\n</code></pre><p><br>少しだけESLintの設定を加えます。</p><pre><code>// .eslintrc.json\n\n{\n  \"extends\": \"next/core-web-vitals\",\n  // 以下のルールを追記\n  \"rules\": {\n    \"react/display-name\": \"off\",\n    \"react-hooks/exhaustive-deps\": \"off\",\n    \"@next/next/no-sync-scripts\": \"off\"\n  }\n}</code></pre><p><br>Prettier は含まれていないため、インストールしておきます。</p><pre><code>$ yarn -DE add prettier eslint-config-prettier</code></pre><h2 id=\"h5095390624\"><br>3. 環境変数の設定</h2><p>microCMSのAPIへアクセスする際は、サービスドメインを指定し、リクエストにそのサービスドメインのAPIキーを含める事でデータを取得することができます。<br><br>※microCMSでのAPIキーの作成方法は公式ページを参照ください。<br><a style=\"color:#4aac00\" href=\"https://document.microcms.io/content-api/x-microcms-api-key\" target=\"_blank\" rel=\"noopener noreferrer\">APIキー（X-MICROCMS-API-KEY）</a><br><br>まずは環境変数を管理するファイルを作成します。<br>※&nbsp;<code>.local</code>をつけるとローカル環境で使うことができ、&nbsp;<code>.development</code>をつけると開発環境で使えます。</p><pre><code>$ touch .env.development.local</code></pre><p><br><code>.env.development.local</code>ファイルを作成したら、<code>サービスドメイン</code>とmicroCMSの<code>APIキー</code>を書き込みます。<br>※サービスドメインは、例えば自分のmicroCMSページのURLが&nbsp;<code>https://aiueo.microcms.io/</code>&nbsp;であれば&nbsp;<code>aiueo</code>&nbsp;の部分になります。</p><pre><code>SERVICE_DOMAIN=xxxxxxxxxxx\nAPI_KEY=xxxxxxxxxxxx</code></pre><p><br><code>env</code>&nbsp;ファイルに書いた値は、以下のようにしてプロジェクト内で参照することができます。</p><pre><code>process.env.API_KEY</code></pre><h2 id=\"h84f24c70f8\"><br>4.microcms-js-sdkの準備</h2><p>APIリクエストには公式が提供している<code>microcms-js-sdk</code>を使います。<br><br>まずは<code>microcms-js-sdk</code>をインストールします。</p><pre><code>$ yarn add microcms-js-sdk</code></pre><p><br><code>libs/client.ts</code>&nbsp;を作成してSDKの初期化を行います。</p><pre><code>$ mkdir src/libs\n$ touch ./src/libs/client.ts</code></pre><p><br><code>serviceDomain</code>&nbsp;と&nbsp;<code>apiKey</code>&nbsp;の値は&nbsp;<code>env</code>&nbsp;ファイルを参照します。</p><pre><code>// libs/client.ts\n\nimport { createClient } from \"microcms-js-sdk\";\n\nexport const client = createClient({\n  serviceDomain: process.env.SERVICE_DOMAIN || \"\",\n  apiKey: process.env.API_KEY || \"\",\n});</code></pre><p><br>※<code>serviceDomain</code>&nbsp;と&nbsp;<code>apiKey</code>&nbsp;は&nbsp;<code>string</code>型、.envファイルから参照する環境変数は&nbsp;<code>string | undefined</code>型なので、もし以下のように&nbsp;<code>|| \"\"</code>&nbsp;の部分を書かないとエラーが出ます。</p><pre><code>serviceDomain: process.env.SERVICE_DOMAIN\n// 型 'string | undefined' を型 'string' に割り当てることはできません。型 'undefined' を型 'string' に割り当てることはできません。</code></pre><h2 id=\"h4e79de37a7\"><br>5. microCMSから記事データを取得する（一覧画面）</h2><h3 id=\"hde4a1d43ba\">型の事前準備</h3><p>microCMSから取得するブログ記事とタグのデータ型を定義しておきます。<br><br>型定義ファイルを別途作成します。</p><pre><code>$ mkdir src/types\n$ touch ./src/types/blog.ts</code></pre><p><br>作成したファイルに型を定義します。<br>今回私が作成したAPIだと以下の通りになります。</p><pre><code>// src/types/blog.ts\n\nexport type Blog = {\n  id: string;\n  body: string;\n  title: string;\n  tags: Tag[];\n  image: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n  revisedAt: string;\n};\n\nexport type Tag = {\n  id: string;\n  tag: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n  revisedAt: string;\n};</code></pre><h3 id=\"hbc42ef09fb\"><br>APIリクエストを行う</h3><p><code>getStaticProps</code>を使ってmicroCMSのAPIを叩き、データを取得します。<br><code>pages/index.tsx</code>&nbsp;に以下のように書きます。</p><pre><code>// pages/index.js\n\n\nimport Link from \"next/link\";\nimport type { InferGetStaticPropsType, NextPage } from \"next\";\nimport { client } from \"libs/client\";    // srcから見た絶対パスで指定\nimport type { Blog, Tag } from \"types/blog\";    // srcから見た絶対パスで指定\n\n// microCMSへAPIリクエスト\nexport const getStaticProps = async () =&gt; {\n  const blog = await client.get({ endpoint: \"blog\" });\n  const tag = await client.get({ endpoint: \"tag\" });\n\n  return {\n    props: {\n      blogs: blog.contents,\n      tags: tag.contents,\n    },\n  };\n};\n\n// Props（blogsとtags）の型\ntype Props = {\n  blogs: Blog[];\n  tags: Tag[];\n};\n\nconst Home: NextPage&lt;InferGetStaticPropsType&lt;typeof getStaticProps&gt;&gt; = ({\n  blogs,\n  tags,\n}: Props) =&gt; {\n  console.log(blogs);\n  console.log(tags);\n　// ... 以下省略</code></pre><p><br>ここで&nbsp;<code>http://localhost:3000</code>&nbsp;にアクセスすると、コンソールにAPIから取得したデータが表示されるはずです。<br><br>私の作成したAPIだと、以下の画像のようなデータが取れています。</p><h3 id=\"hf4a22cee96\">blogs</h3><p><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/21ce7cb8666749859e4e9a8a1a57939a/blogs.jpg\" alt=\"\"><br></p><h3 id=\"h0502f3a90c\">tags</h3><p><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/3634ac49f1c749069024d8d2e57474f1/tags.jpg\" alt=\"\"><br><br>ではこのデータを画面に表示します。<br><br>※ディレクトリ構成は以下のようにします。</p><ul><li>pages/index.js&nbsp;→ 記事一覧画面</li><li>pages/blog/[id].ts → 記事詳細画面</li></ul><p><br>一覧画面に記事タイトルをリスト形式で表示し、記事詳細画面へのリンクをつけます。</p><pre><code>// pages/index.tsx\n\nconst Home: NextPage&lt;InferGetStaticPropsType&lt;typeof getStaticProps&gt;&gt; = ({\n  blogs,\n  tags,\n}: Props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;ul&gt;\n        {blogs.map((blog) =&gt; (\n          &lt;li key={blog.id}&gt;\n            &lt;Link href={`/blog/${blog.id}`}&gt;\n              &lt;a&gt;{blog.title}&lt;/a&gt;\n            &lt;/Link&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre><p><br>これで&nbsp;<code>http://localhost:3000</code>&nbsp;にアクセスすると記事タイトル一覧が表示され、タイトルをクリックすると&nbsp;<code>http://localhost:3000/blog/[microCMSで設定したコンテンツID]</code>&nbsp;のURLへ遷移するはずです。<br><br>次にこの遷移先のページを作ります。<br></p><h2 id=\"h85b588f038\">6. 記事詳細画面を作成する</h2><p>一覧画面でブログ記事の詳細画面を作っていきます。<br><br>上記のリンク先に指定した通り、&nbsp;<code>pages/blog/[id].ts</code>に詳細画面を作ります。<br>まずはファイルを作成します。</p><pre><code>$ mkdir src/pages/blog\n$ touch ./src/pages/blog/[id].tsx</code></pre><p><br>作成したファイルを、以下のように編集します。</p><pre><code>// pages/blog/[id].tsx\n\nimport {\n  GetStaticPaths,\n  GetStaticProps,\n  InferGetStaticPropsType,\n  NextPage,\n} from \"next\";\nimport { client } from \"libs/client\";\nimport type { Blog } from \"types/blog\";\n\n// APIリクエストを行うパスを指定\nexport const getStaticPaths: GetStaticPaths&lt;Params&gt; = async () =&gt; {\n  const data = await client.get({ endpoint: \"blog\" });\n\n  const paths = data.contents.map((content) =&gt; `/blog/${content.id}`);\n  return { paths, fallback: false };\n};\n\n// microCMSへAPIリクエスト\nexport const getStaticProps: GetStaticProps&lt;Props, Params&gt; = async (\n  const id = context.params?.id;\n  const data = await client.get({ endpoint: \"blog\", contentId: id });\n\n  return {\n    props: {\n      blog: data,\n    },\n  };\n};\n\n// // Props（blog）の型\ntype Props = {\n  blog: Blog;\n};\n\nconst BlogId: NextPage&lt;InferGetStaticPropsType&lt;typeof getStaticProps&gt;&gt; = ({\n  blog,\n}: Props) =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;h1&gt;{blog.title}&lt;/h1&gt;\n      &lt;p&gt;{blog.publishedAt}&lt;/p&gt;\n            {blog.tags.map((tag) =&gt; (\n        &lt;li key={tag.id}&gt;\n          #{tag.tag}\n        &lt;/li&gt;\n      ))}\n      &lt;div\n        dangerouslySetInnerHTML={{\n          __html: `${blog.body}`,\n        }}\n      /&gt;\n    &lt;/main&gt;\n  );\n}</code></pre><h3 id=\"h8a50fc5ec1\"><br>ポイント解説</h3><ul><li><code>fallback: false</code>&nbsp;の設定</li></ul><p><code>getStaticPaths</code>&nbsp;で&nbsp;<code>return { fallback: false };</code>&nbsp;と書いています。<br><br>これにより、&nbsp;<code>http://localhost:3000/blog/[存在しないコンテンツID]</code>&nbsp;のURLにアクセスすると404ページへ遷移するようになります。<br>※&nbsp;<code>fallback: true</code>&nbsp;にして存在しないURLにアクセスした場合はエラー画面が出てしまいます。<br></p><ul><li><code>dangerouslySetInnerHTML</code></li></ul><p>以下の通り、記事本文は&nbsp;<code>dangerouslySetInnerHTML</code>&nbsp;を通して表示しています。<br></p><pre><code>&lt;div\n  dangerouslySetInnerHTML={{\n    __html: `${blog.body}`,\n  }}\n/&gt;</code></pre><p><br>APIから返される記事本文は文字列形式（HTMLタグも文字列として取得される）なので、これをHTMLとして描画するために<code>dangerouslySetInnerHTML</code>&nbsp;を使っています。<br></p><h2 id=\"h7941af99cd\">7. コードブロックのハイライトを行う</h2><p>microCMSのリッチエディタでソースコードとして記述した部分は、</p><pre><code>&lt;pre&gt;\n  &lt;code&gt;\n    // コード\n  &lt;/code&gt;\n&lt;/pre&gt;</code></pre><p>という形式で取得されます。<br><br>このままdangerouslySetInnerHTMLを通すだけでは、何もハイライトされていないコードが表示されるので、ライブラリを使って装飾していきます。<br><br>microCMSの公式で紹介されている、<a style=\"color:#4aac00\" href=\"https://www.npmjs.com/package/cheerio\" target=\"_blank\" rel=\"noopener noreferrer\">cheerio</a>と<a style=\"color:#4aac00\" href=\"https://www.npmjs.com/package/highlight.js\" target=\"_blank\" rel=\"noopener noreferrer\">highlight.js</a>というライブラリを使ってサーバーサイドでハイライトを行いました。<br><a href=\"https://blog.microcms.io/syntax-highlighting-on-server-side/\" target=\"_blank\" rel=\"noopener noreferrer\">サーバサイドでシンタックスハイライトを行う</a><br><br>まずはライブラリをインストールします。</p><pre><code>$ yarn add highlight.js cheerio\n$ yarn add --dev @types/highlightjs @types/cheerio</code></pre><p><br>次にブログ記事を生成する際の&nbsp;<code>getStaticProps</code>&nbsp;内の記述を修正します。<br>※ライブラリについての説明は上記のmicroCMSの記事などを参照ください。</p><pre><code>// pages/blog/[id].tsx\n\n// importを追記\nimport cheerio from \"cheerio\";\nimport hljs from \"highlight.js\";\nimport \"highlight.js/styles/hybrid.css\";\n\n// 中略\n\nexport const getStaticProps: GetStaticProps&lt;Props, Params&gt; = async (\n  context\n) =&gt; {\n  const id = context.params?.id;\n  const blog = await client.get({ endpoint: \"blog\", contentId: id });\n  // 以下の部分を追記\n  const $ = cheerio.load(blog.body);\n  $(\"pre code\").each((_, elm) =&gt; {\n    const result = hljs.highlightAuto($(elm).text());\n    $(elm).html(result.value);\n    $(elm).addClass(\"hljs\");\n  });\n\n  return {\n    props: {\n      blog,\n      highlightedBody: $.html(),\n    },\n  };\n};</code></pre><p>これでサーバーサード側でシンタックスハイライト済の記事データを取得することができます。<br><br>※実装においては以下の記事も参考にさせていただきました。<br><a href=\"https://www.blogchin.net/blogs/p9f3s1x5k5yb/\" target=\"_blank\" rel=\"noopener noreferrer\">Next.JS+microCMSで作成したブログに、ソースコードのシンタックスハイライトをつけてみる</a><br><a href=\"https://qiita.com/cawauchi/items/ff6489b17800c5676908\" target=\"_blank\" rel=\"noopener noreferrer\">next.js+microcmsでシンタックスハイライトの導入 - Qiita</a></p><h2 id=\"h5a51a8e35e\"><br>8. 【おまけ】タグでの絞り込み機能</h2><p>先述の通り、今回は&nbsp;<code>blog</code>&nbsp;と&nbsp;<code>tag</code>&nbsp;の2つのAPIを作成し、ブログ記事は複数の&nbsp;<code>tag</code>&nbsp;を持てるようにしました。<br><br>そして</p><ul><li>記事一覧画面で各記事が持つタグを表示</li><li>APIから取得した&nbsp;<code>tag</code>&nbsp;の一覧をサイドバーに表示（タグを選んで記事を絞り込む）</li></ul><p>を出来るようにしました。<br><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/0ef6284906254e6580e558fae4082554/tag_serch.jpg\" alt=\"\"><br></p><h3 id=\"h3ab24f6f50\">メリット</h3><p><code>tag</code>&nbsp;のAPIエンドポイントを別途作成する構成にしたことで、以下のようなメリットがあります。</p><ul><li>サイドバーに設置した&nbsp;<code>tag</code>&nbsp;一覧の表示順の並べ替えや修正を、コードをいじらずmicroCMSの管理画面で行える。</li><li><code>tag</code>&nbsp;名を修正したい時に、記事のタグを一つひとつ修正しなくともAPIの&nbsp;<code>tag</code>&nbsp;を修正すれば一括して変更できる。</li></ul><h3 id=\"h50d6571ee1\"><br>実装方法（記事一覧の表示について）</h3><p>まずは、&nbsp;<code>getStaticProps</code>&nbsp;から受け取った記事をそのまま全て表示するのではなく、画面に表示する記事だけを格納する&nbsp;<code>state</code>&nbsp;を別途作成します。</p><pre><code>const [showBlogs, setShowBlogs] = useState(blogs)\n// 初期値にgetStaticPropsから受け取ったブログ記事データを入れる</code></pre><p><br>そして画面には&nbsp;<code>showBlogs</code>&nbsp;の中身を&nbsp;<code>map</code>&nbsp;で回して一覧表示します。<br>※絞り込みによって&nbsp;<code>showBlogs</code>&nbsp;に記事が入っていなかった場合のための条件付きレンダリングも記述しておきます。</p><pre><code>{!showBlogs.length &amp;&amp; &lt;p&gt;There are no posts...&lt;/p&gt;}\n{showBlogs.map((blog) =&gt; (\n    // 記事を表示</code></pre><p><br><br><strong>※注</strong><br><strong>このブログサイトはMaterialUIを使ってスタイリングを行っており、ここからは実際の実装通り、通常のHTMLタグではなくMaterialUIのタグで表記させていただきます。</strong><br><strong>（MaterialUIのタグ名を見ればどんな役割の要素なのか想像がつくと思うので、MaterialUIに触れたことが無い方も何となく読み取っていただけるかなと思います。）</strong><br><br><br>記事の一覧表示の中で、この記事が持つ&nbsp;<code>tag</code>&nbsp;も&nbsp;<code>map</code>&nbsp;で回して表示します。</p><pre><code>{showBlogs.map((blog) =&gt; (\n\n    // 中略\n\n    // 持っているtagを全て表示\n    {blog.tags.map((tag) =&gt; (\n      &lt;Typography key={tag.id}&gt;\n        #{tag.tag}\n      &lt;/Typography&gt;\n    ))}</code></pre><h3 id=\"h79fb2c15aa\"><br>実装方法（タグによる絞り込みについて）</h3><p><code>tag</code>&nbsp;のAPIエンドポイントから受け取るデータは、以下の<code>tag</code>型の配列でした。</p><pre><code>export type Tag = {\n  id: string;\n  tag: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n  revisedAt: string;\n};</code></pre><p><br>なのでまずはこのデータから、tag名だけを抜き出して配列に格納します。</p><pre><code>// getStaticPropsで取得したtagsからtag名のみ抜き出す\nconst tagList = tags.map((tag) =&gt; tag.tag);</code></pre><p><br>作成した&nbsp;<code>tagList</code>&nbsp;を使って、サイドバーにタグ一覧を表示します。</p><pre><code>&lt;List&gt;\n  &lt;Typography&gt;\n    # Tags\n  &lt;/Typography&gt;\n\n  &lt;ListItemButton onClick={() =&gt; selectTag(\"all\")}&gt;\n    &lt;ListItemText primary=\"All\"/&gt;   // primaryに指定した文字列が表示される\n  &lt;/ListItemButton&gt;\n\n  {tagList.map((tag) =&gt; (\n    &lt;ListItemButton key={tag} onClick={() =&gt; selectTag(tag)}&gt;\n      &lt;ListItemText primary={tag}/&gt;   // primaryに指定した文字列が表示される\n    &lt;/ListItemButton&gt;\n  ))}\n&lt;/List&gt;</code></pre><p><br><code>onClick</code>&nbsp;に指定した&nbsp;<code>selectTag()</code>&nbsp;メソッドを実装します。</p><pre><code>// タグ絞り込み\nconst selectTag = (tag: string) =&gt; {\n  if (tag === \"all\") {\n    setShowBlogs(blogs);\n  } else {\n    const selectedBlogs = blogs.filter((blog) =&gt; {\n      const haveTags = blog.tags.map((tag) =&gt; tag.tag);\n      return haveTags.includes(tag);\n    });\n    setShowBlogs(selectedBlogs);\n  }\n\n  // 画面最上部へスクロールさせる\n  window.scrollTo({\n    top: 0,\n    behavior: \"smooth\",\n  });\n};</code></pre><p><br>検索のロジックについては以前別の記事に書いたので、詳しくはこちらをご覧ください。<br><a style=\"color:#4aac00\" href=\"https://qiita.com/hinako_n/items/a0745afe0631578c698e\" target=\"_blank\" rel=\"noopener noreferrer\">Reactでリアルタイムの検索機能を実装する - Qiita</a><br><br>以上で「All」を選べば全記事が表示され、タグを選べばそのタグを持つ記事のみが表示されるようになりました。<br></p><h2 id=\"h88cdec125d\"> 9.【おまけ】ページネーション機能の実装</h2><p><code>react-paginate</code>というライブラリを使って、ページネーション機能を実装しました。  <br>ライブラリ： <a href=\"https://www.npmjs.com/package/react-paginate \" target=\"_blank\" rel=\"noopener noreferrer\">https://www.npmjs.com/package/react-paginate </a><br><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/9a2cb163f00a4910b6ebf063d87811ab/%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3.jpg\" alt=\"\"><br><br>ライブラリについての詳しい説明では割愛し、ここでは実装したコードだけ載せさせていただきます。<br>使い方は以下の記事を参考にさせていただきました。<br><br><a href=\"https://de-milestones.com/react_pagination/\" target=\"_blank\" rel=\"noopener noreferrer\">https://de-milestones.com/react_pagination/</a><br><br><a href=\"https://tech.stmn.co.jp/entry/2020/10/28/141406\" target=\"_blank\" rel=\"noopener noreferrer\">https://tech.stmn.co.jp/entry/2020/10/28/141406</a><br></p><h3 id=\"h2661198b93\">実装手順</h3><p>まずはライブラリをインストールします。<br></p><pre><code>$ yarn add react-paginate</code></pre><p><br>記事一覧画面を編集していきます。<br><br>ページネーションの制御に使う <code>state</code>と、ページネーションをクリックした時に実行するメソッドを定義します。  <br><br>pages/index.tsx</p><pre><code>import ReactPaginate from \"react-paginate\";\n\n\n// 中略\n\n&nbsp;const [offset, setOffset] = useState(0);&nbsp;&nbsp;// 何番目の記事から表示するか\n&nbsp;const perPage = 6;&nbsp;&nbsp;// 1ページあたりに表示する記事数\n\n&nbsp;const handlePageChange = (data: { selected: number }) =&gt; {\n&nbsp;&nbsp;// クリックしたページ数を{selected: 1}のようなオブジェクト形式で引数に受ける\n&nbsp;&nbsp;setOffset(data.selected * perPage)&nbsp;&nbsp;// 表示する記事の開始位置を変更\n\n&nbsp;&nbsp;// ページ最上部へスクロールする\n&nbsp;&nbsp;window.scrollTo({&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;top: 0,\n&nbsp;&nbsp;&nbsp;behavior: \"smooth\",\n&nbsp;&nbsp;});\n&nbsp;};</code></pre><p><br>記事の一覧表示の箇所を修正します。</p><pre><code>// 表示する記事をsliceで抽出して一覧表示\n{showBlogs.slice(offset, offset + perPage).map((blog) =&gt; (</code></pre><p><br><br>ページネーションコンポーネントを記事一覧の下に設置します。</p><pre><code>// ページネーションコンポーネント\n&lt;ReactPaginate\n&nbsp;&nbsp;previousLabel={\"&lt;\"}&nbsp;// 前のページボタン\n&nbsp;&nbsp;nextLabel={\"&gt;\"}&nbsp;&nbsp;// 次のページボタン\n&nbsp;&nbsp;pageCount={Math.ceil(blogs.length / perPage)}&nbsp;&nbsp;// ページ総数\n&nbsp;&nbsp;onPageChange={handlePageChange}&nbsp;&nbsp;// クリック時のfunction\n&nbsp;&nbsp;containerClassName={\"pagination\"}&nbsp;&nbsp;// ページネーションであるulに付くクラス名\n&nbsp;&nbsp;activeClassName={\"active\"}&nbsp;&nbsp;// アクティブなページのliに着くクラス名\n/&gt;</code></pre><p><br>スタイルを付けます。</p><pre><code>.pagination {\n&nbsp;display: flex;\n&nbsp;align-items: center;\n&nbsp;justify-content: center;\n&nbsp;margin: 0 auto;\n&nbsp;padding: 40px 0;\n}\n\n.pagination li {\n&nbsp;margin: 0 16px;\n}\n\n.pagination li &gt; a {\n&nbsp;position: relative;\n&nbsp;font-size: 16px;\n&nbsp;width: 24px;\n&nbsp;height: 24px;\n&nbsp;outline: none;\n&nbsp;z-index: 100;\n&nbsp;cursor: pointer;\n}\n\n.pagination a::before {\n&nbsp;content: \"\";\n&nbsp;display: block;\n&nbsp;position: absolute;\n&nbsp;top: 50%;\n&nbsp;left: 50%;\n&nbsp;width: 32px;\n&nbsp;height: 32px;\n&nbsp;border-radius: 50%;\n&nbsp;transform: translate(-50%, -50%);\n&nbsp;z-index: -100;\n}\n\n.pagination li.active &gt; a::before {\n&nbsp;background-color: #929191;\n}\n\n.pagination li.active &gt; a {\n&nbsp;color: #f2f2f2;\n}</code></pre><p><br>以上でページネーションを実装できました。<br><br>予めフロント側で全件保持している記事データに対して表示を変えているだけなので、もちろんリロードもなく瞬時に切り替わります。<br></p><h2 id=\"h9b4c4b9dd7\"> 最後に</h2><p>microCMSは公式のチュートリアルやブログが豊富で分かりやすく、機能もどんどん拡張されており（最初は公式SDKも無かったらしい）、長く使っていくにも安心だなと思いました。<br><br>このブログは最低限の機能を作ってデプロイしたのでまだまだ未完成ですが、これから機能拡大・スタイル修正していきたいなと思います。<br></p><h2 id=\"h3bcda3e6b0\">最後に</h2><p>microCMSは公式のチュートリアルやブログが豊富で分かりやすく、機能もどんどん拡張されており（最初は公式SDKも無かったらしい）、長く使っていくにも安心だなと思いました。<br><br>このブログは最低限の機能を作ってデプロイしたのでまだまだ未完成ですが、これから機能拡大・スタイル修正していきたいなと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><a href=\"https://zenn.dev/elletech/articles/nextjs_microcms\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js(TypeScript)、TailwindCSS、microCMSでブログを作成しよう！</a><br><a href=\"https://blog.microcms.io/microcms-next-jamstack-blog/\" target=\"_blank\" rel=\"noopener noreferrer\">microCMS + Next.jsでJamstackブログを作ってみよう</a><br><a href=\"https://fwywd.com/tech/next-eslint-prettier\" target=\"_blank\" rel=\"noopener noreferrer\">Next.js (TypeScript) に ESLint と Prettier を導入し、コードを綺麗に保とう | fwywd（フュード）...</a><br></p>","tags":[{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"microcms","createdAt":"2022-02-17T12:48:01.991Z","updatedAt":"2022-02-17T12:48:13.704Z","publishedAt":"2022-02-17T12:48:01.991Z","revisedAt":"2022-02-17T12:48:01.991Z","tag":"microCMS"},{"id":"typescript","createdAt":"2022-01-07T13:18:58.358Z","updatedAt":"2022-02-17T03:22:47.524Z","publishedAt":"2022-01-07T13:18:58.358Z","revisedAt":"2022-02-17T03:22:47.524Z","tag":"TypeScript"}],"image":"blog"},{"id":"laravel-softdelete","createdAt":"2022-03-02T23:54:39.267Z","updatedAt":"2022-03-02T23:55:00.491Z","publishedAt":"2022-02-23T23:54:39.000Z","revisedAt":"2022-03-02T23:54:39.267Z","title":"【Laravel】論理削除（softDelete）するときにリレーション先のデータも削除する方法","body":"<h2 id=\"h9707d3a59a\">概要</h2><p>Laravelでは、マイグレーションファイルに外部キー制約の設定を記述しておくと、親テーブルのデータを削除したときに子テーブルのデータも同時に削除することができます。<br><br>但しこれは、DBから実際にデータを削除する「<strong>物理削除</strong>」の場合の話です。<br>DBからレコードを削除するわけではなく削除フラグを立てて削除したとみなす「<strong>論理削除</strong>」の場合は、マイグレーションファイルへの記述だけではリレーション先のデータを一緒に削除してくれません。<br>このような場合に、&nbsp;<strong>モデルの&nbsp;</strong><strong><code>boot</code></strong><strong>&nbsp;メソッド（もしくは&nbsp;</strong><strong><code>booted</code></strong><strong>&nbsp;メソッド）を使って初期設定を行えば</strong>、あるテーブルのデータを論理削除したときにリレーション先のテーブルのデータも削除することができます。<br>業務でこの方法を使う機会があったので、 モデル&nbsp;<code>boot</code>&nbsp;メソッドについて勉強したこととあわせて、備忘録を書いておきたいと思います。<br></p><h2 id=\"hafc8e872cc\">論理削除（softDelete）の設定方法</h2><p>まず事前準備としてソフトデリートの設定をします。<br><br>ソフトデリート機能を組み込む手順は以下の2つです。<br><br>1.　マイグレーションファイルにソフトデリートの設定を記述する<br>2.　EloquentモデルにSoftDeletesトレイトを組み込む<br><br>例として&nbsp;<code>users</code>&nbsp;テーブルにソフトデリート機能を設定してみます。<br></p><h3 id=\"hb5391332f6\">1. マイグレーションファイルにソフトデリートの設定を記述する</h3><p>Laravelの論理削除ではテーブルの&nbsp;<code>deleted_at</code>カラムに値が入っている場合はデータは削除されたとみなすので、&nbsp;<code>deleted_at</code>カラムを追加する必要があります。<br><br><code>deleted_at</code>カラムを追加するため、マイグレーションファイルに以下の1行を追記します。</p><pre><code>publicfunction up()\n{\n    Schema::table('user',function (Blueprint $table) {\n        $table-&gt;softDeletes();    // 追記\n    });\n}</code></pre><p>これでマイグレーションを実行すると、DBのテーブルに&nbsp;<code>deleted_at</code>カラムが作成されていることが確認できます。<br></p><h3 id=\"h4383fed8c3\">2. EloquentモデルにSoftDeletesトレイトを組み込む</h3><p><code>User</code>&nbsp;モデルファイルに以下のように追記します。</p><pre><code>use Illuminate\\Database\\Eloquent\\SoftDeletes;    // 追記\n\nclass User extends Model\n{\n    use SoftDeletes;    // 追記\n}</code></pre><p>この記述により、deleteメソッドでモデルを削除した際はソフトデリートが実行されるようになります。<br><br>Laravelでソフトデリートを行うための設定は以上です。<br></p><h2 id=\"h10178e1c1c\">モデルのbootedメソッドとは</h2><p>本題の「ソフトデリートするときにリレーション先のデータも削除する」ための実装にあたり、先に今回使用する&nbsp;<code>boooted</code>&nbsp;メソッドについて少し勉強しておきます。<br><br><code>Laravel</code>&nbsp;のモデルでは、初期起動時に&nbsp;<code>boot</code>&nbsp;メソッドを走らせて初期設定をしています。<br><code>booted</code>&nbsp;メソッドはモデルの初期起動後に実行されるメソッドで、モデルに対して行いたい初期設定は&nbsp;<code>booted</code>&nbsp;メソッドに書くよう&nbsp;<code>readouble</code>&nbsp;にも説明があります。</p><h3 id=\"he23cb179bf\">【補足】bootedメソッドとbootメソッドについて</h3><p>今回実装方法をググっていると<code>boot</code>メソッドを使っている記事が見つかり、自分としても初期起動時のメソッドといえば<code>boot</code>メソッドのイメージがあったので、<code>booted</code>メソッドと<code>boot</code>メソッドについて少し調べてみました。<br><br><code>readouble</code>&nbsp;の説明では、モデルの初期設定を行う方法としてLaravel6までは&nbsp;<code>boot</code>&nbsp;メソッドが使われていますが、Laravel7以降では&nbsp;<code>booted</code>&nbsp;メソッドが使われていました。<br>・Laravel8の該当箇所<br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html#:~:text=%E3%81%97%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%A7%E3%81%99%E3%80%82-,%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%AE%E4%BD%BF%E7%94%A8,-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br>・Laravel6の該当箇所<br><a href=\"https://readouble.com/laravel/6.x/ja/eloquent.html#:~:text=%E9%98%B2%E3%81%92%E3%81%BE%E3%81%99%E3%80%82-,%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AE%E9%81%A9%E7%94%A8,-%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AB%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquent：利用の開始 6.x Laravel</a><br><br>試しにモデルファイルに以下のように書き、&nbsp;<code>booted()</code>&nbsp;のところにマウスをホバーさせてVSCodeのヒントを表示してみます。</p><pre><code>// モデルファイルに記述\n/**\n * @return void\n */\npublic static function booted(): void\n{\n    //\n}\n\n// booted() にマウスをホバーさせると、以下の説明が表示される\nIlluminate\\Database\\Eloquent\\Model::booted\n\nPerform any actions required after the model boots.\n\n&lt;?php\nprotected static function booted() { }</code></pre><p><code>booted</code>メソッドについては、&nbsp;<code>Perform any actions required after the model boots.</code>&nbsp;と説明されています。<br><br><code>boot()</code>&nbsp;を書いた場合も確認します。</p><pre><code>// モデルファイルに記述\n/**\n * @return void\n */\npublic static function boot(): void\n{\n    //\n}\n\n// boot() にマウスをホバーさせると、以下の説明が出る\nIlluminate\\Database\\Eloquent\\Model::boot\n\nBootstrap the model and its traits.\n\n&lt;?php\nprotected static function boot() { }\n@return void</code></pre><p><code>boot</code>&nbsp;メソッドは&nbsp;<code>Bootstrap the model and its traits.</code>&nbsp;と説明がありました。<br><br>※実際のLaravelのソースコードだと、以下のファイルに&nbsp;<code>boot</code>&nbsp;メソッドも&nbsp;<code>booted</code>&nbsp;メソッドもありました。　<br>興味のある方はこちらもご覧ください。<br><a href=\"https://github.com/laravel/framework/blob/9.x/src/Illuminate/Database/Eloquent/Model.php\" target=\"_blank\" rel=\"noopener noreferrer\">framework/Model.php at 9.x · laravel/framework</a><br><br>メソッド名の通りですが、&nbsp;<code>booted</code>メソッドはモデルの初期起動後に実行されているということですね。<br>私は業務ではLaravel8を使っており、&nbsp;<code>boot</code>&nbsp;メソッドでも&nbsp;<code>booted</code>&nbsp;メソッドでも同じように設定を行うことは出来ましたが、現在の&nbsp;<code>readouble</code>&nbsp;の説明に従って&nbsp;<code>booted</code>メソッドを使っていきたいと思います。<br></p><h2 id=\"haaaceead0a\">Modelのbootedメソッドにクロージャを書く</h2><p>前置きが長くなりましたが、実際にモデルの&nbsp;<code>booted</code>&nbsp;メソッドに「データを論理削除したらリレーション先のデータも削除する」設定を記述します。<br></p><h3 id=\"h8a175a9b0e\">前提</h3><ul><li><code>users</code>&nbsp;テーブル（親）と<strong>1対多</strong>で紐づく&nbsp;<code>posts</code>&nbsp;テーブルがあるとします。</li><li><code>users</code>&nbsp;テーブルからレコードを論理削除したら、 リレーション先の<code>posts</code>&nbsp;テーブルからもレコードを論理削除するように設定します。</li></ul><p><br></p><h3 id=\"hf031c5e696\">実装方法</h3><p><code>User.php</code>にリレーションと&nbsp;<code>booted</code>メソッドを追記します。</p><pre><code>class User extends Model\n{\n    use HasFactory, SoftDeletes;\n\n    /**\n     * @return HasMany\n     */\n    public function posts(): HasMany\n    {\n        return $this-&gt;hasMany(Post::class);\n    }\n\n    /**\n     * @return void\n     */\n    public static function booted(): void\n    {\n        static::deleted(function ($user) {\n            $user-&gt;posts()-&gt;delete();\n        });\n    }\n}</code></pre><p>これにより、&nbsp;<code>users</code>&nbsp;テーブルのデータ削除時に、リレーション先の&nbsp;<code>posts</code>&nbsp;テーブルからも同時に削除してくれます。<br><br>※&nbsp;<code>posts</code>&nbsp;テーブルに対してもソフトデリートの設定を行っている場合は&nbsp;<code>posts</code>&nbsp;テーブルも論理削除、何も設定していなければ&nbsp;<code>posts</code>&nbsp;テーブルからは物理削除になります。<br></p><h2 id=\"h3bcda3e6b0\">最後に</h2><p>論理削除はDBのレコードを削除するわけでは無く、SQLの命令文でいうと&nbsp;<code>UPDATE</code>&nbsp;にあたるので、論理削除の場合はDB的には削除と見なされないということは、よく考えると当たり前でもありますが改めて勉強になりました。<br><br>またモデルの&nbsp;<code>boot</code>&nbsp;メソッドや&nbsp;<code>booted</code>&nbsp;メソッドの使い方や、これらが出来ることについても良い学びになりました。<br>Laravelのライフサイクルの理解を深めれば、もっともっと実装の引き出しが増えるんだろうなと思うので、コツコツ勉強していきたいと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><br><br><a href=\"https://yaba-blog.com/larave-soft-delete/#toc3\" target=\"_blank\" rel=\"noopener noreferrer\">【Laravel】リレーション先のデータを論理削除（Soft Delete）する方法</a><br><br><a href=\"https://zenn.dev/naoki_oshiumi/articles/e16c9fbb4dfa3d\" target=\"_blank\" rel=\"noopener noreferrer\">レコードが削除されたときに子要素も一緒に削除する(laravel)</a><br><br><a href=\"https://qiita.com/niisan-tokyo/items/d3be588b53df8fa0278c\" target=\"_blank\" rel=\"noopener noreferrer\">Laravelのマニュアルにない?小技: Eloquentのboot時にtraitのbootを別に走らせる - Qiita</a><br></p>","tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"}],"image":"laravel"},{"id":"laravele-upsert","createdAt":"2022-02-17T13:10:20.839Z","updatedAt":"2022-02-17T13:10:54.928Z","publishedAt":"2022-02-16T13:10:20.000Z","revisedAt":"2022-02-17T13:10:44.894Z","title":"【Laravel8】Eloquentのupsertメソッドで複数レコードのupdateとinsertをよしなに行う","body":"<p>業務で、複数のデータについて、<br>・既存のデータがDBにあれば更新<br>・既存のデータがDBになければレコード追加<br>を行いたいという場面がありました。<br><br>そこで<code>update</code>か<code>insert</code>のどちらを行うかよしなに判断して<code>Bulk insert</code>を行ってくれるという、すごく便利な<code>Eloquent</code>の<code>upsert</code>メソッドの存在を知ったので、備忘録を書いておきます。<br></p><h2 id=\"h00bfa7a117\">upsertメソッドとは</h2><p>Laravel8から実装された機能で、<strong>1つのクエリで複数のアップサート</strong>を実行できるメソッドです。<br><br><strong>※アップサート（</strong><strong><code>upsert</code></strong><strong>）とは</strong><br>update + insertのことで、データの更新(update)とデータの挿入(insert)の両方の機能を併せ持つ。<br>対象のレコードがあればそのレコードを更新し、レコードがなければレコードの新規追加をするという場合で使う。<br><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html#:~:text=%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%80%81-,upsert%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89,-%E3%81%AFcreated_at%E3%81%A8\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">https://readouble.com</a><br><br>Laravel7までにも<code>updateOrCreate</code>メソッドや<code>firstOrCreate</code>メソッドという一つのレコードをアップサートするメソッドはありましたが、<code>upsert</code>メソッドにより複数レコードを<code>Bulk insert</code>できるようになったようです。<br></p><h2 id=\"h4d849f4362\">使い方</h2><p><code>usersテーブル</code>に複数のデータを<code>upsert</code>する例を書いてみます。<br><br>前提として、DBの<code>usersテーブル</code>には<br><strong>・id：1、name：taro</strong><br><strong>・id：2、name：hanako</strong><br>の2つのレコードが既に存在するとします。<br><br>これに対して以下の通り<code>upsert</code>メソッドを実行します。</p><pre><code>User::upsert([\n  ['id' =&gt; 1, 'name' =&gt; 'taro', 'age' =&gt; 20],      // update\n  ['id' =&gt; 2, 'name' =&gt; 'jiro', 'age' =&gt; 22],      // update\n  ['id' =&gt; null, 'name' =&gt; 'taro', 'age' =&gt; 24]    // insert\n], ['id'], ['name', 'age']);</code></pre><p>結果は、第2引数に渡した<code>id</code>が一致するレコードがあった1つ目と2つ目は<code>update</code>となり、3つ目は<code>insert</code>になります。<br></p><h3 id=\"h997f312e71\">構文</h3><p><code>upsert</code>メソッドは3つの引数を持ちます。<br></p><ul><li>第1引数</li></ul><p><code>update</code>または<code>insert</code>を行いたい値を配列で渡す。<br></p><ul><li>第2引数</li></ul><p>レコードを一意に識別するカラム（プライマリーキーかユニークキー）を配列で渡す。<br></p><ul><li>第3引数（省略可）</li></ul><p><code>update</code>が行われる際に、更新する必要があるカラムを配列で渡す。<br>省略すると全カラム更新される。<br></p><h2 id=\"h86c1eb6dfa\">注意点</h2><p>色んな引数を渡して動作確認をしてみて、気を付けるべきと思ったことを挙げておきます。<br></p><h4 id=\"h93464fb061\">第2引数に指定して意味があるのはプライマリーキーもしくはユニークキーのみ</h4><p>上記の例で第2引数に<code>['id', 'name']</code>を渡したとします。<br><br>すると2つ目のデータ<code>['id' =&gt; 2, 'name' =&gt; 'jiro', 'age' =&gt; 22]</code>については、既存のDBのデータは<code>id：2、name：hanako</code>であり<code>name</code>が一致しないので<code>insert</code>になる…と思いきや、<code>update</code>が実行されました。<br><br>Readoubleにも</p><blockquote>2番目の引数は、関連付けられたテーブル内のレコードを一意に識別するカラムをリストします。</blockquote><p>と書いてあるので、第2引数に渡せるのは一意に識別できるカラムに限るようです。<br></p><h4 id=\"h80576f371d\">第2引数には第1引数に渡しているカラムを渡す</h4><p>先ほどの例で、以下のように第1引数には<code>id</code>を渡さず、第2引数に<code>id</code>を渡したとします。</p><pre><code>User::upsert([\n  ['name' =&gt; 'taro', 'age' =&gt; 20],\n  ['name' =&gt; 'jiro', 'age' =&gt; 22],\n  ['name' =&gt; 'taro', 'age' =&gt; 24] \n], ['id'], ['name', 'age']);</code></pre><p><br>この場合は<code>id</code>が一致するカラムがあったとしても全て<code>insert</code>になりました。<br>なので第2引数に指定するカラムは、必ず第1引数にも渡しておかないといけません。<br></p><h2 id=\"hb95673d4bb\">created_atとupdated_atは自動で設定される</h2><p>モデルのタイムスタンプが有効になっている場合、<code>created_at</code>と<code>updated_at</code>のカラムは自動的に値を入れてくれます。<br><br>第1引数には<code>created_at</code>と<code>updated_at</code>について何も書かなくても、</p><ul><li><code>update</code>&nbsp;：<code>updated_at</code>のみ更新</li><li><code>insert</code>&nbsp;：<code>created_at</code>と<code>updated_at</code>は処理をしたときの時刻</li></ul><p>としてくれます。<br><br>普通の&nbsp;<code>insert</code>メソッドを使って<code>bulk insert</code>する場合は、<code>created_at</code>と<code>updated_at</code>は自動入力されず明示的に含める必要があるので、これは便利だなと思いました。<br></p><h2 id=\"h09ff17952e\">【おまけ】実装例</h2><p>実際のコードの書き方の例も残しておきたいと思います。<br><br>これは<code>upsert</code>だけでなく通常の<code>bulk insert</code>にも言えることですが、DBを更新するための配列を<code>foreach</code>や<code>for</code>文を回して作る際は、以下のように書くとスッキリします。</p><pre><code>// POSTされたデータ配列 $postedAnswers をupsertする場合\n\n$upsertAnswers = [];\n\nforeach ($postedAnswers as $answer) {\n  $upsertAnswers [] = [\n    'id' =&gt; $answer['id'] ?? null,\n    'body' =&gt; $answer['body'],\n    'type' =&gt; $answer['type']\n  ];\n}\n\n// idが一致するレコードがあれば更新、無ければレコード作成する\nAnswer::upsert($upsertSelections, ['id']);</code></pre><p><br>私ははじめ<code>array_push</code>を使って配列に要素を追加していっていましたが、先輩にレビューいただいて上記の書き方を知ったのでこれもメモでした！<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><a href=\"https://readouble.com/laravel/8.x/ja/eloquent.html#:~:text=%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%80%81-,upsert%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89,-%E3%81%AFcreated_at%E3%81%A8\" target=\"_blank\" rel=\"noopener noreferrer\">Eloquentの準備 8.x Laravel</a><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">https://readouble.com</a><br><a href=\"https://qiita.com/uchiii1/items/bb8043719f15e40db35b#eloquent%E3%81%AEupsert%E3%81%A3%E3%81%A6\" target=\"_blank\" rel=\"noopener noreferrer\">【Laravel８】Eloquentのupsert()について - Qiita</a><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com</a><br><a href=\"https://zenn.dev/y640/articles/9f66d6abfeecf6#%E4%BD%BF%E3%81%84%E6%96%B9\" target=\"_blank\" rel=\"noopener noreferrer\">【Laravel 8】Bulk insertはEloquent::upsertメソッドが便利</a><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">https://zenn.dev</a><br></p>","tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"}],"image":"laravel"},{"id":"react-serch","createdAt":"2022-01-06T00:15:53.503Z","updatedAt":"2022-02-12T11:40:50.275Z","publishedAt":"2022-02-06T00:15:53.000Z","revisedAt":"2022-02-12T11:40:50.275Z","title":"Reactでリアルタイムの検索機能を実装する","body":"<p>個人ブログサイトを作った際、記事一覧画面にキーワード検索やカテゴリーで絞り込む機能を実装しました。<br><br>APIから取得したコンテンツなどフロントエンドで保持しているデータに対して絞り込みを行う機能は色んな場面で使えるかなと思うので、そのロジックと具体的な実装方法をまとめておきます。<br></p><h2 id=\"h652c073a9b\">基本的なロジック</h2><p><br>データの絞り込みを行う基本的なロジックは、JavaScriptの組み込み関数の<code>fitler</code>  を利用した<strong>配列操作</strong>です。<br></p><blockquote><code> filter()</code>メソッドは、与えられた関数によって実装されたテストに合格したすべての配列からなる<strong>新しい配列を生成</strong>します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></blockquote><p><a style=\"background-color:#ffffff\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a><br></p><pre><code>[\"りんご\", \"みかん\", \"いちご\"].filter((text) =&gt; {\n&nbsp;return text !== \"りんご\";\n});\n\n// #=&gt; [\"みかん\", \"いちご\"];</code></pre><p><br>filterメソッドを使ってReactで検索機能を実装する流れは以下の通りです。<br></p><ol><li>ユーザーから検索条件を受け取る。（キーワードの入力、カテゴリーの選択など）</li><li>全てのデータが入った配列に対して、filterメソッドにより1.で受け取った検索条件に合致するデータのみを選別して新しい配列を生成する。</li><li>2.で生成された配列の中身を画面に一覧表示する。</li></ol><p><br></p><h2 id=\"hb4d7d075a8\">検索機能の実装例</h2><p><br>以下のURLはこれから説明する検索機能を実装したサンプルコードです。<br><br>サンプルコードにある、<code>①カテゴリー選択ボタンによる検索</code> と<code>②フリーキーワード検索</code>について解説していきます。 <br></p><iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fc93jo&display_name=CodeSandbox&url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fc93jo&image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fc93jo%2Fscreenshot.png&key=94335756f04b424b8ce3ce71cbe3de0a&type=text%2Fhtml&schema=codesandbox\" width=\"1000\" height=\"500\" scrolling=\"no\" title=\"CodeSandbox embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe><p><a href=\"https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js</a><br><br>実際のWebサービスでは、ブログ記事のデータはAPIから受け取ることが多いかと思いますが、今回は予め <code>posts</code> という配列で記事データを用意し、フロント側で保持しておきます。<br><br>【検索対象とする記事データ】</p><pre><code>const posts = [\n&nbsp;{\n&nbsp;&nbsp;title: 'useStateの使い方',\n&nbsp;&nbsp;category: 'React'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: 'LaravelのMVCモデルについて',\n&nbsp;&nbsp;category: 'Laravel'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: '同一オリジンポリシーとCORS',\n&nbsp;&nbsp;category: 'Web'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: 'useEffectの使い方',\n&nbsp;&nbsp;category: 'React'\n&nbsp;}\n]</code></pre><p><br>そして、画面に表示する記事データを管理するための状態変数 <code>showPosts</code>  を用意し、<code>showPosts</code>の記事を一覧表示します。 <br><code>showPosts</code>の初期値には、上記の<code>posts</code>を入れておきます。   <br></p><pre><code>export default function App() {\n&nbsp;const [showPosts, setShowPosts] = useState(posts);\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;{index+1}. {post.title}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br>ブラウザに表示すると以下の通りです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/4218f0d2e06447bcaad24ed417b5c3a9/blogs.png\" alt=\"\"><br>この記事一覧に対して絞り込みを行っていきます。<br></p><h2 id=\"hc8bb7fb60d\">①カテゴリー選択ボタンによる検索</h2><p>まずは、カテゴリー選択ボタンでカテゴリーを絞り込む機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p>1. カテゴリーリストの配列を作成<br>2. カテゴリー選択ボタンを設置<br>3. <code>onClick</code>時に実行して絞り込み処理を行う<code>selectCategory</code>メソッドを定義   <br><br>実装したコードはこちらです。</p><pre><code>export default function App() {\n\n&nbsp;const [showPosts, setShowPosts] = useState(posts);\n\n&nbsp;// カテゴリーリスト\n&nbsp;const categories = Array.from(new Set(posts.map((post) =&gt; post.category)));\n\t\n&nbsp;// カテゴリー絞り込み\n&nbsp;const selectCategory = (category) =&gt; {\n&nbsp;&nbsp;// allを選択した場合は早期return\n&nbsp;&nbsp;if (category === \"all\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;const selectedPosts = posts.filter((post) =&gt; post.category === category);\n&nbsp;&nbsp;setShowPosts(selectedPosts);\n&nbsp;};\n&nbsp;&nbsp;\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n\n&nbsp;&nbsp;&nbsp;{/* カテゴリー選択ボタン */}\n&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h4&gt;Category：&lt;/h4&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(\"all\")}&gt;All&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;{categories.map((category) =&gt; (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(category)}&gt;{category}&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))}\n&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>ひとつずつ解説します。<br><br><strong>1.カテゴリーリストの配列を作成</strong> <br><code>posts</code>配列に記事が存在するカテゴリーの分だけカテゴリー選択ボタンを設置したいので、まずはカテゴリーのリストを作成します。  </p><pre><code>// カテゴリーリスト\nconst categories = Array.from(new Set(posts.map((post) =&gt; post.category)));</code></pre><p><br>JavaScriptの<code>Setオブジェクト</code>を使って、<code>posts</code>  に存在するカテゴリーを<strong> 重複排除</strong>して格納したカテゴリーリストを作っています。 <br>Setオブジェクトについては以下の記事を参考にしました。<br><a href=\"https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419</a><br><br>SetオブジェクトはES2015から導入された機能で、重複した値が無いことを保証してくれます。</p><blockquote> Setオブジェクトは値のコレクションです。挿入順に要素を反復することができます。Setに<strong>重複する値は格納出来ません</strong>。Set内の値はコレクション内で一意となります。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">&nbsp;</a><a href=\"unsafe:[object Object]\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set</a></blockquote><p><br><strong>2.　カテゴリー選択ボタンを設置</strong> <br>各カテゴリーを選択するボタンと、全ての記事を表示するためのAllボタンを作ります。<br><br>1.で作成したカテゴリーリストの分だけカテゴリー選択ボタンを設置します。<br><br>カテゴリー選択ボタンとAllボタンの<code>onClick</code>時には<code>selectCategory</code>メソッドを実行し、引数には該当のカテゴリーを渡しています。   </p><pre><code>&lt;button onClick={() =&gt; selectCategory(\"all\")}&gt;All&lt;/button&gt;\n{categories.map((category) =&gt; (\n&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(category)}&gt;{category}&lt;/button&gt;\n))}</code></pre><p><br><strong>3.　onClick時に実行するselectCategoryメソッドを定義</strong> <br><code>posts</code>の中から、選択されたカテゴリーと一致するカテゴリーの記事のみを<code>filter</code>メソッドで選別しています。   <br><br>絞り込み後の配列を、一覧表示に使う状態変数<code>showPosts</code>にセットしています。  </p><pre><code>const selectCategory = (category) =&gt; {\n&nbsp;// allの場合は早期return\n&nbsp;if (category === \"all\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;}\n&nbsp;const selectedPosts = posts.filter((post) =&gt; post.category === category);\n&nbsp;setShowPosts(selectedPosts);\n}</code></pre><p><br></p><h2 id=\"h9f9b4f1e4a\">②フリーキーワード</h2><p><br>次に、ユーザーの入力値による絞り込み（フリーキーワード検索）の機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p><br>1. 検索フォームへの入力値を保持する状態変数<code>inputValue</code>を定義  <br>2. フリーキーワード検索フォームを設置<br>3. 検索フォームの<code>onChange</code>時に実行する<code>handleInputChange</code>メソッドを定義   <br>4. 検索フォームへの入力値が変わる度に実行して絞り込みを行う<code>search</code>メソッドを定義  <br></p><pre><code>export default function App() {\n&nbsp;const [showPosts, setShowPosts] = useState(posts)\n&nbsp;const [inputValue, setInputValue] = useState()\n\n&nbsp;// 検索欄への入力値をハンドリング\n&nbsp;const handleInputChange = (e) =&gt; {\n&nbsp;&nbsp;setInputValue(e.target.value)\n&nbsp;&nbsp;search(e.target.value)\n&nbsp;}\n\n&nbsp;// 検索欄への入力値での絞り込み\n&nbsp;const search = (value) =&gt; {\n&nbsp;&nbsp;// 検索欄への入力が空の場合は早期return\n&nbsp;&nbsp;if (value === \"\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;const serchedPosts = posts.filter(\n&nbsp;&nbsp;&nbsp;(post) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;Object.values(post).filter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(item) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n&nbsp;&nbsp;&nbsp;&nbsp;).length &gt; 0\n&nbsp;&nbsp;);\n\n&nbsp;&nbsp;setShowPosts(serchedPosts);\n&nbsp;}\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n\n&nbsp;&nbsp;&nbsp;{/* フリーキーワード検索フォーム */}\n&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h4&gt;Search&lt;/h4&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=\"text\" value={inputValue} onChange={handleInputChange} /&gt;\n&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;{/* 記事一覧表示 */}\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>大体はReactの基本の知識でカバーできるかと思います。<br><br>4.の絞り込みを行うロジックの部分は一見ややこしいですが、一つずつ読み解いて解説していきます。<br><br>記事の絞り込みを行っているのは以下の部分です。</p><pre><code>const serchedPosts = posts.filter(\n&nbsp;(post) =&gt;\n&nbsp;&nbsp;Object.values(post).filter(\n&nbsp;&nbsp;&nbsp;(item) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n&nbsp;&nbsp;).length &gt; 0\n)</code></pre><p><br>このコードでは、<br></p><ul><li>タイトルもしくはカテゴリーの<strong>いずれか</strong>にユーザーの入力値を<strong>含む</strong>（全一致ではない） </li><li>大文字小文字の違いは許容 </li></ul><p><br>という要件で絞り込んでいます。<br><br>要点を解説していきます。<br></p><ul><li> <strong>Object.values()</strong> </li></ul><pre><code>Object.values(post)</code></pre><p><br>上記の部分で、オブジェクトの<strong>プロパティの値を配列で取得</strong>する`Object.values()`メソッドを使い、検索対象の値を格納した配列を作ります。 <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values</a><br></p><ul><li> <strong>undefinedとnullを除外</strong> </li></ul><pre><code>item !== undefined &amp;&amp;\nitem !== null &amp;&amp;</code></pre><p><br>次に出てくる<code>toUpperCase()</code>は<code>null</code>や<code>undefined</code>の値に対しては使えません。    <br><br>なので仮にこの2行が無いと、<code>Obect.values(post)</code>で生成された配列の中に<code>undefined</code>もしくは<code>null</code>があった場合 <code>Cannot read properties of null (reading 'toUpperCase')</code> というエラーが出ます。     <br></p><ul><li> <strong>toUpperCase()</strong> </li></ul><blockquote><strong>toUpperCase()</strong>メソッドは、呼び出す文字列の値を（文字列でない場合、文字列に変換して）大文字に変換して返します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">&nbsp;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase</a></blockquote><p><br><strong>記事のタイトルとカテゴリー</strong>と、<strong>ユーザーの入力値</strong> の双方を大文字に変換することで、<strong>大文字・小文字の違いは許容</strong>します。  <br></p><ul><li> <strong>indexOf()</strong></li></ul><blockquote><strong>indexOf()</strong>メソッドは、呼び出す<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener noreferrer\">String</a>オブジェクト中で、 <code>fromIndex</code>   から検索を始め、指定された値が最初に現れたインデックスを返します。値が見つからない場合は&nbsp;<code>-1</code>を返します <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf</a></blockquote><p><br></p><pre><code>item.toUpperCase().indexOf(value.toUpperCase()) !== -1</code></pre><p><br>値が見つからなければ <code>-1</code>を返すという特性を使って、記事のタイトルやカテゴリーにユーザーの入力値を含んでいれば <code> true</code> 、含まなければ <code>false</code> を返すようにしています。<br><br>以上のステップを経て、以下のコードで検索キーワードを含む値が1つでもある記事は <code>.length &gt; 0</code> の結果 <em>true</em>が返り、<code>serchedPosts</code>に格納されます。    </p><pre><code>Object.values(member).filter(\n&nbsp;(item: string) =&gt;\n&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n).length &gt; 0</code></pre><p><br>あとはこの<code>serchedPosts</code>を画面に表示するだけです。  <br></p><h2 id=\"h1afe451c43\">さいごに</h2><p>Setオブジェクト、fileterメソッド、indexOfメソッド、toUpperCaseメソッドなど、JavaScriptの持つメソッドについても勉強になりました。<br><br>組み込み関数を一通りチラッとでも知っていれば、何かを実装したい時にあれを使えばできそう…って考えられると思うので、元々用意されている関数なんかの知識は増やしていきたいなと思います。<br><br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://himenon.github.io/docs/javascript/simple-react-local-search-form/\" target=\"_blank\" rel=\"noopener noreferrer\">https://himenon.github.io/docs/javascript/simple-react-local-search-form/</a><br><br><a href=\"https://qiita.com/takf-jp/items/af10bc05428b1182ece5\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/takf-jp/items/af10bc05428b1182ece5</a><br></p>","tags":[{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"react2"},{"id":"docker-lemp","createdAt":"2022-02-10T12:13:34.104Z","updatedAt":"2022-02-12T10:24:14.756Z","publishedAt":"2022-01-31T12:13:34.000Z","revisedAt":"2022-02-12T10:04:24.386Z","title":"DockerでPHP（Laravel）+ nginx + MySQLのLEMP環境を構築する","body":"<p>Docker, Docker Compose を使って、<code>PHP（Laravel） + nginx + MySQL</code>の<code>LEMP環境</code>を構築する記事です。   <br><br>検索するとDockerfileやdocker-compose.ymlの書き方については色んな方が記事を書いてくださっていて、動く環境を作ること自体は難しくありませんでした。<br><br>ですが、筆者はひとつコンテナを作っては動作確認していくという過程を経てすごく理解が深まったなと思うので、ファイルの書き方だけでなく動作確認したことやその結果を含めて記事に残しておきたいと思います。<br><br>↓　完成後のリポジトリはこちらです。<br><a href=\"unsafe:[object Object]\">https://github.com/hinakonagao/laravel_docker</a><br><br></p><h1 id=\"hdb194e8fef\"> 全体像</h1><p>最終的なディレクトリ構成は以下の通りです。<br><br>全コンテナを管理するdocker-compose.ymlがトップレベルにあり、同じくトップレベルにあるdockerディレクトリ配下に各コンテナのDockerfileや設定ファイルを置いています。</p><pre><code>docker_sample/\n├── src&nbsp;&nbsp;// Laravelプロジェクトのソースコード\n├── docker\n│&nbsp;&nbsp;├── app&nbsp;&nbsp;// PHPコンテナ\n│&nbsp;&nbsp;│&nbsp;&nbsp;├── Dockerfile\n│&nbsp;&nbsp;│&nbsp;&nbsp;└── php.ini\n│&nbsp;&nbsp;├── db&nbsp;&nbsp;&nbsp;// MySQLコンテナ\n│&nbsp;&nbsp;│&nbsp;&nbsp;├── Dockerfile\n│&nbsp;&nbsp;│&nbsp;&nbsp;└── my.cnf\n│&nbsp;&nbsp;└── web&nbsp;&nbsp;// nginxコンテナ\n│&nbsp;&nbsp;&nbsp;&nbsp;├── Dockerfile\n│&nbsp;&nbsp;&nbsp;&nbsp;└── default.conf\n└──&nbsp;docker-compose.yml&nbsp;&nbsp;// 全コンテナの管理</code></pre><p><br><br>早速一つずつコンテナを作っていきます。<br></p><h1 id=\"h949dc20ce4\">PHPのコンテナ（Laravelの開発環境）</h1><p>まずはLaravelの開発環境を構築するための、PHPのコンテナを作成します。<br></p><ul><li> docker-compose.ymlへの記述</li><li> PHPコンテナ用のDockerfile</li><li> PHPコンテナ用の設定ファイル（php.ini）</li></ul><p><br>について順に説明します。<br></p><h2 id=\"hce39c12d7b\"> docker-compose.yml（PHP）</h2><p><br>docker-compose.ymlのうち、PHPコンテナについての記述は以下の通りです。<br>※docker-compose.ymlはインデントが意味を持つので注意。</p><pre><code>version: \"3.9\"\n\nservices:\n&nbsp;app:&nbsp;&nbsp;// サービス名\n&nbsp;&nbsp;build:\n&nbsp;&nbsp;&nbsp;context: .\n&nbsp;&nbsp;&nbsp;dockerfile: ./docker/app/Dockerfile\n&nbsp;&nbsp;volumes:\n&nbsp;&nbsp;&nbsp;- ./src/:/app</code></pre><p><br></p><ul><li> <code>version:</code></li></ul><p>&nbsp;&nbsp;これはPHPコンテナについてではなく <code>docker-compose.yml</code> の先頭に書く設定ですが、Composeファイルのバージョンを表しています。  <br>&nbsp;&nbsp;今回は最新の `3.9` を使います。（最新のバージョンは下記の公式サイトを参照）<br>&nbsp;&nbsp;<a href=\"https://docs.docker.com/compose/compose-file/\" target=\"_blank\" rel=\"noopener noreferrer\">Compose file</a> <br>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>build:</code>  </li></ul><p>&nbsp;&nbsp;ビルドコンテキストを指定します。</p><ul><li> context：ビルドコンテキスト（buildを実行する場所）の設定</li><li> dockerfile：buildするDockerfileまでのパス（docker-compose.ymlから見た相対パス）</li></ul><p>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;参考記事： <a href=\"https://qiita.com/sam8helloworld/items/e7fffa9afc82aea68a7a\" target=\"_blank\" rel=\"noopener noreferrer\">docker-compose.ymlのbuild設定はとりあえずcontextもdockerfileも埋めとけって話 - Qiita</a> <br>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>volumes:</code>  </li></ul><p>&nbsp;&nbsp;ホスト側の <code>./src/</code>をコンテナ側の <code>/app</code> にマウントするという意味になります。   <br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;※ここで <code>services:</code> の中に書いているこの <code>volumes:</code> は <code>バインドマウント</code> を行っています。    <br>&nbsp;&nbsp;参考記事：<a href=\"https://qiita.com/y518gaku/items/456f34c317a65a9dae86\" target=\"_blank\" rel=\"noopener noreferrer\">Dockerのマウント3種類についてわかったことをまとめる - Qiita</a> <br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;何が起きているかは実際の挙動を見てみた方が分かりやすいと思うので、後ほどまた動作確認します。<br></p><h2 id=\"h2043ae13c7\">Dockerfile（PHP）</h2><p>Dockerfileはテキストファイルであり、Dockerイメージを作り上げるために実行する命令をこのファイルに書きます。<br><br>作成するDockerfileの全文がこちらです。</p><pre><code>FROM php:8.0-fpm\n\nENV TZ Asia/Tokyo\n\nRUN apt-get update &amp;&amp; \\\n\tapt-get install -y git unzip libzip-dev libicu-dev libonig-dev &amp;&amp; \\\n\tdocker-php-ext-install intl pdo_mysql zip bcmath\n\nCOPY ./docker/app/php.ini /usr/local/etc/php/php.ini\nCOPY --from=composer:2.0 /usr/bin/composer /usr/bin/composer\n\nWORKDIR /app</code></pre><p><br>一つずつ説明します。<br></p><pre><code>FROM php:8.0-fpm</code></pre><p><br>&nbsp;<code>FROM</code>ではイメージをビルドするためのベースイメージを設定します。  <br>書き方は <code>FROM イメージ名:タグ名</code> です。  <br>ここではDocker HubからPHP公式のイメージをベースとして指定しています。<br><a href=\"https://hub.docker.com/_/php\" target=\"_blank\" rel=\"noopener noreferrer\">Php - Official Image | Docker Hub</a> <br></p><pre><code>ENV TZ Asia/Tokyo</code></pre><p><br>&nbsp;<code>ENV</code>はコンテナ内のサーバー環境変数を設定します。  <br></p><pre><code>RUN apt-get update &amp;&amp; \\\n    apt-get install -y git unzip libzip-dev libicu-dev libonig-dev &amp;&amp; \\\n\tdocker-php-ext-install intl pdo_mysql zip bcmath</code></pre><p><br>&nbsp;<code>RUN</code> にはコンテナビルド時に実行するコマンドを書きます。  <br>&nbsp;<code>&amp;&amp;</code> で複数のコマンドをつなぎ、 <code>\\</code> で改行します。   <br>※ <code>&amp;&amp;</code> と <code>\\</code> を使うことで複数コマンドを1レイヤーにまとめることができ、公式でもベストプラクティスのTipsとして挙げられています。   <br><a href=\"https://www.docker.com/blog/intro-guide-to-dockerfile-best-practices/#:~:text=Tip%20%233%3A%20Identify%20cacheable%20units%20such%20as%20apt%2Dget%20update%20%26%20install\" target=\"_blank\" rel=\"noopener noreferrer\">Intro Guide to Dockerfile Best Practices - Docker Blog</a> <br><br><code>apt-get update</code> ：インストール可能なパッケージの「一覧」を更新  <br>&nbsp;<code>apt-get -y install</code>：パッケージをインストール  <br>&nbsp;<code>docker-php-ext-install</code>：PHPの拡張ライブラリをインストール  <br>※Laravelのインストールや開発に必要な（もしくは便利な）パッケージや拡張ライブラリをインストールしています。<br>※試しにこれらを全くインストールせず手順を進めてみると、コンテナを起動することはできますが、その後のLaravelプロジェクトを作成する時に大量のエラーに遭遇しました…（笑）<br></p><pre><code>COPY ./docker/app/php.ini /usr/local/etc/php/php.ini</code></pre><p><br>ローカルで（後ほど）作成する <code>php.ini</code> （PHPの設定ファイル）をDockerコンテナ内にコピーします。  <br>書き方は <code>COPY [ローカル側のパス] [コンテナ側のパス]</code>です。  <br><br>※ローカル側のパスは、Dockerfileから見てではなくbuildコマンドを実行するディレクトリから見た相対パスです。今回はDocker composeを使ってイメージビルドを行うので、docker-compose.ymlから見た相対パスになっています。<br></p><pre><code>COPY --from=composer:2.0 /usr/bin/composer /usr/bin/composer</code></pre><p><br>Laravelを使うためComposerをインストールします。<br>この書き方により<strong>マルチステージビルド</strong>という方法でインストールされます。 <br>※マルチステージビルドという方法はイメージの軽量化に役立つようです。 <br>公式ドキュメント：<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"noopener noreferrer\">Use multi-stage builds</a> <br></p><pre><code>WORKDIR /app</code></pre><p><br>コンテナを起動している時に <code>$ docker-compose exec コンテナ名 bash</code> というコマンドを実行すると、コンテナの中でbashを実行することができるのですが、 <code>WORKDIR</code>はその時のカレントディレクトリを指定しています。   <br></p><h2 id=\"h559c05704d\"> 設定ファイル（php.ini）</h2><p>&nbsp;<code>COPY ./docker/app/php.ini /usr/local/etc/php/php.ini</code> で出てきたPHPの設定ファイル <code>php.ini</code>を作成します。   <br><br>作成したファイルの中身がこちらです。<br></p><pre><code>zend.exception_ignore_args = off\nexpose_php = on\nmax_execution_time = 30\nmax_input_vars = 1000\nupload_max_filesize = 64M\npost_max_size = 128M\nmemory_limit = 256M\nerror_reporting = E_ALL\ndisplay_errors = on\ndisplay_startup_errors = on\nlog_errors = on\nerror_log = /var/log/php/php-error.log\ndefault_charset = UTF-8\n\n[Date]\ndate.timezone = Asia/Tokyo\n\n[mysqlnd]\nmysqlnd.collect_memory_statistics = on\n\n[Assertion]\nzend.assertions = 1\n\n[mbstring]\nmbstring.language = Japanese</code></pre><p><br>こちらの記事の開発用php.iniをまるっとお借りしました。<br>開発用 / 本番用の設定例と、項目ごとの説明も載っていて面白かったので、ぜひご覧ください。<br>参考記事：<a href=\"https://qiita.com/ucan-lab/items/0d74378e1b9ba81699a9\" target=\"_blank\" rel=\"noopener noreferrer\">PHP7.4 ぼくのかんがえたさいきょうのphp.ini - Qiita</a> <br></p><h2 id=\"h2c3fab92b5\"> PHPコンテナを起動する</h2><p><br>ここまででPHPのコンテナの準備が出来たので、実際に起動してみます。<br><br>docker-sompose.ymlのあるディレクトリで以下のコマンドを実行します。<br></p><pre><code>$ docker-compose up -d --build</code></pre><p><br></p><ul><li> <code>docker compose up</code> は <code>docker-compose.yml</code> に定義したサービスを起動します。   </li><li>  <code>-d</code>デタッチド」モードでコンテナを起動します。</li></ul><p>&nbsp;&nbsp;（デフォルトは「アタッチド」モードで全てのコンテナログを画面上に表示する。「デタッチド」モードではバックグラウンドで動作する。）<br>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>--build</code> コンテナの開始前にイメージをビルドします。  </li></ul><p>&nbsp;&nbsp;（特に変更がない場合はキャッシュが使用される。）<br>&nbsp;&nbsp;&nbsp;<br>※ <code>$ docker-compose build</code> → <code>$ docker-compose up -d</code> を順に行うのと同じです。   <br></p><h3 id=\"hbdb8067534\"> 起動したコンテナを確認する</h3><p>以下のコマンドで起動中のコンテナを一覧で確認することができます。<br></p><pre><code>$ docker-compose ps\n\nNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SERVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS\ndocker_sample-app-1&nbsp;&nbsp;\"docker-php-entrypoi…\"&nbsp;&nbsp;app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9000/tcp</code></pre><p><br>STATUSがrunningになっていれば正常に起動しています。<br><br>今はPHPのコンテナしか作っていないので1つだけ表示されていますが、この後nginx, MySQLのコンテナを作り、最終的に3つのコンテナが表示されるようにします。<br><br>ここで今作業しているディレクトリの構成を確認してみます。<br></p><pre><code>$ tree\n.\n├── src&nbsp;&nbsp;// 作成された！\n├── docker\n│&nbsp;&nbsp;├── app\n│&nbsp;&nbsp;│&nbsp;&nbsp;├── Dockerfile\n│&nbsp;&nbsp;│&nbsp;&nbsp;└── php.ini\n└── docker-compose.yml</code></pre><p><br>するとdocker-compose.ymlに書いたバインドマウントの以下の部分を受けて、コンテナを起動したときに自動でsrcディレクトリが作成されたことが確認できます。（同様にコンテナ内にもappディレクトリが作成されています。）<br></p><pre><code>volumes:\n&nbsp;- ./src/:/app</code></pre><p><br></p><h3 id=\"h4353a13706\"> コンテナの中に入ってみる</h3><p><br>コンテナを起動中に以下のコマンドを実行すると、コンテナの中に入ってbashを実行することができます。<br></p><pre><code>$ docker-compose exec app bash\n// appの部分はサービス名を指定する</code></pre><p><br>これで今コンテナの中に入れたので、Dockerfileの記述通りにコンテナが作られているか、またPHP・Composer・インストールした拡張機能が使えるか確認していきます。<br></p><pre><code>// Dockerfileの「WORKDIR /app」で指定したカレントディレクトリ通りか確認\n[app]:/app$ pwd\n/app\n\n// PHPのバージョン確認\n[app]:/app$ php -v\nPHP 8.0.15 (cli) (built: Jan 26 2022 17:38:36) ( NTS )\nCopyright (c) The PHP Group\nZend Engine v4.0.15, Copyright (c) Zend Technologies\n\n// Composerのバージョン確認\n[app]:/app$ composer -v\n&nbsp;&nbsp;______\n&nbsp;/ ____/___&nbsp;____ ___&nbsp;____&nbsp;____&nbsp;________&nbsp;_____\n&nbsp;/ /&nbsp;&nbsp;/ __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n/ /___/ /_/ / / / / / / /_/ / /_/ (__&nbsp;)&nbsp;__/ /\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/_/\nComposer version 2.0.14 2021-05-21 17:03:37\n\n// gitのバージョン確認\n[app]:/app$ git --version\ngit version 2.30.2\n\n// インストール済の拡張機能の一覧\n[app]:/app$ php -m\n[PHP Modules]\nbcmath\nintl\npdo_mysql\nzip\n// たくさん出てくるので他は省略\n\n// php.iniがコピー出来ているか確認\n[app]:/app$ cat /usr/local/etc/php/php.ini\nzend.exception_ignore_args = off\nexpose_php = on\nmax_execution_time = 30\nmax_input_vars = 1000\nupload_max_filesize = 64M\npost_max_size = 128M\nmemory_limit = 256M\nerror_reporting = E_ALL\ndisplay_errors = on\ndisplay_startup_errors = on\nlog_errors = on\nerror_log = /var/log/php/php-error.log\ndefault_charset = UTF-8\n\n[Date]\ndate.timezone = Asia/Tokyo\n\n[mysqlnd]\nmysqlnd.collect_memory_statistics = on\n\n[Assertion]\nzend.assertions = 1\n\n[mbstring]\nmbstring.language = Japaneseroot@0e3ba825df88</code></pre><p><br>確認できたのでコンテナを抜けます。<br></p><pre><code>$ exit\n\n// もしくは ctrl + d</code></pre><p><br></p><h3 id=\"hb30552acef\"> コンテナの外からコマンドを実行する</h3><p>上記のコンテナの中で実行したコマンドは、 <code>$ docker-compose exec サービス名 実行したいコマンド</code> でコンテナの外から実行することもできます。（コンテナが起動中に限る）  <br></p><h3 id=\"hbe7ef0b1fb\"> バインドマウントの挙動を確認する</h3><p>コンテナの外からコマンドが実行できるという確認も兼ねて、バインドマウントの動きを見る為、試しに以下のコマンドを実行してみます。<br></p><pre><code>// コンテナ内の/app配下にファイルを作ってみる\n$ docker-compose exec app touch sample.php\n$ docker-compose exec app pwd\n/app\n$ docker-compose exec app ls\nsample.php</code></pre><p><br>コンテナ内の/app配下にファイルを作成しました。<br><br>この/appという場所は、docker-compose.ymlに書いた以下の記述の通りにバインドマウントされています。<br></p><pre><code>volumes:\n&nbsp;- ./src/:/app</code></pre><p><br>これにより、プロジェクトディレクトリ配下の/srcにもsample.phpが作成されています。<br></p><pre><code>$ ls src\nsample.php</code></pre><p><br>以上より、コンテナ内の <code>/app</code> に対して行ったことが、プロジェクトの <code>/src</code> に反映していることが分かりました。   <br><br>では次に <code>/src</code> への変更がコンテナ内の <code>/app</code> に対しても反映するか試してみます。   <br><br>&nbsp;<code>/src/sample.php</code> をエディタで開いてファイルに <code>hello</code> と書きこみ、以下のコマンドを実行します。   <br></p><pre><code>$ docker-compose exec app cat sample.php\nhello\n\n// この時permission errorが出たら権限を変更する\n$ sudo chmod -R 777 ./src</code></pre><p><br>するとコンテナ内の <code>./app/sample.php</code> も編集されていることがわかります。  <br><br>このようにバインドマウントにより、ホスト側のディレクトリがコンテナ内へマウント出来ていることも確認できました。<br><br>試しに作成したファイルは不要なので消しておきます。<br></p><pre><code>$ rm src/sample.php</code></pre><p><br></p><h1 id=\"h3a503e139b\"> nginxのコンテナ（webサーバー）</h1><p>webサーバーとなるnginxのコンテナを作成します。<br><br>PHPコンテナのときと同じく、<br></p><ul><li> docker-compose.ymlへの記述</li><li> nginxコンテナ用のDockerfile</li><li> nginxコンテナ用の設定ファイル（default.conf）</li></ul><p><br>の流れで説明します。<br></p><h2 id=\"hc888d0dee3\"> docker-compose.yml（nginx）</h2><p><br>既に作成しているdocker-compose.ymlに、nginxのコンテナについての部分を追記します。<br></p><pre><code>services:\n&nbsp;api:\n\n// 中略\n\t\n&nbsp;web:&nbsp;&nbsp;// サービス名\n&nbsp;&nbsp;build:\n&nbsp;&nbsp;&nbsp;context: .\n&nbsp;&nbsp;&nbsp;dockerfile: ./docker/web/Dockerfile\n&nbsp;&nbsp;ports:\n&nbsp;&nbsp;&nbsp;- 8081:80\n&nbsp;&nbsp;depends_on:\n&nbsp;&nbsp;&nbsp;- app\n&nbsp;&nbsp;volumes:\n&nbsp;&nbsp;&nbsp;- ./src/:/app</code></pre><p><br>解説していきます。<br></p><ul><li> <code>build:</code> ・<code>volumes:</code>  </li></ul><p>&nbsp;&nbsp;ここはPHPコンテナと同様なので説明は省きます。<br>&nbsp;&nbsp;&nbsp;</p><ul><li><code>ports:</code>  </li></ul><p>&nbsp;&nbsp;ホスト側とコンテナ間のポート番号の対応付けを設定します。<br>&nbsp;&nbsp;書き方は <code>ホスト側のポート番号 : コンテナのポート番号</code>です。  <br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;※今回ホスト側（自分のPC）は既に他の開発で使っているポートとの兼ね合いで <code>8081</code> を使いました。コンテナ側はnginxのデフォルトのポート番号である <code>80</code> にしています。   <br>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>depends_on:</code>  </li></ul><p>&nbsp;&nbsp;サービスの起動順序を制御します。<br>&nbsp;&nbsp;&nbsp;<code>web</code> の <code>depends_on</code> に <code>app</code> と書いているので、 <code>app</code> → <code>web</code> の順に起動するように指定しています。      <br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;※但しこの記述なしで <code>$ docker-compose up -d --build</code> をしてみても私の環境では全く問題なく動きました。が、サービス同士の依存関係を明示的に記すという意味でも書いておくに越したことはないという判断で書いています。  <br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;※ nginxとphp間でTCPによるfpm接続についてや、<code>depends_on</code> オプションについては以下の記事がすごく勉強になったので是非読んでみてください。  <br>&nbsp;&nbsp;参考記事：<a href=\"https://qiita.com/haruyanhopemucci/items/344f1e2fb95ed452bdb2#%E5%90%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%8C%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%90%8D%E3%81%AE%E5%90%8D%E5%89%8D%E8%A7%A3%E6%B1%BA%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%99%E3%82%8B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0\" target=\"_blank\" rel=\"noopener noreferrer\">【docker-compose】dependsonとサービス名解決にまつわるエトセトラ - Qiita</a> <br></p><h2 id=\"h5a107e8b8a\"> Dockerfile（nginx）</h2><p><br>作成するDockerfileの全文はこちらです。<br></p><pre><code>FROM nginx:1.20-alpine\n\nENV TZ Asia/Tokyo\n\nCOPY ./docker/web/default.conf /etc/nginx/conf.d/default.conf</code></pre><p><br>&nbsp;<code>FROM</code> , <code>ENV</code> , <code>COPY</code> の意味はPHPコンテナのDockerfileと同様なので詳しい説明は省略し、このファイルで設定していることを簡単にまとめます。    <br></p><ul><li> nginx公式のイメージ（Alpineベース）をベースイメージに使用</li></ul><p><a href=\"https://hub.docker.com/_/nginx\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx - Official Image | Docker Hub</a> <br>参考記事：<a href=\"https://charlie1012.hatenablog.jp/entry/2021/01/14/090000\" target=\"_blank\" rel=\"noopener noreferrer\">Dockerでよく利用されているAlpineは他のLinuxディストリビューションと比べて、どれだけ軽量なのか - プログラミングは芸術だ！</a>  <br></p><ul><li> 環境変数のタイムゾーンを設定する</li><li> nginxの設定ファイル（default.conf）をコンテナ内にバインドマウント</li></ul><p><br>※ちなみにnginxは1.18, 1.20などの偶数バージョンが安定バージョンであり、安定バージョンの使用を推奨されています。<br>公式ドキュメント：<a href=\"https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#stablevsmainline\" target=\"_blank\" rel=\"noopener noreferrer\">Installing NGINX Open Source</a> <br></p><h2 id=\"h833dd2537f\"> 設定ファイル（default.conf）</h2><p><br><code>./docker/web/default.conf</code>を作成します。  <br>Laravel公式に用意されているnginxの設定例をべースに使います。<br><a href=\"https://readouble.com/laravel/8.x/ja/deployment.html\" target=\"_blank\" rel=\"noopener noreferrer\">Laravel 8.x デプロイ</a> <br><br>&nbsp;<code>root</code> と<code>fastcgi_pass</code>の設定のみ、このプロジェクトに合わせて書き換えています。   <br></p><pre><code>server {\n&nbsp;&nbsp;listen 80;\n&nbsp;&nbsp;server_name example.com;\n&nbsp;&nbsp;root /app/public;&nbsp;&nbsp;// 書き換え\n\n&nbsp;&nbsp;add_header X-Frame-Options \"SAMEORIGIN\";\n&nbsp;&nbsp;add_header X-XSS-Protection \"1; mode=block\";\n&nbsp;&nbsp;add_header X-Content-Type-Options \"nosniff\";\n\n&nbsp;&nbsp;index index.php;\n\n&nbsp;&nbsp;charset utf-8;\n\n&nbsp;&nbsp;location / {\n&nbsp;&nbsp;&nbsp;&nbsp;try_files $uri $uri/ /index.php?$query_string;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;location = /favicon.ico { access_log off; log_not_found off; }\n&nbsp;&nbsp;location = /robots.txt&nbsp;{ access_log off; log_not_found off; }\n\n&nbsp;&nbsp;error_page 404 /index.php;\n\n&nbsp;&nbsp;location ~ \\.php$ {\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_pass app:9000;&nbsp;&nbsp;// 書き換え\n&nbsp;&nbsp;&nbsp;&nbsp;fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n&nbsp;&nbsp;&nbsp;&nbsp;include fastcgi_params;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;location ~ /\\.(?!well-known).* {\n&nbsp;&nbsp;&nbsp;&nbsp;deny all;\n&nbsp;&nbsp;}\n}</code></pre><p><br></p><ul><li> <code>root</code> </li></ul><p>リクエストのルートディレクトリです。<br><code>root /app/public;</code> と書いたので、 <code>localhost:8081</code>（docker-compose.ymlで設定したポート番号）にアクセスすると <code>/app/public</code>を見に行きます。   <br></p><ul><li> <code>fastcgi_pas</code></li></ul><p>FastCGIサーバーのアドレスです。<br>※FastCGI：Webサーバ上で動くプログラムを一度起動したらしばらく待機させることによって、プログラムの開始と終了にかかる手間を減らし、動きを速くしたりWebサーバの負荷を軽減することができる仕組み。<br><code>app:9000;</code> と書いたので、appコンテナの9000番ポートを指定しています。  <br></p><h2 id=\"hf271decc8d\"> nginxコンテナを起動する</h2><p>nginxのコンテナの準備が出来たので、また実際に起動してみます。<br><br>docker-sompose.ymlのあるディレクトリで以下のコマンドを実行します。<br></p><pre><code>$ docker-compose up -d --build\n\n$ docker-compose ps\nNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SERVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS\ndocker_sample-app-1&nbsp;&nbsp;\"docker-php-entrypoi…\"&nbsp;&nbsp;app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9000/tcp\ndocker_sample-web-1&nbsp;&nbsp;\"/docker-entrypoint.…\"&nbsp;&nbsp;web&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:8081-&gt;80/tcp</code></pre><p><br>api（PHPのコンテナ）、web（nginxのコンテナ）の2つが起動できました。<br><br>またdocker_sample-web-1の <code>PORTS</code> が <code>0.0.0.0:8081-&gt;80/tcp</code> となっており、ホスト上の8081番ポートをコンテナの80番ポートへ割り当てられていることも確認できます。   <br></p><h3 id=\"h8f15037b6a\"> コンテナの動作確認</h3><p><br>nginxのバージョンを確認します。<br></p><pre><code>$ docker-compose exec web nginx -v\nnginx version: nginx/1.20.2</code></pre><p><br>コンテナの中に入ってみます。<br></p><pre><code>$ docker-compose exec web bash\nOCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: \"bash\": executable file not found in $PATH: unknown</code></pre><p><br>するとエラーになりました。<br>Alpineをベースとすると <code>bash</code> は使えず、 <code>ash</code> や <code>sh</code> は使えるようです。    <br></p><pre><code>$ docker-compose exec web ash\n[web]:/ $ pwd\n/</code></pre><p><br>無事コンテナの中に入れました。<br></p><h3 id=\"h88903227dd\"> webサーバーとしての動作確認</h3><p><br></p><ul><li> リクエストに対してファイルを返しブラウザで表示できる</li><li> nginxのコンテナからPHPのコンテナへphpを実行させることができる</li></ul><p><br>上記2点を確認します。<br></p><pre><code>$ mkdir src/public\n$ touch src/public/test.php</code></pre><p><br>test.phpを以下のように編集します。<br></p><pre><code>&lt;?php&nbsp;\n\necho 'test.phpです';\nphpinfo();</code></pre><p><br><code>http://localhost:8081/test.php</code> にアクセスすると以下のように表示され、webサーバーが正しく動作していることが確認できます。  <br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/b84369391f704cafb9636049a0ac8e40/testphp.jpeg\" alt=\"\"><br>試しに作成したファイルは不要なので消しておきます。<br></p><pre><code>$ rm -rf src/*</code></pre><p><br></p><h1 id=\"h92f102c3c7\"> MySQLのコンテナ（データベース）</h1><p>データベースのMySQLコンテナを作成します。<br><br>以下の流れで説明します。<br></p><ul><li> docker-compose.ymlへの記述</li><li> MySQLコンテナ用のDockerfile</li><li> MySQLコンテナ用の設定ファイル（my.conf）</li></ul><p><br></p><h2 id=\"h6d7ad88963\"> docker-compose.yml（MySQL）</h2><p>既に作成しているdocker-compose.ymlに、MySQLのコンテナについての部分を追記します。<br></p><pre><code>services:\n\t\n// 中略\n\n&nbsp;db:&nbsp;&nbsp;// サービス名\n&nbsp;&nbsp;build:\n&nbsp;&nbsp;&nbsp;context: .\n&nbsp;&nbsp;&nbsp;dockerfile: ./docker/db/Dockerfile\n&nbsp;&nbsp;ports:\n&nbsp;&nbsp;&nbsp;- 3306:3306\n&nbsp;&nbsp;environment:\n&nbsp;&nbsp;&nbsp;MYSQL_DATABASE: database\n&nbsp;&nbsp;&nbsp;MYSQL_USER: user\n&nbsp;&nbsp;&nbsp;MYSQL_PASSWORD: password\n&nbsp;&nbsp;&nbsp;MYSQL_ROOT_PASSWORD: password\n&nbsp;&nbsp;&nbsp;TZ: 'Asia/Tokyo'\n&nbsp;&nbsp;volumes:\n&nbsp;&nbsp;&nbsp;- mysql-volume:/var/lib/mysql\n&nbsp;&nbsp;&nbsp;&nbsp;\nvolumes:\n&nbsp;mysql-volume:</code></pre><p><br></p><ul><li> <code>build:</code> ・ <code>ports:</code>   </li></ul><p>&nbsp;&nbsp;既出の通りです。<br>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>enviroment:</code>  </li></ul><p>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;環境変数の設定です。<br>&nbsp;&nbsp;※名前やDB名・ユーザー名・パスワードは好きなものを設定します。<br>&nbsp;&nbsp;※実際のプロジェクト管理では、環境変数は <code>.env</code> に書いて <code>.gitignore</code> にするなどして、重要な情報が公開されないようにします。   <br>&nbsp;&nbsp;&nbsp;</p><ul><li> MYSQL_DATABASE：DB名</li><li> MYSQL_USER：ユーザー名</li><li> MYSQL_PASSWORD：パスワード</li><li> MYSQL_ROO<em>ROOT</em>WORD：ルート権限のパスワード</li><li> TZ：時間設定（Time Zone）</li></ul><p>&nbsp;&nbsp;&nbsp;</p><ul><li> <code>volumes:</code>  </li></ul><p>&nbsp;&nbsp;考え方はPHPやnginxのコンテナ同様ですが、先ほどまではホスト側のディレクトリを書いていたところに <code>mysql-volume</code> と書いています。  <br>&nbsp;&nbsp;これにより `mysql-colume` という名前で作成した<strong>名前付きボリューム</strong>とコンテナ内を紐づけています。 <br></p><h3 id=\"h755cef0747\"> Docker Volume</h3><p>&nbsp;<code>Volume</code>  とは、<strong>コンテナを破棄してもデータを永続的に保存できる</strong>ように、コンテナ外に提供されているデータの保存領域です。 <br>Dockerの管理下でホスト上にストレージ領域を確保しており、Linux なら <code>/var/lib/docker/volumes/</code>以下にあります。  <br>参考記事：<a href=\"unsafe:Volume\">Docker、ボリューム(Volume)について真面目に調べた - Qiita</a> <br><br>&nbsp;<strong>なぜVolumeが必要なのか？</strong> <br>コンテナが起動している間はDBのレコードは保存された状態が続きますが、例えば以下のようなコマンドでコンテナを新しく作り直したとするとデータベースの情報はゼロに戻ってしまいます。<br></p><pre><code>// コンテナ削除\n$ docker-compose down\n\n// コンテナ起動\n$ docker-compose up -d</code></pre><p><br>これでは困るのでコンテナを破棄してもデータを残したい、、、というときにVolumesを使ってデータの永続化を行います。<br><br>※ボリュームには名前付きボリュームと匿名ボリュームがありますが、通常は管理しやすい名前付きボリュームを使うと良いかと思います。<br><br>名前付きボリュームを作成する場合は、データの永続化対象のコンテナに対して <code>volumes:</code> オプションでバインドマウントを行うだけでなく、以下のようにdocker-compose.ymlのトップレベルでボリューム名を定義します。  <br></p><pre><code>volumes:\n&nbsp;- mysql-volume:</code></pre><p><br></p><h2 id=\"h7541a8019d\"> Dockerfile（MySQL）</h2><p>作成するDockerfileの全文はこちらです。<br></p><pre><code>FROM mysql:8.0\n\nCOPY ./docker/db/my.cnf /etc/my.cnf</code></pre><p><br>内容を簡単にまとめると、</p><ul><li> 公式のMySQLイメージをベースイメージに使用</li></ul><p>[Mysql - Official Image | Docker Hub](https://hub.docker.com/_/mysql)</p><ul><li> MySQLの設定ファイル（my.cnf）をコンテナ内にバインドマウント</li></ul><p><br>※ここで使用しているイメージではM1 Macでは動作しないという情報が見られました。どうやらOracleのMySQLチームがメンテしている <code>mysql/mysql-server</code> のイメージだと動作するようです。  <br><a href=\"https://hub.docker.com/r/mysql/mysql-server\" target=\"_blank\" rel=\"noopener noreferrer\">mysql-server&nbsp;| Docker Hub</a> <br></p><h2 id=\"h1fb4ed6e13\"> 設定ファイル（my.conf）</h2><p><code>./docker/db/my.cnf</code>を作成します。  <br><br>色んな記事で作成されているmy.cnfを参考にさせていただきながら書きました。<br>参考記事：<a href=\"https://it-blue-collar-dairy.com/mysqlondocker-compose/\" target=\"_blank\" rel=\"noopener noreferrer\">【Docker】docker-composeでmysqlのコンテナを立てる</a> <br></p><ul><li> 文字コード</li><li> タイムゾーン</li><li> ログ</li></ul><p><br>の設定を行っています。<br></p><pre><code>[mysqld]\n# character\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_0900_ai_ci\n\n# timezone\ndefault-time-zone = SYSTEM\nlog_timestamps = SYSTEM\n\n# Error Log\nlog-error = mysql-error.log\n\n# Slow Query Log\nslow_query_log = 1\nslow_query_log_file = mysql-slow.log\nlong_query_time = 1.0\nlog_queries_not_using_indexes = 0\n\n# General Log\ngeneral_log = 1\ngeneral_log_file = mysql-general.log\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[client]\ndefault-character-set = utf8mb4</code></pre><p><br></p><h2 id=\"h067ee63297\"> MySQLコンテナを起動する</h2><p>MySQLのコンテナの準備が出来たので、また実際に起動してみます。<br><br>docker-sompose.ymlのあるディレクトリで以下のコマンドを実行します。</p><pre><code>$ docker-compose up -d --build\n\n$ docker-compose ps\nNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SERVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS\ndocker_sample-app-1&nbsp;&nbsp;\"docker-php-entrypoi…\"&nbsp;&nbsp;app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9000/tcp\ndocker_sample-db-1&nbsp;&nbsp;\"docker-entrypoint.s…\"&nbsp;&nbsp;db&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:3306-&gt;3306/tcp\ndocker_sample-web-1&nbsp;&nbsp;\"/docker-entrypoint.…\"&nbsp;&nbsp;web&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:8081-&gt;80/tcp</code></pre><p><br>api（PHPのコンテナ）、web（nginxのコンテナ）、db（MySQLのコンテナ）の3つが起動できました。<br></p><h3 id=\"h42e7c9d39f\">コンテナの動作確認</h3><p>MySQLのバージョンを確認します。<br></p><pre><code>$ docker compose exec db mysql -V\nmysql&nbsp;Ver 8.0.28 for Linux on x86_64 (MySQL Community Server - GPL)</code></pre><p><br>※この後Laravelのプロジェクトを作成したら、このDBとLaravelを接続します。<br>そしてマイグレーションを行ってDBにテーブルを作成してから、MySQLにログインしてDBを使う動作確認をしたいと思います。<br></p><h1 id=\"hd865058a4e\"> Laravelのインストール</h1><h2 id=\"h6742e995c9\"> Laravelプロジェクトの作成</h2><p><br>LEMP環境が構築できたので、Laravelのアプリケーションを作っていきます。<br><br>appコンテナに入り、Laravelをインストールします。<br></p><pre><code>$ docker compose exec app bash\n[app]:/app$ composer create-project --prefer-dist \"laravel/laravel=8.*\" .\n[app]:/app$ php artisan -v\nLaravel Framework 8.81.0</code></pre><p><br>コンテナ内の/app配下にLaravelのプロジェクトが新規作成され、ホスト側の/src配下にも同じくLaravelのプロジェクトが出来ました。<br><br><code>localhost:8081</code>にアクセスして、ブラウザでもLaravelのウェルカムページが表示できることを確認します。  <br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6328bcf6dfe64db7aff89f42adf30e00/laravel.jpeg\" alt=\"\"></p><h2 id=\"h33b0e81c46\"> DB接続</h2><p>appコンテナ（Laravel）からdbコンテナ（MySQL）へ接続する設定を行います。<br><br>Laravelではデータベースへの接続設定を <code>.env</code> ファイルに定義しているので、 <code>/src/.env</code> のDBの部分を以下のように修正します。   <br></p><pre><code>DB_CONNECTION=mysql\nDB_HOST=db&nbsp;&nbsp;// MySQLコンテナのサービス名\nDB_PORT=3306\nDB_DATABASE=database\nDB_USERNAME=root\nDB_PASSWORD=passwor</code></pre><p><br></p><ul><li>  <code>DB_HOST</code>はMySQLコンテナのサービス名を指定します。 </li><li> その他の項目もMySQLコンテナで設定した値（今回はdocker-compose.ymlのenviromentで定義）と同じ値を指定します。</li></ul><p><br>DBに接続出来ているか確認する為、以下のコマンドを実行してマイグレーションを行います。<br></p><pre><code>$ docker compose exec app bash\n[app]:/app$ php artisan migrate\nMigration table created successfully.\nMigrating: 2014_10_12_000000_create_users_table\nMigrated:&nbsp;2014_10_12_000000_create_users_table (55.42ms)\nMigrating: 2014_10_12_100000_create_password_resets_table\nMigrated:&nbsp;2014_10_12_100000_create_password_resets_table (51.11ms)\nMigrating: 2019_08_19_000000_create_failed_jobs_table\nMigrated:&nbsp;2019_08_19_000000_create_failed_jobs_table (45.12ms)\nMigrating: 2019_12_14_000001_create_personal_access_tokens_table\nMigrated:&nbsp;2019_12_14_000001_create_personal_access_tokens_table (75.74ms)</code></pre><p><br></p><h2 id=\"hf98e955142\"> MySQLを使ってみる</h2><p>MySQLのコンテナに入ってDBを確認してみます。<br></p><pre><code>$ docker-compose exec db bash\n[db]:/$ mysql -u root -p\n// パスワードを求められるので入力\n[db] mysql&gt; use database;\n[db] mysql&gt; show tables;\n+------------------------+\n| Tables_in_database&nbsp;&nbsp;&nbsp;|\n+------------------------+\n| failed_jobs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\n| migrations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\n| password_resets&nbsp;&nbsp;&nbsp;&nbsp;|\n| personal_access_tokens |\n| users&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|\n+------------------------+\n5 rows in set (0.00 sec)</code></pre><p><br>先ほどマイグレーションを実行したので、Laravelのデフォルトで用意されているマイグレーションファイル通りにテーブルが作成されていることが確認できました。<br></p><h2 id=\"h9b4c4b9dd7\"> 最後に</h2><p>これでDocker（Docker Compose）を使ったLEMP環境の構築が完了です。<br><br>今回作成した環境は非常にシンプルなものなので、業務で使うとなるともっと設定を細やかに行ったり、開発環境・ステージング環境・本番環境それぞれの設定ファイルを用意して設定を切り替えたりといった作業が必要になるかと思いますが、仕組みが分かればあとは全てこの延長にあるのかなと思います。<br><br>またいずれ環境ごとの設定ファイル切り替えだったり、あとはNodeのコンテナを使ってNext.jsの環境構築もやってみたいです。<br></p><h2 id=\"h3937880ed1\"> 参考記事</h2><p><br><a href=\"https://yutaro-blog.net/2021/04/29/docker-laravel-vuejs-2/\" target=\"_blank\" rel=\"noopener noreferrer\">https://yutaro-blog.net/2021/04/29/docker-laravel-vuejs-2/</a><br><br><a href=\"https://yutaro-blog.net/2021/04/30/docker-laravel-vuejs-3/#index_id11\" target=\"_blank\" rel=\"noopener noreferrer\">https://yutaro-blog.net/2021/04/30/docker-laravel-vuejs-3/#index_id11</a><br><br><a href=\"https://qiita.com/ucan-lab/items/56c9dc3cf2e6762672f4\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/ucan-lab/items/56c9dc3cf2e6762672f4</a><br></p>","tags":[{"id":"docker","createdAt":"2022-02-12T02:32:18.767Z","updatedAt":"2022-02-12T10:02:36.384Z","publishedAt":"2022-02-12T02:32:18.767Z","revisedAt":"2022-02-12T10:02:36.384Z","tag":"Docker"},{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"},{"id":"php","createdAt":"2022-01-07T13:16:36.618Z","updatedAt":"2022-02-12T02:31:46.498Z","publishedAt":"2022-01-07T13:16:36.618Z","revisedAt":"2022-01-07T13:16:36.618Z","tag":"PHP"}],"image":"docker"},{"id":"nextjs-router-query","createdAt":"2022-02-12T10:12:00.712Z","updatedAt":"2022-02-12T10:24:05.297Z","publishedAt":"2022-01-25T10:12:00.000Z","revisedAt":"2022-02-12T10:21:40.124Z","title":"Next.jsのrouter.queryでURLの動的パラメータを取得するときの注意","body":"<p>業務で、useEffect内でNext.jsのuseRouterを使ってクエリパラメータを取得しようとした際、意図する通りの挙動をしておらず戸惑ったので備忘録としてまとめておきます。<br><br>通常<strong>pages/blogs/[id].tsx</strong>のようなファイルにおいてAPIからデータを取得したい場合、<code>getStaticPaths</code>・<code>getStaticProps</code>を使うかと思いますが、今回は画面描画してからバックグラウンドでAPIリクエストを行ってデータ取得する必要があり、そこで見つけたのが<code>useRouter</code>の<code>router.query</code>でした。 <br></p><h2 id=\"h5752334b14\"> useRouterとは</h2><p>そもそもuseRouterとは、Next.jsが用意しているhooksの一つで、routeに関する色んな情報を持つrouterオブジェクトへのアクセスを提供するものです。<br></p><blockquote> アプリの関数コンポーネント内の<code>router</code>オブジェクトにアクセスする場合は、<code>useRouter</code>フックを使用できます。   <br><code>useRouter</code>はReactフックです。  <br>&nbsp;<a href=\"https://nextjs.org/docs/api-reference/next/router#userouter\" target=\"_blank\" rel=\"noopener noreferrer\">https://nextjs.org/docs/api-reference/next/router#userouter</a> </blockquote><p><br>routerオブジェクトはいくつもの便利なメソッドやプロパティを持ちますが、その中のひとつにqueryがあります。<br></p><h2 id=\"h6a9e501b40\"> router.queryの使い方</h2><p>&nbsp;<code>router.query</code> とするだけで、オブジェクト形式で動的ルーティングの中身を取得できます。  <br><br>ちなみに以下の例のようにクエリパラメータが数字の場合も、string型で取得されます。<br> </p><pre><code>import { useRouter } from 'next/router'\n\n// 関数コンポーネント内にて\n&nbsp;const router = useRouter()\n&nbsp;console.log(router.query)\n&nbsp;console.log(router.query.id)\n\n// 出力結果(localhost:3000/blogs/1 の場合)\n// { id: '1' }\n// 1</code></pre><p><br></p><h2 id=\"h970271505b\"> useEffect内でrouter.queryを使ってみる</h2><p><code>pages/blogs/[id].tsx</code>の<code>useEffect</code>内で<code>router.query</code>を使ってみます。<br></p><pre><code>const router = useRouter()\n\nuseEffect(() =&gt; {\n&nbsp;const routeId = router.query.id\n&nbsp;console.log(routeId)\n}, [])\n\n// undefined </code></pre><p><br>出力されたのは <code>undefinde</code> でした。  <br><br>どうやら、router.queryの取得は<code>useEffect</code>の発火タイミングより後のようです。<br><br>【注】ただし、チームの中には上記のコードでもundefindeにならずqueryが取れている方もいましたし、私の環境でも時によってはqueryが取れることもありました。いずれにせよ不安定なものと思われるので、以下の対処をしておくのが無難なのかなと思います。<br>（ご存じの方はぜひご指導・ご指摘ください…！）<br></p><h3 id=\"hc1efd68684\"> useEffectの依存配列にrouterを指定する</h3><p>依存配列に<code>router</code>を入れてみました。<br></p><pre><code>const router = useRouter()&nbsp;\n\nuseEffect(() =&gt; {\n&nbsp;const routeId = router.query.id\n&nbsp;console.log(routeId)\n}, [router])\n\n// 出力結果(localhost:3000/blogs/1 の場合)\n// undefined\n// 1</code></pre><p><br>すると、一度<code>undefinde</code>と出た後に<code>query</code>が取れてコンソールに出力されました。<br><br>これで目的を果たせる場合もあるかもしれません。<br><br>しかし今回私が実装したかった要件は、取得したルートパラメーターを使ったパスでAPIへリクエストを送るというものです。<br>undefinedを取得してしまうと <code>'/api/blogs/undefined'</code>のパスにリクエストを送ってしまい、これは不都合でした。  <br></p><h3 id=\"h2f530575d0\"> isReadyを使ってrouter情報が準備されているか判別する</h3><p>辿り着いたコードは以下の通りです。<br> </p><pre><code>const router = useRouter()\n\nuseEffect(() =&gt; {\n&nbsp;if (router.isReady) {\n&nbsp;&nbsp;const routeId = router.query.id\n&nbsp;&nbsp;console.log(routeId)\n&nbsp;}\n}, [router])\n\n// 出力結果(localhost:3000/blogs/1 の場合)\n// 1</code></pre><p><br>routerオブジェクトの持つ <code>isReady</code> というboolean値が最適でした。  <br></p><blockquote> <code>isReady</code>：<code>boolean</code>　ルーターフィールドがクライアント側で更新され、使用できる状態になっているかどうか。<code>useEffect</code>メソッド内でのみ使用する必要があり、サーバーで条件付きでレンダリングするためには使用しないでください。    <br>&nbsp;<a href=\"https://nextjs.org/docs/api-reference/next/router#router-object\" target=\"_blank\" rel=\"noopener noreferrer\">https://nextjs.org/docs/api-reference/next/router#router-object</a> </blockquote><p><br></p><h2 id=\"hf6e0a9e212\"> なぜundefindeが取得されていたのか</h2><p>queryの取得タイミングはuseEffectの発火よりも後なのだということは何となく察しましたが、どういう仕組みなのか気になります。<br><br>Next.jsのドキュメントのダイナミックルーティングについての箇所に、以下のように書かれていました。<br></p><blockquote> Pages that are statically optimized by [Automatic Static Optimization](https://nextjs.org/docs/advanced-features/automatic-static-optimizat<a href=\"https://nextjs.org/docs/advanced-features/automatic-static-optimization\" target=\"_blank\" rel=\"noopener noreferrer\">Automatic Static Optimization</a> <br> After hydration, Next.js will trigger an update to your application to provide the route parameters in the <code>query</code> object.  </blockquote><p><br>Pre-renderingの間はqueryは空のオブジェクトであり、hydrationのプロセスが終わった段階でqueryオブジェクトが提供されると書いてあります。<br><br>getStaticPropsやgetSererSidePropsの処理が終わるまでは、queryは空なのですね。<br><br>hydrationという単語は初めて知りましたが、Next.jsの公式の図を見るとイメージは湧きました。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/a9c4b88b0bb24532bb598719b0bf4137/pre-rendering.png\" alt=\"\"><br><br></p><h2 id=\"h3937880ed1\"> 参考記事</h2><p><a href=\"https://zenn.dev/kiyokiyoabc/articles/d3a8464367094a\" target=\"_blank\" rel=\"noopener noreferrer\">https://zenn.dev/kiyokiyoabc/articles/d3a8464367094a</a><br><br><a href=\"https://zenn.dev/luvmini511/articles/1523113e0dec58\" target=\"_blank\" rel=\"noopener noreferrer\">https://zenn.dev/luvmini511/articles/1523113e0dec58</a><br></p>","tags":[{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"react"},{"id":"notion-blog","createdAt":"2022-02-12T11:09:01.126Z","updatedAt":"2022-02-12T11:09:56.858Z","publishedAt":"2022-01-09T11:09:01.000Z","revisedAt":"2022-02-12T11:09:56.858Z","title":"Notion BlogをヘッドレスCMSとして、Next.jsで個人ブログを作ってみた","body":"<h2 id=\"h8d027c8ed3\">はじめに</h2><p>年末年始1週間の自由研究として、Next.jsを使って何か作ってみたい…ということで、NotionをヘッドレスCMSとした個人ブログを作ってみました。<br><br>せっかくなので制作日記として、</p><ul><li> 作ったものを紹介</li><li> Notion Blogについて</li><li> Next.js（React）を使って自分で実装した機能</li></ul><p>などまとめておきたいと思います。<br><br>※ヘッドレスCMSとは…従来型のCMS（WordPress等）は入稿画面・DB・表示画面をまとめて管理するのに対し、ここから表示画面を除いたもの。ヘッドレスCMSでは、API経由で取得したコンテンツを基にフロントエンド部分は自前で実装する必要がある。<br></p><h2 id=\"he961b4efa4\">制作物について</h2><p>実際に作ったものがこちらです。<br><a href=\"https://hinako-blog.vercel.app/blog\" target=\"_blank\" rel=\"noopener noreferrer\">Hinako Blog | My Profile</a><br></p><h3 id=\"h0d376e5d4e\">構成</h3><p>構成を簡単に説明すると、<br></p><ul><li>Notion上にブログ記事を保管するDBを作り、Notionで記事を執筆</li><li>Next.jsのgetStaticPropsでNotionのAPIを叩いてブログコンテンツを取得</li><li>Next.jsでレスポンスを成形してビューに表示</li></ul><p><br>という感じです。<br><br>NotionのAPIを叩いてレスポンスを成形する部分は、Notion Blog（詳しくは後述）というOSSのテンプレートをベースに使わせていただきました。<br>デプロイはVercelで行いました。<br></p><h3 id=\"had81f6e58c\">実装した機能</h3><ul><li>MITライセンスのOSSとして公開されているNotion Blog（Vercel社のJJ Kasperさん作）をベースに使用</li><li>DBにcategoryのカラムを追加し、NotionのAPIからのレスポンスの成形やビューへの表示をカスタマイズ</li><li>フロント側での「カテゴリーの選択」「投稿した月の選択」「フリーキーワードによる検索」によるリアルタイム検索機能</li><li>記事のカテゴリーに応じてReact iconsでアイコンを表示する</li><li>CSS Modules</li><li>UIパーツのコンポーネント化</li><li>propsやstateの値により、条件付きレンダリングを行ったりCSSを動的に切り替える</li></ul><p><br></p><h2 id=\"h5043d0744e\">Notion Blogについて</h2><p>ベースに使用したNotion Blogというのは、NotionのAPIを叩いてNotionからコンテンツを取得しNext.jsでビューを作ったテンプレートです。<br><br>GitHub：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog</a><br>公式のサンプルページ：<a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/</a><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/007ccf5040c24c7dad664d036d40997e/notion-blog.png\" alt=\"\"><br>こんな感じでシンプルで綺麗なUIをしています。<br>コードをいじったりしなくても、DeployボタンからVercelに連携し、NotionのDBのID・Tokenを環境変数に設定してVercelでデプロイするだけで、このテンプレート通りの個人ブログが出来るというものです。<br></p><h3 id=\"h0893011e20\">Notion Blogでブログコンテンツを取得する仕組み</h3><p>あらかじめNotionで記事を登録するDB（Page, Slug, Published, Date, Authorsの5つの要素を持つインラインテーブル）を作り、このテーブルに記事を入れておきます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2df6468fd6054e47b8f1f212f7e5fa3a/table.png\" alt=\"\"><br>画像引用：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog#manually-creating-the-table\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog#manually-creating-the-table</a><br><br>Notion Blogのソースを見ると、Next.jsのgetStaticPropsでNotionのAPIを叩いてデータベースのコンテンツを取得しています。<br>使っているのは非公式のAPIで「<a style=\"color:#4aac00\" href=\"https://www.notion.so/api/v3%E3%80%8D\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.notion.so/api/v3」</a>&nbsp;というエンドポイントを叩いているようです。<br></p><h3 id=\"h814caf386c\">Notion Blogを使った理由</h3><p>Notion 公式のAPI（ベータ版）も2021年5月に公開され、OSSとして公開されているテンプレートで公式APIが使われているものもある中で、Notion Blogを選んだ理由は以下の通りです。<br></p><ul><li>公式のNotion APIはコードブロックに対応していない（もしアップデートを見落としていたらすみません。）</li><li>公式のNotion APIでは、コンテンツを取得するだけでなくAPIを使ってNotionのDBへ追加・更新・削除する機能もあるが、これらの機能は不要と思った。</li><li>Notion Blogでは、決められた5つのカラムを持つテーブルをNotionで作るだけでテンプレート通りに表示される。簡単！はやい！</li></ul><p><br>ざっくりいうと、<strong>とりあえず最速・簡単な方法で小さく作って、残った時間でカスタマイズしてみよう</strong>という感じです。<br></p><h3 id=\"h2c8c89326b\">Notion Blogのセットアップ方法</h3><p>セットアップ方法は、公式サンプルのページに動画付きで分かりやすく書かれているので省略します。<br><br><a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/blog/my-first-post\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/blog/my-first-post</a><br>Deployボタンからコードを目にすることも無くデプロイすることも出来るようですが、今回はAPIから受け取るレスポンスの成形やUIはカスタマイズする前提だったので、git cloneして編集したうえでデプロイしました。<br></p><h3 id=\"h1d7f1fe064\">Notion Blogを使ってみて</h3><ul><li>テンプレートのコードを読んで</li></ul><p>APIへのリクエストを行うメソッドのファイル切り分け・ディレクトリ構成が分かりやすく、カスタマイズしやすかったです。<br>Next.jsのダイナミックルーティングを使う際に、ヘッダのメタ情報を出しわける書き方も初めて見て勉強になりました。<br><br>ここからは、ブログ記事をブラウザで表示した時の見え方についてです。<br></p><ul><li>画像・動画の挿入</li></ul><p>簡単に挿入できるものの、画像のアスペクト比が若干おかしくなっていました…。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/be464a17a7d74abe9afdcd84d268199b/%E7%94%BB%E5%83%8F%E5%8B%95%E7%94%BB.png\" alt=\"\"><br><br><br>動画はNotionで見たまま反映され、再生速度の調整まで出来るのでこれはスゴイ！感激でした。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/f1847b01ffc84d62a89559fd86c389ce/%E5%8B%95%E7%94%BB.png\" alt=\"\"><br></p><ul><li>コードブロックの挿入</li></ul><p>公式APIでは対応していないコードブロックも、非公式APIを使っているNotion Blogでは表示できました。<br>文字色のCSSなんかも自由にカスタマイズできます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/20ed291c84c841a8a67807a6c96c2514/%E3%82%B3%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF.png\" alt=\"\"><br><br>ただしNotion Blogで使っているのは非公式APIなので、<br></p><ul><li>動作が不安定（実際、稀にコンテンツが取得できないという事が起こりました。）</li><li>今後このAPIが使えなくなる可能性もある</li><li><br></li></ul><p>というデメリットはあると思われます。<br></p><h2 id=\"hafa005fc12\">自分で実装した機能</h2><p>自分で追加実装した機能や、その他使用技術について書いていきます。<br></p><h3 id=\"h604b8042b8\">検索機能</h3><p>カテゴリーで絞り込み・投稿月で絞りこみ・フリーキーワード検索の機能を実装しました。<br><br>ページ上部<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/5d8f8a862a3344fc8fe16447103ba0f6/%E3%83%9A%E3%83%BC%E3%82%B8%E4%B8%8A%E9%83%A8.png\" alt=\"\"><br><br>フッター<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2cd3e007541943cb82954cf062c40479/%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC.png\" alt=\"\"><br><br>【実装手順】<br>①　APIから取得したブログコンテンツに存在するカテゴリーを配列に格納して、記事が存在する分のカテゴリーボタンを表示。投稿月についても同様。<br>②　ボタンを押したときや検索欄に入力をした際に発火する絞り込み処理を実装。<br><br>フロント側で保持している記事データに対して絞り込みを行い表示を切り替える機能なので、リロードなく瞬時に表示が切り替わります。<br>検索機能の書き方は非常に勉強になったので、別記事にまとめようと思います。<br></p><h3 id=\"hc06cf54a32\">React Icons</h3><p>記事のカテゴリーに応じてアイコンを表示しました。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6d8cb6b91d2740649bcd296b5d054bf6/react-icon.png\" alt=\"\"><br><br><br>アイコンといえばFontAwesomeと思っていましたが、React用のライブラリがありました。<br><a href=\"https://react-icons.github.io/react-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">React Icons</a><br><br>このライブラリをインストールすると、Font Awesome や Material、Typicons、Codicons（VSCode のアイコン）など色んな種類のアイコンを簡単に利用することができます。<br>使い方は以下の記事を参考にさせて頂きました。<br><br><a href=\"https://zenn.dev/taichifukumoto/articles/how-to-use-react-icons\" target=\"_blank\" rel=\"noopener noreferrer\">React でアイコンを使うなら React Icons がおすすめ</a><br></p><h3 id=\"h5a4cb7eb5d\">CSS Modules</h3><p>CSSは、Notion BlogでCSS Modulesが使われていたので、そのままCSS Modulesを使いました。<br><strong><code>.module.css</code></strong>&nbsp;で定義したクラス名がそのまま付与されるのではなく、実際はユニークなクラス名が自動的に生成されて付与されることも検証ツールで確認できて、勉強になりました。<br><br>Reactのプロジェクト下でのCSSといえば代表的な選択肢は、CSS Modules、styled-component、Tailwindあたりなのかと思いますが、それぞれの違いやメリットデメリットについては正直勉強不足です。。<br><a href=\"https://kenzoblog.vercel.app/posts/css-manage\" target=\"_blank\" rel=\"noopener noreferrer\">styled-components, CSS Modules について調べたのでまとめる</a><br><br>業務ではTailwindを使っており、今回初めてCSS Modulesを使い、両者の個人的な感想を書いておきます。<br></p><ul><li>Tailwind</li></ul><p>ファイルの行き来をせずスタイルを確認できて便利。小規模なプロダクトに向いていそう。<br></p><ul><li>CSS Modules</li></ul><p>コンポーネント単位でスタイルをまとめるという思想なので、コンポーネント指向のReactとの相性は良い（のだと思う）。<br>スタイルの共通化がしやすくスッキリ整理整頓されている感じで、使いやすかった。<br></p><h2 id=\"hf32963c38a\">全体の感想</h2><p>長くなってきたので細かい実装については書きませんが、「実装したい機能がある→どうやったら実現できるか調べる」というプロセスでReact・JavaScriptの書き方も色々勉強になりました。<br><br>今回NotionをヘッドレスCMSとして使ってみて、フロントエンドを自前で作るという事は見た目を自由に作れるだけでなく、SG・SSRを使って機能性の高いサイトを作ることが出来ることが大きなメリットだと感じました。<br>先輩に良いアドバイスもいただいたので、今度はまた他のヘッドレスCMSのサービスを使って個人ブログを作ってみたいなと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">Home | My Notion Blog</a><br><br><a href=\"https://zenn.dev/st43/articles/7982e6d371f8b8#notion-api%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E4%B8%80%E8%A6%A7\" target=\"_blank\" rel=\"noopener noreferrer\">現在のNotion API（2021/7/13）で何がどこまでできるか</a><br><br><a href=\"https://zenn.dev/st43/articles/9a714916c50b80#%E3%81%BE%E3%81%A8%E3%82%81\" target=\"_blank\" rel=\"noopener noreferrer\">notion-blogで無料の個人ブログをつくってみました</a><br></p>","tags":[{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"notion"},{"id":"react-typescript","createdAt":"2022-02-12T10:20:56.912Z","updatedAt":"2022-02-17T13:33:23.975Z","publishedAt":"2022-01-16T10:20:56.000Z","revisedAt":"2022-02-12T10:21:12.181Z","title":"React×TypeScript　基本の型定義","body":"<h2 id=\"h04bc4be39a\"> はじめに</h2><p>業務でフロント側はReact（Next.js）, TypeScriptを使っているのですが、配属当初の私はReactにもTypeScriptにも触れたことが無く、何が分からないのか分からない状態でした。<br><br>TypeScriptの基礎を学んでもReact特有の型定義があり戸惑いましたが、ようやく理解して書けるようになって来たな…ということで、辞書代わりにまとめておきます。<br>（誤りのご指摘・アドバイスがあればぜひお願いします！）<br></p><h1 id=\"h2e4995e418\"> 基礎編</h1><p>まずは基本の型定義を一通り挙げます。<br></p><h2 id=\"hd817cee2b9\"> 関数コンポーネント</h2><p>関数コンポーネントでは、普通の関数と同じように引数（props）に型付けします。<br><br>戻り値はJSX要素を返せば型推論されるので、明らかな場合は型付けしなくてOKです。<br><br>※以下の例では、propsは分割代入の書き方で受け取るものとします。<br></p><h3 id=\"h480940b7cc\"> 引数（props）なしの場合</h3><p>propsを受け取らない場合は、JavaScriptで記述するときと変わりません。<br></p><pre><code>// ノーマルの関数コンポーネント（引数なしの場合）\nconst App = () =&gt; &lt;div&gt;なまえ&lt;/div&gt;</code></pre><p><br></p><h3 id=\"h40e5e6f6fd\"> ひとつのpropsを受け取る</h3><pre><code>// 引数に型付けする\nconst App = ({ name }: { name: string }) =&gt; &lt;div&gt;{name}&lt;/div&gt;\n\n// 型エイリアスを使っても良い\ntype Props = { name: string }\nconst App = ({ name }: Props) =&gt; &lt;div&gt;{name}&lt;/div&gt;</code></pre><p><br>型注釈を直接つけても、型エイリアスを使ってもOKです。<br><br>プロジェクト内で合わせておけば良いかと思います。<br></p><h3 id=\"h2ac392abf5\"> 複数のpropsを受け取る</h3><p>propsを複数受け取る場合は、型注釈を直接つけるよりも型エイリアスを付けた方が分かりやすいでしょう。<br></p><pre><code>// 引数が複数なら、型エイリアスを使う方が見やすい\ntype Props = {\n&nbsp;name: srting\n&nbsp;onClick: () =&gt; void\n&nbsp;children: ReactNode\n}</code></pre><p><br></p><h3 id=\"h5f171d61d9\"> propsの型いろいろ</h3><p>以下のように色々な型の値をpropsとして受け取ることができます。<br>ここはほとんどTypeScriptの基本通りです。<br></p><pre><code>// propsとして受け取る値の型定義色々\ntype Props = {\n&nbsp;str: string&nbsp;&nbsp;&nbsp;&nbsp;// 文字列\n&nbsp;num: number&nbsp;&nbsp;&nbsp;&nbsp;// 数値\n&nbsp;bool: boolean&nbsp;&nbsp;&nbsp;// 真偽値\n&nbsp;strArr: string[]&nbsp;&nbsp;// 配列\n&nbsp;obj: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// オブジェクト\n&nbsp;&nbsp;str: string\n&nbsp;}\n&nbsp;objArr: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// オブジェクトの配列\n&nbsp;&nbsp;str: string\n&nbsp;&nbsp;num: number\n&nbsp;}[]\n&nbsp;func: () =&gt; void&nbsp;&nbsp;// 関数\n}</code></pre><p><br></p><h3 id=\"ha7733746f8\"> children</h3><p>childrenはコンポーネントのタグで囲った子要素をpropsとして受け取るときに使います。<br><br>よく使うのはReactNodeで、これはコンポーネントタグで囲ったJSX要素をまるっと受け取る場合に使います。<br></p><pre><code>// 共通レイアウトのコンポーネント\nconst MainLayout = ({ children }: { children: React.ReactNode }) =&gt; {\n&nbsp;return (\n&nbsp;&nbsp;&lt;&gt;\n&nbsp;&nbsp;&nbsp;&lt;Header /&gt;\n&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;{children}\n&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&lt;Footer /&gt;\n&nbsp;&nbsp;&lt;/&gt;\n&nbsp;)\n}\n\n// 呼び出し側\nconst MenuPage = () =&gt; {\n&nbsp;return (\n&nbsp;&nbsp;&lt;MainLayout&gt;\n&nbsp;&nbsp;&nbsp;// この中にページの内容を書く\n&nbsp;&nbsp;&lt;/MainLayout&gt;\n&nbsp;)\n}</code></pre><p><br>もし特定の文字列や数値しか受け取らないというような場合は、ReactNodeではなく特定の型に制限することもできます。<br></p><pre><code>// Buttonコンポーネント\nconst Button = ({ children }: { children: string }) =&gt; {\n&nbsp;return (\n&nbsp;&nbsp;&lt;button&gt;{children}&lt;/button&gt;\n&nbsp;)\n}\n\n// 呼び出し側\nconst App = () =&gt; {\n&nbsp;return (\n&nbsp;&nbsp;&lt;&gt;\n// フォームの記述があるとする\n\n&nbsp;&nbsp;&nbsp;&lt;Button&gt;送信&lt;/Button&gt;\n&nbsp;&nbsp;&nbsp;&lt;Button&gt;戻る&lt;/Button&gt;\n&nbsp;&nbsp;&lt;/&gt;\n&nbsp;)\n}</code></pre><p><br>ちなみにReactNodeは以下の通りのUnion型で定義されています。<br></p><pre><code>type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;</code></pre><p><br></p><h3 id=\"h31df23c0b3\"> propsのデフォルト値を指定する</h3><p>コンポーネントの利用箇所ごとにpropsに渡す値を指定してもよいのですが、デフォルト値を指定することもできます。<br>よく指定される値がある時や、値が無かった場合の値を決めておきたい場合に有効です。<br></p><pre><code>const Name = ({ name = \"ゲスト\" }: { name?: string }) =&gt; &lt;div&gt;{name}さん&lt;/div&gt;</code></pre><p><br></p><h3 id=\"h5be2f009d7\"> オプショナルなprops（undefined許容）</h3><p><code>?</code> を付けることでオプショナルな型定義が出来ます。  <br>以下のように書いた場合、name・emailの型は<code>string | undefined</code>となります。  <br></p><pre><code>type Props = {\n&nbsp;name?: string\n&nbsp;email?: string\n}</code></pre><p><br>この場合はundefinedの可能性を考慮してpropsの初期値を設定するか、値の有無による条件分岐を行います。<br></p><pre><code>// nameは初期値を設定、emailはpropsの値が渡された場合のみ表示する\nconst Button = ({ name = 'ゲスト', email }: Props) =&gt; {\n&nbsp;return (\n&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&lt;p&gt;{name}さん&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;{email &amp;&amp; (\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;email:{email}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;)}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;)\n}</code></pre><p><br></p><h3 id=\"h61a1261837\"> 戻り値の型付け</h3><p>JSX要素を返せば型を指定していなくても推論してくれますが、明示しておけば正しい値が返されなかった場合エラーを表示してくれます。<br></p><pre><code>const App = ({ name }: { name: string }): JSX.Element =&gt; &lt;div&gt;{name}&lt;/div&gt;;</code></pre><p><br></p><h3 id=\"h40fc68507d\"> React.FC / VFC</h3><p>React.FC / VFC については、TypeSctriptを導入するのであれば不要と考えられるのでここでは取り上げません。（今の私の業務では使っていないのですが、もしなにか誤りやアドバイスがあれば是非ご教授ください…！）<br>参考記事：<a href=\"https://kray.jp/blog/dont-have-to-use-react-fc-and-react-vfc/\" target=\"_blank\" rel=\"noopener noreferrer\">【検証】React.FC と React.VFC はべつに使わなくていい説</a> <br></p><h2 id=\"h2e72b92d37\"> useState　状態変数の型</h2><h3 id=\"hde697c111e\"> 型推論に任せる</h3><p>useStateフックでは初期値を与えれば状態変数の型を推論してくれます。<br>なので極力初期値を与えて、推論させるようにします。<br></p><pre><code>// プリミティブ値\nconst [name, setName] = useState(\"\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// string型\nconst [count, setCount] = useState(0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// number型\nconst [isChecked, setIsCheked] = useState(false)&nbsp;&nbsp;// boolean型\n\n// 配列\nconst [colors, setColors] = useState([\"red\", \"blue\"])&nbsp;&nbsp;// string型の配列\nconst [numbers, setNumbers] = useState([1, 2, 3])&nbsp;&nbsp;&nbsp;&nbsp;// number型の配列</code></pre><p><br></p><h3 id=\"h6b88d1350c\"> ジェネリック型で指定する</h3><ul><li> 基本の指定方法</li></ul><p>useStateの状態変数に対して明示的に型を指定する場合は、ジェネリック型 <code>&lt;T&gt;</code> を使います。  <br></p><pre><code>// useStateのジェネリック型&lt;T&gt;に明示的に型を指定する\nconst [name, setName] = useState&lt;string&gt;(\"\")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// string型\nconst [count, setCount] = useState&lt;number&gt;(0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// number型\nconst [isChecked, setIsChecked] = useState&lt;boolean&gt;(false)&nbsp;&nbsp;// boolean型</code></pre><p><br></p><ul><li> 別途定義した型をジェネリック型で指定する</li></ul><p>別途定義したオブジェクトを初期値にしたり、別途定義した型をジェネリック型で指定することもできます。<br>（型や初期値を複数のコンポーネントで使い回す場合や情報量が多くなる場合は、別ファイルに切り出しても良いかと思います。）<br></p><pre><code>const initialUser = {\n&nbsp;number: 1,\n&nbsp;name: '名前',\n&nbsp;email: 'test@mail.com'\n}\n\ntype User = {\n&nbsp;number: number\n&nbsp;name: string\n&nbsp;email: string\n}\n\nconst [user, setUser] = useState&lt;User&gt;(initialUser)</code></pre><p><br></p><ul><li> ユニオン型でnullを含める </li></ul><p>値がnullの可能性があるときや、型は定めておきたいが初期値は後から決まるといった場合は、ユニオン型でnullを含めます。<br></p><pre><code>// nullを含む場合はユニオン型を用いる\nconst [count, setCount] = useState&lt;number | null&gt;(null)&nbsp;&nbsp;// number型もしくはnull型</code></pre><p><br></p><ul><li> 型アサーションを使う</li></ul><p>状態変数の初期値が決まらないけれどnullは許可しないという場合には、型アサーションを使うことができます。<br><br>まず、以下の書き方ではエラーが出ます。<br></p><pre><code>type User = {\n&nbsp;number: number\n&nbsp;name: string\n&nbsp;email: string\n}\n\nconst [user, setUser] = useState&lt;User&gt;({})\nuser[name] = 'ゲスト'\n\n// userは「空のオブジェクト型」とTypeScriptは認識するのでコンパイルエラーになる</code></pre><p><br>そこで有効なのが型アサーションです。<br></p><pre><code>type User = {\n&nbsp;number: number\n&nbsp;name: string\n&nbsp;email: string\n}\n\nconst [user, setUser] = useState&lt;User&gt;({} as User)\n\n// 型アサーションを使えばコンパイルエラーが出ない</code></pre><p><br>ただし型アサーションはTypeScriptに型を偽っているだけなので、もし必要なプロパティを忘れていてもコンパイラエラーが指摘してくれないので、なるべく初期値を設定して型アサーションを使わずに済む実装にした方がベターです。<br><br>もし全てのプロパティが任意ならば、初期値に空オブジェクトを与えても問題ないので型アサーションは必要ありません。<br></p><pre><code>type User = {&nbsp;\n&nbsp;name?: string\n&nbsp;email?: string\n&nbsp;age?: number\n}\n\nconst [user, setUser] = useState&lt;User&gt;({})\n\n// userはUser型のうち任意のプロパティを持つ（空オブジェクトの可能性もある）</code></pre><p><br></p><h2 id=\"h6553d2c03c\"> useEffect</h2><p>useEffectの戻り値は <code>undefined</code> もしくはクリーンアップ関数と決められており、戻り値を処理しないため型は必要ありません。  <br><br>ただし関数や値を返してしまうとエラーになるので、アロー関数の書き方に注意が必要です。<br><br>以下の書き方では、アロー関数式<code>=&gt;</code>の本体に波括弧<code>{}</code>なしに1行で書いた文が戻り値になってしまいます。   <br></p><pre><code>useEffect(() =&gt;&nbsp;\n&nbsp;setTimeout(() =&gt;&nbsp;\n&nbsp;&nbsp;// 処理\n&nbsp;, 1000);\n, []);</code></pre><p><br>以下のように、本体を <code>{}</code> で囲むようにしてください。  <br></p><pre><code>useEffect(() =&gt; {\n&nbsp;setTimeout(() =&gt; {\n&nbsp;&nbsp;// 処理\n&nbsp;}, 1000);\n}, []);</code></pre><p><br></p><h2 id=\"h7cf02dc148\"> イベントオブジェクトの型</h2><p>onClickやonChangeといったイベントハンドラで扱うイベントにも型があります。<br><br>イベントオブジェクトの型を知りたいときは、VSCodeがヒントをくれます。<br><br>例えばonClickなら、以下の状態でonClickの上にマウスをホバーさせると型情報を表示してくれます。<br></p><pre><code>&lt;button onClick={}&gt;&lt;/button&gt;</code></pre><p><br>以下のように要素のイベント属性に直接イベントハンドラを書く場合は、引数のイベントの型は推論されるので注釈が要りません。<br></p><pre><code>&lt;button onClick={(event) =&gt; //処理 }&gt;&lt;/button&gt;</code></pre><p><br>イベントハンドラの関数を別途定義する場合は、通常の関数と同様に型付けが必要になります。<br></p><h3 id=\"h745a3f474e\"> onClickイベント</h3><p>引数のイベントと戻り値に型付けをします。（戻り値は推論させてもOKです）<br></p><pre><code>// Buttonクリックの場合\nconst onClickButton = ( event: React.MouseEvent&lt;HTMLButtonElement, MouseEvent&gt; ):void =&gt; {\n&nbsp;// 処理\n}</code></pre><p><br></p><h3 id=\"hc860cddeda\"> onChangeイベント</h3><pre><code>// Inputの場合\nconst onChangeInput = ( event: React.ChangeEvent&lt;HTMLInputElement&gt;):void =&gt; {\n&nbsp;// 処理\n}</code></pre><p><br></p><h3 id=\"h0591b223f6\"> 複数種類の要素にイベントを適用する</h3><p>上記の例を見ると、ジェネリック型の部分に <code>HTMLButtonElement</code> <code>HTMLInputElement</code> とあるように特定のHTML要素のための型であることがわかります。   <br><br>もしDivタグ・Buttonタグ・Inputタグなどに同じイベントハンドラ関数を指定したい場合、通常は <code>HTMLButtonElement | HTMLInputElement | 続く...</code> と使いたい要素分の型を記述する必要があります。  <br><br>そんな時は、色んなHTML要素に共通して使える <code>HTMLElement</code> 型を使うこともできます。  <br></p><pre><code>type Props = {\n&nbsp;onClick: (event: React.MouseEvent&lt;HTMLElement, MouseEvent&gt;) =&gt; void\n}</code></pre><p><br>以下の記事に詳しくまとめられており、非常に分かりやすかったです。<br><br>個人的には、精度を高めるためには面倒でも使う要素分だけ指定する方が良いのかな…？とも思いますが、 <code>HTMLButtonElem ent</code>  も<code> HTMLInputElement</code> も<code>HTMLElement</code> 型を継承しているんだと知り、勉強になりました。<br><a href=\"https://qiita.com/Takepepe/items/f1ba99a7ca7e66290f24\" target=\"_blank\" rel=\"noopener noreferrer\">any型で諦めない React.EventCallback - Qiita</a> <br></p><h2 id=\"hadc4cddfcc\"> 【番外編】Axios</h2><p>Axiosを使って非同期通信を行う際に返されるレスポンスやエラーにも型があります。<br></p><pre><code>import { AxiosError, AxiosResponse } from 'axios'\n\naxios\n&nbsp;.get('/url')\n&nbsp;.then((response: AxiosResponse) =&gt; {\n&nbsp;&nbsp;// 成功時の処理\n&nbsp;})\n&nbsp;.catch((error: AxiosError) =&gt; {\n&nbsp;&nbsp;// エラー時の処理\n&nbsp;})</code></pre><p><br></p><h2 id=\"h691cb018bd\"> おわりに</h2><p>正直はじめは、何か書くたびにエラーが出るしコード量が増えて余計にわけわからんと思いました。<br><br>でも慣れてくると、型が明示してあると処理の流れを追わなくてもどういう値が入って来るのかパッと見でも分かりやすいし、エディタの補完が効くのは便利で間違いがあれば気付けてTypeScript良いなと思うようになりました。<br><br>今後もより実用的でスマートな型の活用法を学んでいきたいと思います。<br></p><h2 id=\"h3937880ed1\"> 参考記事</h2><p><a href=\"https://github.com/typescript-cheatsheets/react\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/typescript-cheatsheets/react</a><br><br><a href=\"https://qiita.com/sangotaro/items/3ea63110517a1b66745b#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/sangotaro/items/3ea63110517a1b66745b#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB</a><br><br><a href=\"https://qiita.com/FumioNonaka/items/4361d1cdf34ffb5a5338#%E3%83%95%E3%83%83%E3%82%AF\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/FumioNonaka/items/4361d1cdf34ffb5a5338#%E3%83%95%E3%83%83%E3%82%AF</a><br><br><br><br><br></p>","tags":[{"id":"typescript","createdAt":"2022-01-07T13:18:58.358Z","updatedAt":"2022-02-17T03:22:47.524Z","publishedAt":"2022-01-07T13:18:58.358Z","revisedAt":"2022-02-17T03:22:47.524Z","tag":"TypeScript"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"typescript"},{"id":"cors","createdAt":"2022-02-12T11:27:21.400Z","updatedAt":"2022-02-12T11:40:40.611Z","publishedAt":"2021-12-29T11:27:21.000Z","revisedAt":"2022-02-12T11:40:40.611Z","title":"同一オリジンポリシーとCORS","body":"<h2 id=\"hd92040d0df\">きっかけ</h2><p>業務で、Next.jsのフロント側からLaravelのAPIを叩いた時に<strong>CORSエラー</strong>というのが出ました。<br><br>エラー解消法はすぐに見つかったものの、セキュリティやその対策の仕組みについてはきちんと理解して実装したいと思い、色々調べたのでまとめておきます。<br></p><h1 id=\"he84d5455fa\">同一オリジンポリシー</h1><p>CORSについて理解するためには、前提として「同一オリジンポリシー」について知る必要があります。<br></p><h3 id=\"h19b65993c4\">オリジンとは</h3><p>ドメイン＋プロトコル＋ポート番号 を合わせたもの。<br><br>【例】<br>・ドメイン (domain)：yahoo.co.jp<br>・オリジン (origin)：&nbsp;<a style=\"color:#4aac00\" href=\"https://yahoo.co.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">https://yahoo.co.jp:443</a><br></p><h3 id=\"ha2aa5c29c6\">「同一オリジンである」とは</h3><p>ドメイン・プロトコル・ポート番号の全てが一致している場合のこと。<br></p><h3 id=\"h583e348ae7\">同一オリジンポリシー（Same-Origin Policy）とは</h3><p>MDNには以下のように書いてあります。<br></p><blockquote><strong>同一オリジンポリシー</strong>は重要なセキュリティの仕組みであり、ある<a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Glossary/Origin\" target=\"_blank\" rel=\"noopener noreferrer\">オリジン</a>によって読み込まれた文書やスクリプトが、他のオリジンにあるリソースにアクセスできる方法を制限するものです。<br><a style=\"color:#4aac00\" href=\"https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener noreferrer\">同一オリジンポリシー - ウェブセキュリティ | MDN</a><br><br></blockquote><p>要するに、別のオリジンへのアクセスに制限をかけることで、XSSやCSRFといった攻撃を防ぐことを目的とするセキュリティの仕組みです。<br><br>XSSとCSRFについてそれぞれの詳しい攻撃手法はここでは取り上げませんが、対策を講じる上での要点を挙げておきます。<br></p><h3 id=\"hafaeffc4cb\">XSS (Cross Site Scripting)</h3><p>ユーザーが 意図しない不正なスクリプトが&nbsp;Webサーバーに送られ、Webサーバーからのレスポンスを受け取ってしまった結果<strong>クライアント側 (Web ブラウザ)</strong>&nbsp;で実行される攻撃。<br><br>ブラウザ上で出来ることは何でも悪用対象になるので、CSRFより攻撃範囲が広い。<br></p><h3 id=\"hc9f9aae59b\"><strong>CSRF (Cross-Site Request Forgeries)</strong></h3><p>ユーザーが意図しない不正なスクリプトがWebサーバーに送られ、&nbsp;<strong>Web アプリケーション (Web サーバー)</strong>&nbsp;上で実行される攻撃。通称「しーさーふ」。<br><br>悪用内容はサーバー側で用意された処理に限定されるが、&nbsp;<strong>サーバーにリクエストが到達するだけで攻撃が成立する</strong>ので、XSS対策はできていてもCSRF対策は出来ていないということもあり得る。<br><br><br>JavaScript の組み込み API でありAjax 通信を実現する&nbsp;<code>XMLHttpRequest (XHR)</code>&nbsp;や&nbsp;<code>Fetch API</code>&nbsp;などは、これらの脆弱性を回避するため<strong>同一オリジンポリシー</strong>（別のオリジンへのアクセスに制限をかける仕組み）に従っています。<br>XSSとCSRFについての詳細は、以下の記事が分かりやすく勉強になりました。<br><a href=\"https://qiita.com/att55/items/a50ca43adde206017525\" target=\"_blank\" rel=\"noopener noreferrer\">XSS と CSRF って結局何が違うのか？ - Qiita</a><br></p><h1 id=\"h027a034520\">CORS</h1><p>同一オリジンポリシーについて抑えたところで、CORSについて見ていきます。<br></p><h2 id=\"hac1783c7e1\">CORSとは</h2><p>読み方：コルス or シーオーアールエス<br><strong>C</strong>ross-<strong>O</strong>rigin&nbsp;<strong>R</strong>esource&nbsp;<strong>S</strong>haring の略で、日本語訳すると「<strong>オリジン間リソース共有</strong>」。<br><br>CORSは、あるオリジンで動いているWebアプリケーションから別のオリジンのサーバーへのアクセスを許可する仕組みです。<br><br>同一オリジンポリシーにより別のオリジンにはアクセスが出来ないという規制があるが、Web開発・制作では異なるオリジンにアクセスしたいケースもある…　<br>そこで、同一オリジンポリシーの制約を回避・緩和してくれるのがCORSです。<br><br>歴史をたどるとCORSが必要になった経緯がさらによく分かります。<br></p><h3 id=\"h3aecdd16f5\">同一オリジンポリシーはあるが、CORSはない場合…（過去のブラウザ）</h3><p>出来たこと</p><ul><li>同一オリジンポリシーによりJavaScriptの安全性は確保される。</li></ul><p><br>生まれた課題</p><ul><li>Ajaxの普及・発展により、異なるオリジン（主に異なるホスト）のAPIを呼び出したいという動機が生まれた。</li><li>JSONPなど同一オリジンポリシーの範囲内で異なるオリジンのAPIを呼び出す方法が考案されたが、裏技のようなものであって安全性には課題が残っていた。</li></ul><p><br></p><h3 id=\"h510870a262\">そこで生まれたCORS</h3><p>上記のような課題を解決するため生まれたCORSは、以下の機能を提供します。<br></p><ul><li>クロスオリジンのアクセスを許可</li><li>オリジン単位でのアクセス制御が可能（例：オリジンA・オリジンBとの通信のみ許可する）</li><li>HTTPヘッダを用いてアクセス制御を行う</li></ul><p><br></p><h2 id=\"h922d87a02b\">CORSはどうやってクロスオリジン通信を許可するのか</h2><p>以下のように事前に通信を行う双方で設定を行っておくことで、クロスオリジンの通信が可能になります。<br></p><ul><li>クライアントサイド</li></ul><p>HTTPリクエストヘッダに<code>Originヘッダ</code>を付ける。<br><br>・XHRの場合：自動でOriginヘッダが付くので何もしなくて良い<br>・FetchAPIの場合：mode: cors を付与する<br></p><ul><li>サーバーサイド</li></ul><p>HTTPレスポンスヘッダに以下を付ける。<br>※レスポンスヘッダを付ける方法は環境によって様々です。<br>Laravelの場合は、Laravel7.0以降は<strong><code>config/cors.php</code></strong>&nbsp;を使ってCORSの設定ができます。<br><br><strong>＊必須＊</strong><br>・<code>Access-Control-Allow-Origin: アクセス元のオリジン</code><br><strong>＊必要な場合のみ＊</strong><br>・Access-Control-Allow-Credentials: true（Cookieを送信する場合は必要）<br>・Access-Control-Allow-Headers<br>・Access-Control-Request-Method<br>・Access-Control-Max-Age<br></p><h2 id=\"h6562eef876\">CORSによるアクセス制御の流れ</h2><p>実際にCORSがアクセス制御を行う流れを、ブラウザの検証ツールのネットワークを観察して確認します。<br><br>【前提】<br>・フロント側（Next.js）をlocalhost:3001、API（Laravel）をlocalhost:8080で開発中。<br>・localhost:3001のフロント側から、localhost:8080/logoutというURLにアクセスしてAPIをたたき、クロスオリジンの通信を発生させる。<br>・リクエストはXHRにより行うので、リクエストヘッダには自動的にOriginヘッダが付く。<br>・localhost:3001からのリクエストがあった場合は、レスポンスヘッダにAccess-Control-Allow-Originを載せるように、事前にAPI側で設定している。<br><br>【実際の流れ】<br>1.　ブラウザでlocalhost:3001にアクセスする。<br>2.　localhots:3001からlocalhost:8080/logoutへHTTPリクエストを送る。<br>　&lt;ポイント&gt; リクエストヘッダのOriginという項目に、リクエスト元のドメイン情報が載せられる。</p><pre><code>Origin: http://localhost:3001</code></pre><p>3.　レスポンスが返ってきたら、localhost:3001はlocalhost:8080からのレスポンスヘッダを見て、レスポンスを受け取るかどうか判断する。<br>　&lt;ポイント&gt;　レスポンスヘッダに&nbsp;<code>Access-Control-Allow-Origin</code>&nbsp;という項目があり、自分のドメイン情報（localhost:3001）が載せられていればレスポンスを受け取る。</p><pre><code>// レスポンスヘッダに以下の記載があれば、レスポンスを受け取る\nAccess-Control-Allow-Origin：http://localhost:3001</code></pre><h3 id=\"h5d7a611c3a\"><br>CORSエラーを起こしてみる</h3><p>上記の例では、事前にAPI側（Laravelのconfig/cors.php）でlocalhost:3001からのリクエストに対してAccess-Control-Allow-Originを返す設定をしていた為、クロスオリジンの通信が成立していました。<br><br>試しにAPI側で設定を行っている箇所を削除してみると、レスポンスヘッダに&nbsp;<code>Access-Control-Allow-Origin：http://localhost:3001</code>&nbsp;が無いので、CORSエラーが起こります。<br><br>ここでのエラーは、リクエスト自体は送っているけれど、レスポンスが返って来た時にそれを受け取らず<strong>レスポンスエラー</strong>ということになっています。<br></p><h2 id=\"h119f62b8ee\">プリフライトリクエスト</h2><h3 id=\"hf8c9fef3ec\">無条件でリクエストが飛んでも大丈夫なのか？</h3><p>CORSの設定をしていないとエラーが発生して通信は成立しませんでしたが、そのエラーはあくまで<strong>レスポンスを受け取らない</strong>というものでした。<br><br>しかし、そもそもリクエストが飛んで良いのか？という懸念が残ります。<br><br>代表的なリスクがCSRFです。<br>&nbsp;<strong>CSRFではレスポンスを受け取る必要は無く、リクエストが送信できれば攻撃できます。</strong><br><br>このようなリスク対策として、プリフライトリクエストが生まれました。<br></p><h3 id=\"hbcb48602bc\">プリフライトリクエストの考え方</h3><ul><li>元々CORSが無いときにできていたクロスオリジンのリクエストに対して、大幅なリスク増にならない条件であれば、XHR等で無条件にクロスオリジンのリクエストを送信できるようにした。</li><li>「大幅なリスク増にならない」条件を単純リクエストとして定義した。</li><li>単純リクエストの要件を超える場合は、実際のリクエストを送る前にプリフライトリクエストを送り、実際のリクエストを送信して問題無いか事前に確認する。</li><li>プリフライトリクエストを挟むことで、プリフライトリクエストを送信した結果Access-Control-Allow-OriginのHTTPヘッダがついたレスポンスが返されなければ、実際のリクエストは送信しない、というように悪意あるリクエストを防ぐ。</li></ul><p><br></p><h3 id=\"he303012d4a\">単純リクエスト（Simple Request）の要件</h3><p>以下の要件を全て満たす場合のみ、単純リクエストとなります。<br></p><ul><li>メソッドは「GET, POST, HEAD」のいずれか</li><li>設定できるリクエストヘッダは以下のいずれか<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type（条件付き）</li></ul></li><li>Content-Typeについては以下のいずれかを満たすこと<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data（ファイルアップロードに使う）</li></ul></li><li>text/plain（滅多に使わない）</li></ul><p><br></p><h2 id=\"ha214098e44\">まとめ</h2><ul><li>XSSやCSRFなどの対策として、他のオリジンへのアクセスを制限する「同一オリジンポリシー」という仕組みがある。</li><li>他のオリジンへアクセスしたい、でも安全性も保ちたい、、を叶えるためCORSが生まれた。</li><li>通常のCORSはレスポンスが届いたときにレスポンスを受け取るかどうかの制御を行うので、リクエスト自体は無条件に飛んでしまう。そこで不正なリクエストが送られてしまうリスク対策として、プリフライトリクエストが生まれた。</li></ul><p><br></p><h2 id=\"h3bcda3e6b0\">最後に</h2><p>エラーが解消されて動けばOKではなく、きちんと仕組みを調べてみてかなり理解が深まったかなと思います。（もし誤りがあれば是非ご指摘いただけると幸いです…！！）<br><br>これまでHTTPリクエストヘッダやレスポンスヘッダをまじまじと見たことも無かったので、Ajax通信を行っている箇所で検証ツールを確認してみると面白かったです。<br>確かにOriginやAccess-Control-Allow-Originがあったり、プリフライトリクエストが送られてレスポンスが返って来てから本番のリクエストが送られているのが確認できて、勉強になりました。<br>セキュリティ対策についてしっかり理解できていなくても動くアプリを作ることが出来てしまうというのは怖いことだなと思うので、これからもセキュリティの勉強はしていきたいと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://developer.mozilla.org/ja/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">オリジン間リソース共有 (CORS) - HTTP | MDN</a><br><br><a href=\"https://labor.ewigleere.net/2020/10/13/cors_preflight_request_verification/\" target=\"_blank\" rel=\"noopener noreferrer\">CORS の挙動の観察と preflight request の検証</a><br><br><a href=\"https://it-web-life.com/javascript_cors_preflight/\" target=\"_blank\" rel=\"noopener noreferrer\">【CORS】JavaScriptにおけるCORSやPreflightを理解する</a><br><br><a href=\"https://programmer-life.work/html_css/html-request\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPリクエストとは？HTTPリクエストを目で確認したい | Programmer LifeHTTPリクエストとは？HTTPリクエストを目...</a><br><br><a href=\"https://qiita.com/att55/items/2154a8aad8bf1409db2b\" target=\"_blank\" rel=\"noopener noreferrer\">なんとなく CORS がわかる...はもう終わりにする。 - Qiita</a><br></p>","tags":[{"id":"web","createdAt":"2022-01-07T13:19:12.628Z","updatedAt":"2022-02-12T02:32:09.404Z","publishedAt":"2022-01-07T13:19:12.628Z","revisedAt":"2022-01-07T13:19:12.628Z","tag":"Web"}],"image":"other"}],"tags":[{"id":"laravel","createdAt":"2022-01-07T13:17:32.553Z","updatedAt":"2022-02-12T02:31:33.697Z","publishedAt":"2022-01-07T13:17:32.553Z","revisedAt":"2022-01-07T13:17:38.700Z","tag":"Laravel"},{"id":"php","createdAt":"2022-01-07T13:16:36.618Z","updatedAt":"2022-02-12T02:31:46.498Z","publishedAt":"2022-01-07T13:16:36.618Z","revisedAt":"2022-01-07T13:16:36.618Z","tag":"PHP"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"},{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"typescript","createdAt":"2022-01-07T13:18:58.358Z","updatedAt":"2022-02-17T03:22:47.524Z","publishedAt":"2022-01-07T13:18:58.358Z","revisedAt":"2022-02-17T03:22:47.524Z","tag":"TypeScript"},{"id":"javascript","createdAt":"2022-01-07T13:18:33.680Z","updatedAt":"2022-01-07T13:18:33.680Z","publishedAt":"2022-01-07T13:18:33.680Z","revisedAt":"2022-01-07T13:18:33.680Z","tag":"JavaScript"},{"id":"web","createdAt":"2022-01-07T13:19:12.628Z","updatedAt":"2022-02-12T02:32:09.404Z","publishedAt":"2022-01-07T13:19:12.628Z","revisedAt":"2022-01-07T13:19:12.628Z","tag":"Web"},{"id":"docker","createdAt":"2022-02-12T02:32:18.767Z","updatedAt":"2022-02-12T10:02:36.384Z","publishedAt":"2022-02-12T02:32:18.767Z","revisedAt":"2022-02-12T10:02:36.384Z","tag":"Docker"},{"id":"microcms","createdAt":"2022-02-17T12:48:01.991Z","updatedAt":"2022-02-17T12:48:13.704Z","publishedAt":"2022-02-17T12:48:01.991Z","revisedAt":"2022-02-17T12:48:01.991Z","tag":"microCMS"},{"id":"git","createdAt":"2022-02-17T13:32:37.262Z","updatedAt":"2022-02-17T13:32:43.655Z","publishedAt":"2022-02-17T13:32:37.262Z","revisedAt":"2022-02-17T13:32:37.262Z","tag":"Git"}]},"__N_SSG":true}