{"pageProps":{"blog":{"id":"react-serch","createdAt":"2022-01-06T00:15:53.503Z","updatedAt":"2022-02-12T11:40:50.275Z","publishedAt":"2022-02-06T00:15:53.000Z","revisedAt":"2022-02-12T11:40:50.275Z","title":"Reactでリアルタイムの検索機能を実装する","body":"<p>個人ブログサイトを作った際、記事一覧画面にキーワード検索やカテゴリーで絞り込む機能を実装しました。<br><br>APIから取得したコンテンツなどフロントエンドで保持しているデータに対して絞り込みを行う機能は色んな場面で使えるかなと思うので、そのロジックと具体的な実装方法をまとめておきます。<br></p><h2 id=\"h652c073a9b\">基本的なロジック</h2><p><br>データの絞り込みを行う基本的なロジックは、JavaScriptの組み込み関数の<code>fitler</code>  を利用した<strong>配列操作</strong>です。<br></p><blockquote><code> filter()</code>メソッドは、与えられた関数によって実装されたテストに合格したすべての配列からなる<strong>新しい配列を生成</strong>します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></blockquote><p><a style=\"background-color:#ffffff\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a><br></p><pre><code>[\"りんご\", \"みかん\", \"いちご\"].filter((text) =&gt; {\n&nbsp;return text !== \"りんご\";\n});\n\n// #=&gt; [\"みかん\", \"いちご\"];</code></pre><p><br>filterメソッドを使ってReactで検索機能を実装する流れは以下の通りです。<br></p><ol><li>ユーザーから検索条件を受け取る。（キーワードの入力、カテゴリーの選択など）</li><li>全てのデータが入った配列に対して、filterメソッドにより1.で受け取った検索条件に合致するデータのみを選別して新しい配列を生成する。</li><li>2.で生成された配列の中身を画面に一覧表示する。</li></ol><p><br></p><h2 id=\"hb4d7d075a8\">検索機能の実装例</h2><p><br>以下のURLはこれから説明する検索機能を実装したサンプルコードです。<br><br>サンプルコードにある、<code>①カテゴリー選択ボタンによる検索</code> と<code>②フリーキーワード検索</code>について解説していきます。 <br></p><iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fc93jo&display_name=CodeSandbox&url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fc93jo&image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fc93jo%2Fscreenshot.png&key=94335756f04b424b8ce3ce71cbe3de0a&type=text%2Fhtml&schema=codesandbox\" width=\"1000\" height=\"500\" scrolling=\"no\" title=\"CodeSandbox embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe><p><a href=\"https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js</a><br><br>実際のWebサービスでは、ブログ記事のデータはAPIから受け取ることが多いかと思いますが、今回は予め <code>posts</code> という配列で記事データを用意し、フロント側で保持しておきます。<br><br>【検索対象とする記事データ】</p><pre><code>const posts = [\n&nbsp;{\n&nbsp;&nbsp;title: 'useStateの使い方',\n&nbsp;&nbsp;category: 'React'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: 'LaravelのMVCモデルについて',\n&nbsp;&nbsp;category: 'Laravel'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: '同一オリジンポリシーとCORS',\n&nbsp;&nbsp;category: 'Web'\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;title: 'useEffectの使い方',\n&nbsp;&nbsp;category: 'React'\n&nbsp;}\n]</code></pre><p><br>そして、画面に表示する記事データを管理するための状態変数 <code>showPosts</code>  を用意し、<code>showPosts</code>の記事を一覧表示します。 <br><code>showPosts</code>の初期値には、上記の<code>posts</code>を入れておきます。   <br></p><pre><code>export default function App() {\n&nbsp;const [showPosts, setShowPosts] = useState(posts);\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;{index+1}. {post.title}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br>ブラウザに表示すると以下の通りです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/4218f0d2e06447bcaad24ed417b5c3a9/blogs.png\" alt=\"\"><br>この記事一覧に対して絞り込みを行っていきます。<br></p><h2 id=\"hc8bb7fb60d\">①カテゴリー選択ボタンによる検索</h2><p>まずは、カテゴリー選択ボタンでカテゴリーを絞り込む機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p>1. カテゴリーリストの配列を作成<br>2. カテゴリー選択ボタンを設置<br>3. <code>onClick</code>時に実行して絞り込み処理を行う<code>selectCategory</code>メソッドを定義   <br><br>実装したコードはこちらです。</p><pre><code>export default function App() {\n\n&nbsp;const [showPosts, setShowPosts] = useState(posts);\n\n&nbsp;// カテゴリーリスト\n&nbsp;const categories = Array.from(new Set(posts.map((post) =&gt; post.category)));\n\t\n&nbsp;// カテゴリー絞り込み\n&nbsp;const selectCategory = (category) =&gt; {\n&nbsp;&nbsp;// allを選択した場合は早期return\n&nbsp;&nbsp;if (category === \"all\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;const selectedPosts = posts.filter((post) =&gt; post.category === category);\n&nbsp;&nbsp;setShowPosts(selectedPosts);\n&nbsp;};\n&nbsp;&nbsp;\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n\n&nbsp;&nbsp;&nbsp;{/* カテゴリー選択ボタン */}\n&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h4&gt;Category：&lt;/h4&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(\"all\")}&gt;All&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;{categories.map((category) =&gt; (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(category)}&gt;{category}&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))}\n&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>ひとつずつ解説します。<br><br><strong>1.カテゴリーリストの配列を作成</strong> <br><code>posts</code>配列に記事が存在するカテゴリーの分だけカテゴリー選択ボタンを設置したいので、まずはカテゴリーのリストを作成します。  </p><pre><code>// カテゴリーリスト\nconst categories = Array.from(new Set(posts.map((post) =&gt; post.category)));</code></pre><p><br>JavaScriptの<code>Setオブジェクト</code>を使って、<code>posts</code>  に存在するカテゴリーを<strong> 重複排除</strong>して格納したカテゴリーリストを作っています。 <br>Setオブジェクトについては以下の記事を参考にしました。<br><a href=\"https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419</a><br><br>SetオブジェクトはES2015から導入された機能で、重複した値が無いことを保証してくれます。</p><blockquote> Setオブジェクトは値のコレクションです。挿入順に要素を反復することができます。Setに<strong>重複する値は格納出来ません</strong>。Set内の値はコレクション内で一意となります。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">&nbsp;</a><a href=\"unsafe:[object Object]\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set</a></blockquote><p><br><strong>2.　カテゴリー選択ボタンを設置</strong> <br>各カテゴリーを選択するボタンと、全ての記事を表示するためのAllボタンを作ります。<br><br>1.で作成したカテゴリーリストの分だけカテゴリー選択ボタンを設置します。<br><br>カテゴリー選択ボタンとAllボタンの<code>onClick</code>時には<code>selectCategory</code>メソッドを実行し、引数には該当のカテゴリーを渡しています。   </p><pre><code>&lt;button onClick={() =&gt; selectCategory(\"all\")}&gt;All&lt;/button&gt;\n{categories.map((category) =&gt; (\n&nbsp;&nbsp;&lt;button onClick={() =&gt; selectCategory(category)}&gt;{category}&lt;/button&gt;\n))}</code></pre><p><br><strong>3.　onClick時に実行するselectCategoryメソッドを定義</strong> <br><code>posts</code>の中から、選択されたカテゴリーと一致するカテゴリーの記事のみを<code>filter</code>メソッドで選別しています。   <br><br>絞り込み後の配列を、一覧表示に使う状態変数<code>showPosts</code>にセットしています。  </p><pre><code>const selectCategory = (category) =&gt; {\n&nbsp;// allの場合は早期return\n&nbsp;if (category === \"all\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;}\n&nbsp;const selectedPosts = posts.filter((post) =&gt; post.category === category);\n&nbsp;setShowPosts(selectedPosts);\n}</code></pre><p><br></p><h2 id=\"h9f9b4f1e4a\">②フリーキーワード</h2><p><br>次に、ユーザーの入力値による絞り込み（フリーキーワード検索）の機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p><br>1. 検索フォームへの入力値を保持する状態変数<code>inputValue</code>を定義  <br>2. フリーキーワード検索フォームを設置<br>3. 検索フォームの<code>onChange</code>時に実行する<code>handleInputChange</code>メソッドを定義   <br>4. 検索フォームへの入力値が変わる度に実行して絞り込みを行う<code>search</code>メソッドを定義  <br></p><pre><code>export default function App() {\n&nbsp;const [showPosts, setShowPosts] = useState(posts)\n&nbsp;const [inputValue, setInputValue] = useState()\n\n&nbsp;// 検索欄への入力値をハンドリング\n&nbsp;const handleInputChange = (e) =&gt; {\n&nbsp;&nbsp;setInputValue(e.target.value)\n&nbsp;&nbsp;search(e.target.value)\n&nbsp;}\n\n&nbsp;// 検索欄への入力値での絞り込み\n&nbsp;const search = (value) =&gt; {\n&nbsp;&nbsp;// 検索欄への入力が空の場合は早期return\n&nbsp;&nbsp;if (value === \"\") {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts);\n&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;const serchedPosts = posts.filter(\n&nbsp;&nbsp;&nbsp;(post) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;Object.values(post).filter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(item) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n&nbsp;&nbsp;&nbsp;&nbsp;).length &gt; 0\n&nbsp;&nbsp;);\n\n&nbsp;&nbsp;setShowPosts(serchedPosts);\n&nbsp;}\n\n&nbsp;return (\n&nbsp;&nbsp;&lt;div className=\"App\"&gt;\n&nbsp;&nbsp;&nbsp;&lt;h1&gt;記事一覧&lt;/h1&gt;\n\n&nbsp;&nbsp;&nbsp;{/* フリーキーワード検索フォーム */}\n&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h4&gt;Search&lt;/h4&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=\"text\" value={inputValue} onChange={handleInputChange} /&gt;\n&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;{/* 記事一覧表示 */}\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div key={post.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;category：{post.category}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>大体はReactの基本の知識でカバーできるかと思います。<br><br>4.の絞り込みを行うロジックの部分は一見ややこしいですが、一つずつ読み解いて解説していきます。<br><br>記事の絞り込みを行っているのは以下の部分です。</p><pre><code>const serchedPosts = posts.filter(\n&nbsp;(post) =&gt;\n&nbsp;&nbsp;Object.values(post).filter(\n&nbsp;&nbsp;&nbsp;(item) =&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n&nbsp;&nbsp;).length &gt; 0\n)</code></pre><p><br>このコードでは、<br></p><ul><li>タイトルもしくはカテゴリーの<strong>いずれか</strong>にユーザーの入力値を<strong>含む</strong>（全一致ではない） </li><li>大文字小文字の違いは許容 </li></ul><p><br>という要件で絞り込んでいます。<br><br>要点を解説していきます。<br></p><ul><li> <strong>Object.values()</strong> </li></ul><pre><code>Object.values(post)</code></pre><p><br>上記の部分で、オブジェクトの<strong>プロパティの値を配列で取得</strong>する`Object.values()`メソッドを使い、検索対象の値を格納した配列を作ります。 <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values</a><br></p><ul><li> <strong>undefinedとnullを除外</strong> </li></ul><pre><code>item !== undefined &amp;&amp;\nitem !== null &amp;&amp;</code></pre><p><br>次に出てくる<code>toUpperCase()</code>は<code>null</code>や<code>undefined</code>の値に対しては使えません。    <br><br>なので仮にこの2行が無いと、<code>Obect.values(post)</code>で生成された配列の中に<code>undefined</code>もしくは<code>null</code>があった場合 <code>Cannot read properties of null (reading 'toUpperCase')</code> というエラーが出ます。     <br></p><ul><li> <strong>toUpperCase()</strong> </li></ul><blockquote><strong>toUpperCase()</strong>メソッドは、呼び出す文字列の値を（文字列でない場合、文字列に変換して）大文字に変換して返します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">&nbsp;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase</a></blockquote><p><br><strong>記事のタイトルとカテゴリー</strong>と、<strong>ユーザーの入力値</strong> の双方を大文字に変換することで、<strong>大文字・小文字の違いは許容</strong>します。  <br></p><ul><li> <strong>indexOf()</strong></li></ul><blockquote><strong>indexOf()</strong>メソッドは、呼び出す<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener noreferrer\">String</a>オブジェクト中で、 <code>fromIndex</code>   から検索を始め、指定された値が最初に現れたインデックスを返します。値が見つからない場合は&nbsp;<code>-1</code>を返します <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf</a></blockquote><p><br></p><pre><code>item.toUpperCase().indexOf(value.toUpperCase()) !== -1</code></pre><p><br>値が見つからなければ <code>-1</code>を返すという特性を使って、記事のタイトルやカテゴリーにユーザーの入力値を含んでいれば <code> true</code> 、含まなければ <code>false</code> を返すようにしています。<br><br>以上のステップを経て、以下のコードで検索キーワードを含む値が1つでもある記事は <code>.length &gt; 0</code> の結果 <em>true</em>が返り、<code>serchedPosts</code>に格納されます。    </p><pre><code>Object.values(member).filter(\n&nbsp;(item: string) =&gt;\n&nbsp;&nbsp;item !== undefined &amp;&amp;\n&nbsp;&nbsp;item !== null &amp;&amp;\n&nbsp;&nbsp;item.toUpperCase().indexOf(value.toUpperCase()) !== -1\n).length &gt; 0</code></pre><p><br>あとはこの<code>serchedPosts</code>を画面に表示するだけです。  <br></p><h2 id=\"h1afe451c43\">さいごに</h2><p>Setオブジェクト、fileterメソッド、indexOfメソッド、toUpperCaseメソッドなど、JavaScriptの持つメソッドについても勉強になりました。<br><br>組み込み関数を一通りチラッとでも知っていれば、何かを実装したい時にあれを使えばできそう…って考えられると思うので、元々用意されている関数なんかの知識は増やしていきたいなと思います。<br><br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://himenon.github.io/docs/javascript/simple-react-local-search-form/\" target=\"_blank\" rel=\"noopener noreferrer\">https://himenon.github.io/docs/javascript/simple-react-local-search-form/</a><br><br><a href=\"https://qiita.com/takf-jp/items/af10bc05428b1182ece5\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/takf-jp/items/af10bc05428b1182ece5</a><br></p>","tags":[{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"react2"},"highlightedBody":"<html><head></head><body><p>個人ブログサイトを作った際、記事一覧画面にキーワード検索やカテゴリーで絞り込む機能を実装しました。<br><br>APIから取得したコンテンツなどフロントエンドで保持しているデータに対して絞り込みを行う機能は色んな場面で使えるかなと思うので、そのロジックと具体的な実装方法をまとめておきます。<br></p><h2 id=\"h652c073a9b\">基本的なロジック</h2><p><br>データの絞り込みを行う基本的なロジックは、JavaScriptの組み込み関数の<code>fitler</code>  を利用した<strong>配列操作</strong>です。<br></p><blockquote><code> filter()</code>メソッドは、与えられた関数によって実装されたテストに合格したすべての配列からなる<strong>新しい配列を生成</strong>します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></blockquote><p><a style=\"background-color:#ffffff\" href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a><br></p><pre><code class=\"hljs\">[<span class=\"hljs-string\">\"りんご\"</span>, <span class=\"hljs-string\">\"みかん\"</span>, <span class=\"hljs-string\">\"いちご\"</span>].<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">text</span></span>) =&gt;</span> {\n&nbsp;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">text</span> !== <span class=\"hljs-string\">\"りんご\"</span>;\n});\n\n<span class=\"hljs-comment\">// #=&gt; [\"みかん\", \"いちご\"];</span></code></pre><p><br>filterメソッドを使ってReactで検索機能を実装する流れは以下の通りです。<br></p><ol><li>ユーザーから検索条件を受け取る。（キーワードの入力、カテゴリーの選択など）</li><li>全てのデータが入った配列に対して、filterメソッドにより1.で受け取った検索条件に合致するデータのみを選別して新しい配列を生成する。</li><li>2.で生成された配列の中身を画面に一覧表示する。</li></ol><p><br></p><h2 id=\"hb4d7d075a8\">検索機能の実装例</h2><p><br>以下のURLはこれから説明する検索機能を実装したサンプルコードです。<br><br>サンプルコードにある、<code>①カテゴリー選択ボタンによる検索</code> と<code>②フリーキーワード検索</code>について解説していきます。 <br></p><iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fc93jo&amp;display_name=CodeSandbox&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fc93jo&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fc93jo%2Fscreenshot.png&amp;key=94335756f04b424b8ce3ce71cbe3de0a&amp;type=text%2Fhtml&amp;schema=codesandbox\" width=\"1000\" height=\"500\" scrolling=\"no\" title=\"CodeSandbox embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe><p><a href=\"https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/react-serch-c93jo?file=/src/App.js</a><br><br>実際のWebサービスでは、ブログ記事のデータはAPIから受け取ることが多いかと思いますが、今回は予め <code>posts</code> という配列で記事データを用意し、フロント側で保持しておきます。<br><br>【検索対象とする記事データ】</p><pre><code class=\"hljs\">const posts = [\n&nbsp;{\n&nbsp;&nbsp;<span class=\"hljs-keyword\">title</span>: <span class=\"hljs-string\">'useStateの使い方'</span>,\n&nbsp;&nbsp;category: <span class=\"hljs-string\">'React'</span>\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;<span class=\"hljs-keyword\">title</span>: <span class=\"hljs-string\">'LaravelのMVCモデルについて'</span>,\n&nbsp;&nbsp;category: <span class=\"hljs-string\">'Laravel'</span>\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;<span class=\"hljs-keyword\">title</span>: <span class=\"hljs-string\">'同一オリジンポリシーとCORS'</span>,\n&nbsp;&nbsp;category: <span class=\"hljs-string\">'Web'</span>\n&nbsp;},\n&nbsp;{\n&nbsp;&nbsp;<span class=\"hljs-keyword\">title</span>: <span class=\"hljs-string\">'useEffectの使い方'</span>,\n&nbsp;&nbsp;category: <span class=\"hljs-string\">'React'</span>\n&nbsp;}\n]</code></pre><p><br>そして、画面に表示する記事データを管理するための状態変数 <code>showPosts</code>  を用意し、<code>showPosts</code>の記事を一覧表示します。 <br><code>showPosts</code>の初期値には、上記の<code>posts</code>を入れておきます。   <br></p><pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n&nbsp;<span class=\"hljs-keyword\">const</span> [showPosts, setShowPosts] = <span class=\"hljs-title function_\">useState</span>(posts);\n\n&nbsp;<span class=\"hljs-keyword\">return</span> (\n&nbsp;&nbsp;<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>記事一覧<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.title}</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{index+1}. {post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>category：{post.category}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&nbsp;);\n}</code></pre><p><br>ブラウザに表示すると以下の通りです。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/4218f0d2e06447bcaad24ed417b5c3a9/blogs.png\" alt=\"\"><br>この記事一覧に対して絞り込みを行っていきます。<br></p><h2 id=\"hc8bb7fb60d\">①カテゴリー選択ボタンによる検索</h2><p>まずは、カテゴリー選択ボタンでカテゴリーを絞り込む機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p>1. カテゴリーリストの配列を作成<br>2. カテゴリー選択ボタンを設置<br>3. <code>onClick</code>時に実行して絞り込み処理を行う<code>selectCategory</code>メソッドを定義   <br><br>実装したコードはこちらです。</p><pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n\n&nbsp;<span class=\"hljs-keyword\">const</span> [showPosts, setShowPosts] = <span class=\"hljs-title function_\">useState</span>(posts);\n\n&nbsp;<span class=\"hljs-comment\">// カテゴリーリスト</span>\n&nbsp;<span class=\"hljs-keyword\">const</span> categories = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(posts.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> post.<span class=\"hljs-property\">category</span>)));\n\t\n&nbsp;<span class=\"hljs-comment\">// カテゴリー絞り込み</span>\n&nbsp;<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectCategory</span> = (<span class=\"hljs-params\">category</span>) =&gt; {\n&nbsp;&nbsp;<span class=\"hljs-comment\">// allを選択した場合は早期return</span>\n&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span> (category === <span class=\"hljs-string\">\"all\"</span>) {\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-title function_\">setShowPosts</span>(posts);\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span> selectedPosts = posts.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> post.<span class=\"hljs-property\">category</span> === category);\n&nbsp;&nbsp;<span class=\"hljs-title function_\">setShowPosts</span>(selectedPosts);\n&nbsp;};\n&nbsp;&nbsp;\n\n&nbsp;<span class=\"hljs-keyword\">return</span> (\n&nbsp;&nbsp;<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>記事一覧<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n&nbsp;&nbsp;&nbsp;{/* カテゴリー選択ボタン */}\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>Category：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> selectCategory(\"all\")}&gt;All<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{categories.map((category) =&gt; (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> selectCategory(category)}&gt;{category}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))}\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.title}</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>category：{post.category}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>ひとつずつ解説します。<br><br><strong>1.カテゴリーリストの配列を作成</strong> <br><code>posts</code>配列に記事が存在するカテゴリーの分だけカテゴリー選択ボタンを設置したいので、まずはカテゴリーのリストを作成します。  </p><pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> カテゴリーリスト\nconst categories = <span class=\"hljs-built_in\">Array</span>.<span class=\"hljs-keyword\">from</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(posts.map(<span class=\"hljs-function\"><span class=\"hljs-params\">(post)</span> =&gt;</span> post.category)));</code></pre><p><br>JavaScriptの<code>Setオブジェクト</code>を使って、<code>posts</code>  に存在するカテゴリーを<strong> 重複排除</strong>して格納したカテゴリーリストを作っています。 <br>Setオブジェクトについては以下の記事を参考にしました。<br><a href=\"https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/netebakari/items/7c1db0b0cea14a3d4419</a><br><br>SetオブジェクトはES2015から導入された機能で、重複した値が無いことを保証してくれます。</p><blockquote> Setオブジェクトは値のコレクションです。挿入順に要素を反復することができます。Setに<strong>重複する値は格納出来ません</strong>。Set内の値はコレクション内で一意となります。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set\">&nbsp;</a><a href=\"unsafe:[object Object]\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Set</a></blockquote><p><br><strong>2.　カテゴリー選択ボタンを設置</strong> <br>各カテゴリーを選択するボタンと、全ての記事を表示するためのAllボタンを作ります。<br><br>1.で作成したカテゴリーリストの分だけカテゴリー選択ボタンを設置します。<br><br>カテゴリー選択ボタンとAllボタンの<code>onClick</code>時には<code>selectCategory</code>メソッドを実行し、引数には該当のカテゴリーを渡しています。   </p><pre><code class=\"hljs\">&lt;<span class=\"hljs-keyword\">button</span> <span class=\"hljs-keyword\">onClick</span>={() =&gt; selectCategory(<span class=\"hljs-string\">\"all\"</span>)}&gt;All&lt;/<span class=\"hljs-keyword\">button</span>&gt;\n{categories.map((category) =&gt; (\n&nbsp;&nbsp;&lt;<span class=\"hljs-keyword\">button</span> <span class=\"hljs-keyword\">onClick</span>={() =&gt; selectCategory(category)}&gt;{category}&lt;/<span class=\"hljs-keyword\">button</span>&gt;\n))}</code></pre><p><br><strong>3.　onClick時に実行するselectCategoryメソッドを定義</strong> <br><code>posts</code>の中から、選択されたカテゴリーと一致するカテゴリーの記事のみを<code>filter</code>メソッドで選別しています。   <br><br>絞り込み後の配列を、一覧表示に使う状態変数<code>showPosts</code>にセットしています。  </p><pre><code class=\"hljs\">const selectCategory <span class=\"hljs-operator\">=</span> (category) <span class=\"hljs-operator\">=</span>&gt; {\n&nbsp;// allの場合は早期return\n&nbsp;if (category <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"all\"</span>) {\n&nbsp;&nbsp;&nbsp;setShowPosts(posts)<span class=\"hljs-comment\">;</span>\n&nbsp;&nbsp;&nbsp;return<span class=\"hljs-comment\">;</span>\n&nbsp;}\n&nbsp;const selectedPosts <span class=\"hljs-operator\">=</span> posts.filter((post) <span class=\"hljs-operator\">=</span>&gt; post.category <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> category)<span class=\"hljs-comment\">;</span>\n&nbsp;setShowPosts(selectedPosts)<span class=\"hljs-comment\">;</span>\n}</code></pre><p><br></p><h2 id=\"h9f9b4f1e4a\">②フリーキーワード</h2><p><br>次に、ユーザーの入力値による絞り込み（フリーキーワード検索）の機能を実装してみます。<br></p><h3 id=\"h2661198b93\">実装手順</h3><p><br>1. 検索フォームへの入力値を保持する状態変数<code>inputValue</code>を定義  <br>2. フリーキーワード検索フォームを設置<br>3. 検索フォームの<code>onChange</code>時に実行する<code>handleInputChange</code>メソッドを定義   <br>4. 検索フォームへの入力値が変わる度に実行して絞り込みを行う<code>search</code>メソッドを定義  <br></p><pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n&nbsp;<span class=\"hljs-keyword\">const</span> [showPosts, setShowPosts] = <span class=\"hljs-title function_\">useState</span>(posts)\n&nbsp;<span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>()\n\n&nbsp;<span class=\"hljs-comment\">// 検索欄への入力値をハンドリング</span>\n&nbsp;<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleInputChange</span> = (<span class=\"hljs-params\">e</span>) =&gt; {\n&nbsp;&nbsp;<span class=\"hljs-title function_\">setInputValue</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)\n&nbsp;&nbsp;<span class=\"hljs-title function_\">search</span>(e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)\n&nbsp;}\n\n&nbsp;<span class=\"hljs-comment\">// 検索欄への入力値での絞り込み</span>\n&nbsp;<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">search</span> = (<span class=\"hljs-params\">value</span>) =&gt; {\n&nbsp;&nbsp;<span class=\"hljs-comment\">// 検索欄への入力が空の場合は早期return</span>\n&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-string\">\"\"</span>) {\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-title function_\">setShowPosts</span>(posts);\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span> serchedPosts = posts.<span class=\"hljs-title function_\">filter</span>(\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">values</span>(post).<span class=\"hljs-title function_\">filter</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== <span class=\"hljs-literal\">undefined</span> &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item !== <span class=\"hljs-literal\">null</span> &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.<span class=\"hljs-title function_\">toUpperCase</span>().<span class=\"hljs-title function_\">indexOf</span>(value.<span class=\"hljs-title function_\">toUpperCase</span>()) !== -<span class=\"hljs-number\">1</span>\n&nbsp;&nbsp;&nbsp;&nbsp;).<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>\n&nbsp;&nbsp;);\n\n&nbsp;&nbsp;<span class=\"hljs-title function_\">setShowPosts</span>(serchedPosts);\n&nbsp;}\n\n&nbsp;<span class=\"hljs-keyword\">return</span> (\n&nbsp;&nbsp;<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>記事一覧<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n&nbsp;&nbsp;&nbsp;{/* フリーキーワード検索フォーム */}\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>Search<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputValue}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleInputChange}</span> /&gt;</span>\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp;&nbsp;&nbsp;{/* 記事一覧表示 */}\n&nbsp;&nbsp;&nbsp;{showPosts.map((post, index) =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;return (\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.title}</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{index + 1}. {post.title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>category：{post.category}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;})}\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&nbsp;);\n}</code></pre><p><br></p><h3 id=\"h8a50fc5ec1\">ポイント解説</h3><p><br>大体はReactの基本の知識でカバーできるかと思います。<br><br>4.の絞り込みを行うロジックの部分は一見ややこしいですが、一つずつ読み解いて解説していきます。<br><br>記事の絞り込みを行っているのは以下の部分です。</p><pre><code class=\"hljs\">const serchedPosts = posts.<span class=\"hljs-built_in\">filter</span>(\n&nbsp;<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span>\n&nbsp;&nbsp;Object.values(post).<span class=\"hljs-built_in\">filter</span>(\n&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;item !== <span class=\"hljs-literal\">undefined</span> &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item !== <span class=\"hljs-literal\">null</span> &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;item.toUpperCase().<span class=\"hljs-built_in\">indexOf</span>(value.toUpperCase()) !== <span class=\"hljs-number\">-1</span>\n&nbsp;&nbsp;).<span class=\"hljs-built_in\">length</span> &gt; <span class=\"hljs-number\">0</span>\n)</code></pre><p><br>このコードでは、<br></p><ul><li>タイトルもしくはカテゴリーの<strong>いずれか</strong>にユーザーの入力値を<strong>含む</strong>（全一致ではない） </li><li>大文字小文字の違いは許容 </li></ul><p><br>という要件で絞り込んでいます。<br><br>要点を解説していきます。<br></p><ul><li> <strong>Object.values()</strong> </li></ul><pre><code class=\"hljs\"><span class=\"hljs-keyword\">Object</span>.<span class=\"hljs-keyword\">values</span>(post)</code></pre><p><br>上記の部分で、オブジェクトの<strong>プロパティの値を配列で取得</strong>する`Object.values()`メソッドを使い、検索対象の値を格納した配列を作ります。 <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/values</a><br></p><ul><li> <strong>undefinedとnullを除外</strong> </li></ul><pre><code class=\"hljs\">item !== undefined <span class=\"hljs-meta\">&amp;&amp;</span>\nitem !== <span class=\"hljs-literal\">null</span> <span class=\"hljs-meta\">&amp;&amp;</span></code></pre><p><br>次に出てくる<code>toUpperCase()</code>は<code>null</code>や<code>undefined</code>の値に対しては使えません。    <br><br>なので仮にこの2行が無いと、<code>Obect.values(post)</code>で生成された配列の中に<code>undefined</code>もしくは<code>null</code>があった場合 <code>Cannot read properties of null (reading 'toUpperCase')</code> というエラーが出ます。     <br></p><ul><li> <strong>toUpperCase()</strong> </li></ul><blockquote><strong>toUpperCase()</strong>メソッドは、呼び出す文字列の値を（文字列でない場合、文字列に変換して）大文字に変換して返します。<br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\">&nbsp;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase</a></blockquote><p><br><strong>記事のタイトルとカテゴリー</strong>と、<strong>ユーザーの入力値</strong> の双方を大文字に変換することで、<strong>大文字・小文字の違いは許容</strong>します。  <br></p><ul><li> <strong>indexOf()</strong></li></ul><blockquote><strong>indexOf()</strong>メソッドは、呼び出す<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener noreferrer\">String</a>オブジェクト中で、 <code>fromIndex</code>   から検索を始め、指定された値が最初に現れたインデックスを返します。値が見つからない場合は&nbsp;<code>-1</code>を返します <br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf</a></blockquote><p><br></p><pre><code class=\"hljs\">item.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">UpperCase()</span>.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">value</span>.<span class=\"hljs-params\">toUpperCase</span>()</span>) !== -<span class=\"hljs-number\">1</span></code></pre><p><br>値が見つからなければ <code>-1</code>を返すという特性を使って、記事のタイトルやカテゴリーにユーザーの入力値を含んでいれば <code> true</code> 、含まなければ <code>false</code> を返すようにしています。<br><br>以上のステップを経て、以下のコードで検索キーワードを含む値が1つでもある記事は <code>.length &gt; 0</code> の結果 <em>true</em>が返り、<code>serchedPosts</code>に格納されます。    </p><pre><code class=\"hljs\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Object</span>.</span></span>values(member).filter(\n<span class=\"hljs-function\">&nbsp;(<span class=\"hljs-params\">item</span>: <span class=\"hljs-params\">string</span>) =&gt;</span>\n&nbsp;&nbsp;item !== undefined<span class=\"hljs-operator\"> &amp;&amp;\n&nbsp;&nbsp;</span>item !== null<span class=\"hljs-operator\"> &amp;&amp;\n&nbsp;&nbsp;</span>item.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">UpperCase()</span>.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">value</span>.<span class=\"hljs-params\">toUpperCase</span>()</span>) !== -<span class=\"hljs-number\">1</span>\n).length &gt; <span class=\"hljs-number\">0</span></code></pre><p><br>あとはこの<code>serchedPosts</code>を画面に表示するだけです。  <br></p><h2 id=\"h1afe451c43\">さいごに</h2><p>Setオブジェクト、fileterメソッド、indexOfメソッド、toUpperCaseメソッドなど、JavaScriptの持つメソッドについても勉強になりました。<br><br>組み込み関数を一通りチラッとでも知っていれば、何かを実装したい時にあれを使えばできそう…って考えられると思うので、元々用意されている関数なんかの知識は増やしていきたいなと思います。<br><br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"https://himenon.github.io/docs/javascript/simple-react-local-search-form/\" target=\"_blank\" rel=\"noopener noreferrer\">https://himenon.github.io/docs/javascript/simple-react-local-search-form/</a><br><br><a href=\"https://qiita.com/takf-jp/items/af10bc05428b1182ece5\" target=\"_blank\" rel=\"noopener noreferrer\">https://qiita.com/takf-jp/items/af10bc05428b1182ece5</a><br></p></body></html>"},"__N_SSG":true}