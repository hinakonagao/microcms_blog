{"pageProps":{"blog":{"id":"notion-blog","createdAt":"2022-02-12T11:09:01.126Z","updatedAt":"2022-02-12T11:09:56.858Z","publishedAt":"2022-01-09T11:09:01.000Z","revisedAt":"2022-02-12T11:09:56.858Z","title":"Notion BlogをヘッドレスCMSとして、Next.jsで個人ブログを作ってみた","body":"<h2 id=\"h8d027c8ed3\">はじめに</h2><p>年末年始1週間の自由研究として、Next.jsを使って何か作ってみたい…ということで、NotionをヘッドレスCMSとした個人ブログを作ってみました。<br><br>せっかくなので制作日記として、</p><ul><li> 作ったものを紹介</li><li> Notion Blogについて</li><li> Next.js（React）を使って自分で実装した機能</li></ul><p>などまとめておきたいと思います。<br><br>※ヘッドレスCMSとは…従来型のCMS（WordPress等）は入稿画面・DB・表示画面をまとめて管理するのに対し、ここから表示画面を除いたもの。ヘッドレスCMSでは、API経由で取得したコンテンツを基にフロントエンド部分は自前で実装する必要がある。<br></p><h2 id=\"he961b4efa4\">制作物について</h2><p>実際に作ったものがこちらです。<br><a href=\"https://hinako-blog.vercel.app/blog\" target=\"_blank\" rel=\"noopener noreferrer\">Hinako Blog | My Profile</a><br></p><h3 id=\"h0d376e5d4e\">構成</h3><p>構成を簡単に説明すると、<br></p><ul><li>Notion上にブログ記事を保管するDBを作り、Notionで記事を執筆</li><li>Next.jsのgetStaticPropsでNotionのAPIを叩いてブログコンテンツを取得</li><li>Next.jsでレスポンスを成形してビューに表示</li></ul><p><br>という感じです。<br><br>NotionのAPIを叩いてレスポンスを成形する部分は、Notion Blog（詳しくは後述）というOSSのテンプレートをベースに使わせていただきました。<br>デプロイはVercelで行いました。<br></p><h3 id=\"had81f6e58c\">実装した機能</h3><ul><li>MITライセンスのOSSとして公開されているNotion Blog（Vercel社のJJ Kasperさん作）をベースに使用</li><li>DBにcategoryのカラムを追加し、NotionのAPIからのレスポンスの成形やビューへの表示をカスタマイズ</li><li>フロント側での「カテゴリーの選択」「投稿した月の選択」「フリーキーワードによる検索」によるリアルタイム検索機能</li><li>記事のカテゴリーに応じてReact iconsでアイコンを表示する</li><li>CSS Modules</li><li>UIパーツのコンポーネント化</li><li>propsやstateの値により、条件付きレンダリングを行ったりCSSを動的に切り替える</li></ul><p><br></p><h2 id=\"h5043d0744e\">Notion Blogについて</h2><p>ベースに使用したNotion Blogというのは、NotionのAPIを叩いてNotionからコンテンツを取得しNext.jsでビューを作ったテンプレートです。<br><br>GitHub：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog</a><br>公式のサンプルページ：<a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/</a><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/007ccf5040c24c7dad664d036d40997e/notion-blog.png\" alt=\"\"><br>こんな感じでシンプルで綺麗なUIをしています。<br>コードをいじったりしなくても、DeployボタンからVercelに連携し、NotionのDBのID・Tokenを環境変数に設定してVercelでデプロイするだけで、このテンプレート通りの個人ブログが出来るというものです。<br></p><h3 id=\"h0893011e20\">Notion Blogでブログコンテンツを取得する仕組み</h3><p>あらかじめNotionで記事を登録するDB（Page, Slug, Published, Date, Authorsの5つの要素を持つインラインテーブル）を作り、このテーブルに記事を入れておきます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2df6468fd6054e47b8f1f212f7e5fa3a/table.png\" alt=\"\"><br>画像引用：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog#manually-creating-the-table\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog#manually-creating-the-table</a><br><br>Notion Blogのソースを見ると、Next.jsのgetStaticPropsでNotionのAPIを叩いてデータベースのコンテンツを取得しています。<br>使っているのは非公式のAPIで「<a style=\"color:#4aac00\" href=\"https://www.notion.so/api/v3%E3%80%8D\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.notion.so/api/v3」</a>&nbsp;というエンドポイントを叩いているようです。<br></p><h3 id=\"h814caf386c\">Notion Blogを使った理由</h3><p>Notion 公式のAPI（ベータ版）も2021年5月に公開され、OSSとして公開されているテンプレートで公式APIが使われているものもある中で、Notion Blogを選んだ理由は以下の通りです。<br></p><ul><li>公式のNotion APIはコードブロックに対応していない（もしアップデートを見落としていたらすみません。）</li><li>公式のNotion APIでは、コンテンツを取得するだけでなくAPIを使ってNotionのDBへ追加・更新・削除する機能もあるが、これらの機能は不要と思った。</li><li>Notion Blogでは、決められた5つのカラムを持つテーブルをNotionで作るだけでテンプレート通りに表示される。簡単！はやい！</li></ul><p><br>ざっくりいうと、<strong>とりあえず最速・簡単な方法で小さく作って、残った時間でカスタマイズしてみよう</strong>という感じです。<br></p><h3 id=\"h2c8c89326b\">Notion Blogのセットアップ方法</h3><p>セットアップ方法は、公式サンプルのページに動画付きで分かりやすく書かれているので省略します。<br><br><a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/blog/my-first-post\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/blog/my-first-post</a><br>Deployボタンからコードを目にすることも無くデプロイすることも出来るようですが、今回はAPIから受け取るレスポンスの成形やUIはカスタマイズする前提だったので、git cloneして編集したうえでデプロイしました。<br></p><h3 id=\"h1d7f1fe064\">Notion Blogを使ってみて</h3><ul><li>テンプレートのコードを読んで</li></ul><p>APIへのリクエストを行うメソッドのファイル切り分け・ディレクトリ構成が分かりやすく、カスタマイズしやすかったです。<br>Next.jsのダイナミックルーティングを使う際に、ヘッダのメタ情報を出しわける書き方も初めて見て勉強になりました。<br><br>ここからは、ブログ記事をブラウザで表示した時の見え方についてです。<br></p><ul><li>画像・動画の挿入</li></ul><p>簡単に挿入できるものの、画像のアスペクト比が若干おかしくなっていました…。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/be464a17a7d74abe9afdcd84d268199b/%E7%94%BB%E5%83%8F%E5%8B%95%E7%94%BB.png\" alt=\"\"><br><br><br>動画はNotionで見たまま反映され、再生速度の調整まで出来るのでこれはスゴイ！感激でした。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/f1847b01ffc84d62a89559fd86c389ce/%E5%8B%95%E7%94%BB.png\" alt=\"\"><br></p><ul><li>コードブロックの挿入</li></ul><p>公式APIでは対応していないコードブロックも、非公式APIを使っているNotion Blogでは表示できました。<br>文字色のCSSなんかも自由にカスタマイズできます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/20ed291c84c841a8a67807a6c96c2514/%E3%82%B3%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF.png\" alt=\"\"><br><br>ただしNotion Blogで使っているのは非公式APIなので、<br></p><ul><li>動作が不安定（実際、稀にコンテンツが取得できないという事が起こりました。）</li><li>今後このAPIが使えなくなる可能性もある</li><li><br></li></ul><p>というデメリットはあると思われます。<br></p><h2 id=\"hafa005fc12\">自分で実装した機能</h2><p>自分で追加実装した機能や、その他使用技術について書いていきます。<br></p><h3 id=\"h604b8042b8\">検索機能</h3><p>カテゴリーで絞り込み・投稿月で絞りこみ・フリーキーワード検索の機能を実装しました。<br><br>ページ上部<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/5d8f8a862a3344fc8fe16447103ba0f6/%E3%83%9A%E3%83%BC%E3%82%B8%E4%B8%8A%E9%83%A8.png\" alt=\"\"><br><br>フッター<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2cd3e007541943cb82954cf062c40479/%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC.png\" alt=\"\"><br><br>【実装手順】<br>①　APIから取得したブログコンテンツに存在するカテゴリーを配列に格納して、記事が存在する分のカテゴリーボタンを表示。投稿月についても同様。<br>②　ボタンを押したときや検索欄に入力をした際に発火する絞り込み処理を実装。<br><br>フロント側で保持している記事データに対して絞り込みを行い表示を切り替える機能なので、リロードなく瞬時に表示が切り替わります。<br>検索機能の書き方は非常に勉強になったので、別記事にまとめようと思います。<br></p><h3 id=\"hc06cf54a32\">React Icons</h3><p>記事のカテゴリーに応じてアイコンを表示しました。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6d8cb6b91d2740649bcd296b5d054bf6/react-icon.png\" alt=\"\"><br><br><br>アイコンといえばFontAwesomeと思っていましたが、React用のライブラリがありました。<br><a href=\"https://react-icons.github.io/react-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">React Icons</a><br><br>このライブラリをインストールすると、Font Awesome や Material、Typicons、Codicons（VSCode のアイコン）など色んな種類のアイコンを簡単に利用することができます。<br>使い方は以下の記事を参考にさせて頂きました。<br><br><a href=\"https://zenn.dev/taichifukumoto/articles/how-to-use-react-icons\" target=\"_blank\" rel=\"noopener noreferrer\">React でアイコンを使うなら React Icons がおすすめ</a><br></p><h3 id=\"h5a4cb7eb5d\">CSS Modules</h3><p>CSSは、Notion BlogでCSS Modulesが使われていたので、そのままCSS Modulesを使いました。<br><strong><code>.module.css</code></strong>&nbsp;で定義したクラス名がそのまま付与されるのではなく、実際はユニークなクラス名が自動的に生成されて付与されることも検証ツールで確認できて、勉強になりました。<br><br>Reactのプロジェクト下でのCSSといえば代表的な選択肢は、CSS Modules、styled-component、Tailwindあたりなのかと思いますが、それぞれの違いやメリットデメリットについては正直勉強不足です。。<br><a href=\"https://kenzoblog.vercel.app/posts/css-manage\" target=\"_blank\" rel=\"noopener noreferrer\">styled-components, CSS Modules について調べたのでまとめる</a><br><br>業務ではTailwindを使っており、今回初めてCSS Modulesを使い、両者の個人的な感想を書いておきます。<br></p><ul><li>Tailwind</li></ul><p>ファイルの行き来をせずスタイルを確認できて便利。小規模なプロダクトに向いていそう。<br></p><ul><li>CSS Modules</li></ul><p>コンポーネント単位でスタイルをまとめるという思想なので、コンポーネント指向のReactとの相性は良い（のだと思う）。<br>スタイルの共通化がしやすくスッキリ整理整頓されている感じで、使いやすかった。<br></p><h2 id=\"hf32963c38a\">全体の感想</h2><p>長くなってきたので細かい実装については書きませんが、「実装したい機能がある→どうやったら実現できるか調べる」というプロセスでReact・JavaScriptの書き方も色々勉強になりました。<br><br>今回NotionをヘッドレスCMSとして使ってみて、フロントエンドを自前で作るという事は見た目を自由に作れるだけでなく、SG・SSRを使って機能性の高いサイトを作ることが出来ることが大きなメリットだと感じました。<br>先輩に良いアドバイスもいただいたので、今度はまた他のヘッドレスCMSのサービスを使って個人ブログを作ってみたいなと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">Home | My Notion Blog</a><br><br><a href=\"https://zenn.dev/st43/articles/7982e6d371f8b8#notion-api%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E4%B8%80%E8%A6%A7\" target=\"_blank\" rel=\"noopener noreferrer\">現在のNotion API（2021/7/13）で何がどこまでできるか</a><br><br><a href=\"https://zenn.dev/st43/articles/9a714916c50b80#%E3%81%BE%E3%81%A8%E3%82%81\" target=\"_blank\" rel=\"noopener noreferrer\">notion-blogで無料の個人ブログをつくってみました</a><br></p>","tags":[{"id":"nextjs","createdAt":"2022-01-07T13:18:14.144Z","updatedAt":"2022-02-12T02:31:58.832Z","publishedAt":"2022-01-07T13:18:14.144Z","revisedAt":"2022-01-07T13:18:14.144Z","tag":"Next.js"},{"id":"react","createdAt":"2022-01-07T13:17:54.189Z","updatedAt":"2022-02-12T02:31:51.382Z","publishedAt":"2022-01-07T13:17:54.189Z","revisedAt":"2022-01-07T13:17:54.189Z","tag":"React"}],"image":"notion"},"highlightedBody":"<html><head></head><body><h2 id=\"h8d027c8ed3\">はじめに</h2><p>年末年始1週間の自由研究として、Next.jsを使って何か作ってみたい…ということで、NotionをヘッドレスCMSとした個人ブログを作ってみました。<br><br>せっかくなので制作日記として、</p><ul><li> 作ったものを紹介</li><li> Notion Blogについて</li><li> Next.js（React）を使って自分で実装した機能</li></ul><p>などまとめておきたいと思います。<br><br>※ヘッドレスCMSとは…従来型のCMS（WordPress等）は入稿画面・DB・表示画面をまとめて管理するのに対し、ここから表示画面を除いたもの。ヘッドレスCMSでは、API経由で取得したコンテンツを基にフロントエンド部分は自前で実装する必要がある。<br></p><h2 id=\"he961b4efa4\">制作物について</h2><p>実際に作ったものがこちらです。<br><a href=\"https://hinako-blog.vercel.app/blog\" target=\"_blank\" rel=\"noopener noreferrer\">Hinako Blog | My Profile</a><br></p><h3 id=\"h0d376e5d4e\">構成</h3><p>構成を簡単に説明すると、<br></p><ul><li>Notion上にブログ記事を保管するDBを作り、Notionで記事を執筆</li><li>Next.jsのgetStaticPropsでNotionのAPIを叩いてブログコンテンツを取得</li><li>Next.jsでレスポンスを成形してビューに表示</li></ul><p><br>という感じです。<br><br>NotionのAPIを叩いてレスポンスを成形する部分は、Notion Blog（詳しくは後述）というOSSのテンプレートをベースに使わせていただきました。<br>デプロイはVercelで行いました。<br></p><h3 id=\"had81f6e58c\">実装した機能</h3><ul><li>MITライセンスのOSSとして公開されているNotion Blog（Vercel社のJJ Kasperさん作）をベースに使用</li><li>DBにcategoryのカラムを追加し、NotionのAPIからのレスポンスの成形やビューへの表示をカスタマイズ</li><li>フロント側での「カテゴリーの選択」「投稿した月の選択」「フリーキーワードによる検索」によるリアルタイム検索機能</li><li>記事のカテゴリーに応じてReact iconsでアイコンを表示する</li><li>CSS Modules</li><li>UIパーツのコンポーネント化</li><li>propsやstateの値により、条件付きレンダリングを行ったりCSSを動的に切り替える</li></ul><p><br></p><h2 id=\"h5043d0744e\">Notion Blogについて</h2><p>ベースに使用したNotion Blogというのは、NotionのAPIを叩いてNotionからコンテンツを取得しNext.jsでビューを作ったテンプレートです。<br><br>GitHub：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog</a><br>公式のサンプルページ：<a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/</a><br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/007ccf5040c24c7dad664d036d40997e/notion-blog.png\" alt=\"\"><br>こんな感じでシンプルで綺麗なUIをしています。<br>コードをいじったりしなくても、DeployボタンからVercelに連携し、NotionのDBのID・Tokenを環境変数に設定してVercelでデプロイするだけで、このテンプレート通りの個人ブログが出来るというものです。<br></p><h3 id=\"h0893011e20\">Notion Blogでブログコンテンツを取得する仕組み</h3><p>あらかじめNotionで記事を登録するDB（Page, Slug, Published, Date, Authorsの5つの要素を持つインラインテーブル）を作り、このテーブルに記事を入れておきます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2df6468fd6054e47b8f1f212f7e5fa3a/table.png\" alt=\"\"><br>画像引用：<a style=\"color:#4aac00\" href=\"https://github.com/ijjk/notion-blog#manually-creating-the-table\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ijjk/notion-blog#manually-creating-the-table</a><br><br>Notion Blogのソースを見ると、Next.jsのgetStaticPropsでNotionのAPIを叩いてデータベースのコンテンツを取得しています。<br>使っているのは非公式のAPIで「<a style=\"color:#4aac00\" href=\"https://www.notion.so/api/v3%E3%80%8D\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.notion.so/api/v3」</a>&nbsp;というエンドポイントを叩いているようです。<br></p><h3 id=\"h814caf386c\">Notion Blogを使った理由</h3><p>Notion 公式のAPI（ベータ版）も2021年5月に公開され、OSSとして公開されているテンプレートで公式APIが使われているものもある中で、Notion Blogを選んだ理由は以下の通りです。<br></p><ul><li>公式のNotion APIはコードブロックに対応していない（もしアップデートを見落としていたらすみません。）</li><li>公式のNotion APIでは、コンテンツを取得するだけでなくAPIを使ってNotionのDBへ追加・更新・削除する機能もあるが、これらの機能は不要と思った。</li><li>Notion Blogでは、決められた5つのカラムを持つテーブルをNotionで作るだけでテンプレート通りに表示される。簡単！はやい！</li></ul><p><br>ざっくりいうと、<strong>とりあえず最速・簡単な方法で小さく作って、残った時間でカスタマイズしてみよう</strong>という感じです。<br></p><h3 id=\"h2c8c89326b\">Notion Blogのセットアップ方法</h3><p>セットアップ方法は、公式サンプルのページに動画付きで分かりやすく書かれているので省略します。<br><br><a style=\"color:#4aac00\" href=\"https://notion-blog.vercel.app/blog/my-first-post\" target=\"_blank\" rel=\"noopener noreferrer\">https://notion-blog.vercel.app/blog/my-first-post</a><br>Deployボタンからコードを目にすることも無くデプロイすることも出来るようですが、今回はAPIから受け取るレスポンスの成形やUIはカスタマイズする前提だったので、git cloneして編集したうえでデプロイしました。<br></p><h3 id=\"h1d7f1fe064\">Notion Blogを使ってみて</h3><ul><li>テンプレートのコードを読んで</li></ul><p>APIへのリクエストを行うメソッドのファイル切り分け・ディレクトリ構成が分かりやすく、カスタマイズしやすかったです。<br>Next.jsのダイナミックルーティングを使う際に、ヘッダのメタ情報を出しわける書き方も初めて見て勉強になりました。<br><br>ここからは、ブログ記事をブラウザで表示した時の見え方についてです。<br></p><ul><li>画像・動画の挿入</li></ul><p>簡単に挿入できるものの、画像のアスペクト比が若干おかしくなっていました…。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/be464a17a7d74abe9afdcd84d268199b/%E7%94%BB%E5%83%8F%E5%8B%95%E7%94%BB.png\" alt=\"\"><br><br><br>動画はNotionで見たまま反映され、再生速度の調整まで出来るのでこれはスゴイ！感激でした。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/f1847b01ffc84d62a89559fd86c389ce/%E5%8B%95%E7%94%BB.png\" alt=\"\"><br></p><ul><li>コードブロックの挿入</li></ul><p>公式APIでは対応していないコードブロックも、非公式APIを使っているNotion Blogでは表示できました。<br>文字色のCSSなんかも自由にカスタマイズできます。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/20ed291c84c841a8a67807a6c96c2514/%E3%82%B3%E3%83%BC%E3%83%89%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF.png\" alt=\"\"><br><br>ただしNotion Blogで使っているのは非公式APIなので、<br></p><ul><li>動作が不安定（実際、稀にコンテンツが取得できないという事が起こりました。）</li><li>今後このAPIが使えなくなる可能性もある</li><li><br></li></ul><p>というデメリットはあると思われます。<br></p><h2 id=\"hafa005fc12\">自分で実装した機能</h2><p>自分で追加実装した機能や、その他使用技術について書いていきます。<br></p><h3 id=\"h604b8042b8\">検索機能</h3><p>カテゴリーで絞り込み・投稿月で絞りこみ・フリーキーワード検索の機能を実装しました。<br><br>ページ上部<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/5d8f8a862a3344fc8fe16447103ba0f6/%E3%83%9A%E3%83%BC%E3%82%B8%E4%B8%8A%E9%83%A8.png\" alt=\"\"><br><br>フッター<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/2cd3e007541943cb82954cf062c40479/%E3%83%95%E3%83%83%E3%82%BF%E3%83%BC.png\" alt=\"\"><br><br>【実装手順】<br>①　APIから取得したブログコンテンツに存在するカテゴリーを配列に格納して、記事が存在する分のカテゴリーボタンを表示。投稿月についても同様。<br>②　ボタンを押したときや検索欄に入力をした際に発火する絞り込み処理を実装。<br><br>フロント側で保持している記事データに対して絞り込みを行い表示を切り替える機能なので、リロードなく瞬時に表示が切り替わります。<br>検索機能の書き方は非常に勉強になったので、別記事にまとめようと思います。<br></p><h3 id=\"hc06cf54a32\">React Icons</h3><p>記事のカテゴリーに応じてアイコンを表示しました。<br><img src=\"https://images.microcms-assets.io/assets/bb9889e81cb24134954870eb1f2ba680/6d8cb6b91d2740649bcd296b5d054bf6/react-icon.png\" alt=\"\"><br><br><br>アイコンといえばFontAwesomeと思っていましたが、React用のライブラリがありました。<br><a href=\"https://react-icons.github.io/react-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">React Icons</a><br><br>このライブラリをインストールすると、Font Awesome や Material、Typicons、Codicons（VSCode のアイコン）など色んな種類のアイコンを簡単に利用することができます。<br>使い方は以下の記事を参考にさせて頂きました。<br><br><a href=\"https://zenn.dev/taichifukumoto/articles/how-to-use-react-icons\" target=\"_blank\" rel=\"noopener noreferrer\">React でアイコンを使うなら React Icons がおすすめ</a><br></p><h3 id=\"h5a4cb7eb5d\">CSS Modules</h3><p>CSSは、Notion BlogでCSS Modulesが使われていたので、そのままCSS Modulesを使いました。<br><strong><code>.module.css</code></strong>&nbsp;で定義したクラス名がそのまま付与されるのではなく、実際はユニークなクラス名が自動的に生成されて付与されることも検証ツールで確認できて、勉強になりました。<br><br>Reactのプロジェクト下でのCSSといえば代表的な選択肢は、CSS Modules、styled-component、Tailwindあたりなのかと思いますが、それぞれの違いやメリットデメリットについては正直勉強不足です。。<br><a href=\"https://kenzoblog.vercel.app/posts/css-manage\" target=\"_blank\" rel=\"noopener noreferrer\">styled-components, CSS Modules について調べたのでまとめる</a><br><br>業務ではTailwindを使っており、今回初めてCSS Modulesを使い、両者の個人的な感想を書いておきます。<br></p><ul><li>Tailwind</li></ul><p>ファイルの行き来をせずスタイルを確認できて便利。小規模なプロダクトに向いていそう。<br></p><ul><li>CSS Modules</li></ul><p>コンポーネント単位でスタイルをまとめるという思想なので、コンポーネント指向のReactとの相性は良い（のだと思う）。<br>スタイルの共通化がしやすくスッキリ整理整頓されている感じで、使いやすかった。<br></p><h2 id=\"hf32963c38a\">全体の感想</h2><p>長くなってきたので細かい実装については書きませんが、「実装したい機能がある→どうやったら実現できるか調べる」というプロセスでReact・JavaScriptの書き方も色々勉強になりました。<br><br>今回NotionをヘッドレスCMSとして使ってみて、フロントエンドを自前で作るという事は見た目を自由に作れるだけでなく、SG・SSRを使って機能性の高いサイトを作ることが出来ることが大きなメリットだと感じました。<br>先輩に良いアドバイスもいただいたので、今度はまた他のヘッドレスCMSのサービスを使って個人ブログを作ってみたいなと思います。<br></p><h2 id=\"he45680f0bc\">参考記事</h2><p><br><a href=\"unsafe:[object Object]\" target=\"_blank\" rel=\"noopener noreferrer\">Home | My Notion Blog</a><br><br><a href=\"https://zenn.dev/st43/articles/7982e6d371f8b8#notion-api%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E4%B8%80%E8%A6%A7\" target=\"_blank\" rel=\"noopener noreferrer\">現在のNotion API（2021/7/13）で何がどこまでできるか</a><br><br><a href=\"https://zenn.dev/st43/articles/9a714916c50b80#%E3%81%BE%E3%81%A8%E3%82%81\" target=\"_blank\" rel=\"noopener noreferrer\">notion-blogで無料の個人ブログをつくってみました</a><br></p></body></html>"},"__N_SSG":true}